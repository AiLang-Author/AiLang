// flow_control_test_harness.ailang
// Fixed version with proper syntax

PrintMessage("========================================")
PrintMessage("AILANG Flow Control Test Harness v1.0")
PrintMessage("========================================")
PrintMessage("")

// Global test tracking variables - MUST be declared first
total_tests = 0
passed_tests = 0
failed_tests = 0
test_name = ""
expected = 0
actual = 0

// Helper subroutine for test results (Functions with Input/Output/Body don't work)
SubRoutine.RecordTest {
    // Uses globals: test_name, expected, actual
    total_tests = Add(total_tests, 1)
    PrintMessage("TEST: ")
    PrintMessage(test_name)
    PrintMessage("  Expected: ")
    PrintNumber(expected)
    PrintMessage("  Actual: ")
    PrintNumber(actual)
    
    IfCondition EqualTo(expected, actual) ThenBlock {
        PrintMessage("  PASS")
        passed_tests = Add(passed_tests, 1)
    } ElseBlock {
        PrintMessage("  FAIL")
        failed_tests = Add(failed_tests, 1)
    }
}

PrintMessage("========================================")
PrintMessage("SECTION 1: BASIC IF-THEN-ELSE")
PrintMessage("========================================")

// Test 1.1: Simple boolean condition
PrintMessage("1.1 Boolean Literal Conditions")
result1 = 0
IfCondition True ThenBlock {
    result1 = 1
}
test_name = "If True"
expected = 1
actual = result1
RunTask(RecordTest)

result2 = 1
IfCondition False ThenBlock {
    result2 = 0
} ElseBlock {
    result2 = 2
}
test_name = "If False with Else"
expected = 2
actual = result2
RunTask(RecordTest)

// Test 1.2: Numeric conditions
PrintMessage("")
PrintMessage("1.2 Numeric Conditions")
result3 = 0
IfCondition 1 ThenBlock {
    result3 = 10
}
test_name = "If 1 (truthy)"
expected = 10
actual = result3
RunTask(RecordTest)

result4 = 1
IfCondition 0 ThenBlock {
    result4 = 0
} ElseBlock {
    result4 = 20
}
test_name = "If 0 (falsy)"
expected = 20
actual = result4
RunTask(RecordTest)

// Test 1.3: Variable conditions
PrintMessage("")
PrintMessage("1.3 Variable Conditions")
flag = 1
result5 = 0
IfCondition flag ThenBlock {
    result5 = 30
}
test_name = "Variable condition (truthy)"
expected = 30
actual = result5
RunTask(RecordTest)

empty_flag = 0
result6 = 1
IfCondition empty_flag ThenBlock {
    result6 = 0
} ElseBlock {
    result6 = 40
}
test_name = "Variable condition (falsy)"
expected = 40
actual = result6
RunTask(RecordTest)

// Test 1.4: Function call conditions
PrintMessage("")
PrintMessage("1.4 Function Call Conditions")
x = 5
y = 3
result7 = 0
IfCondition GreaterThan(x, y) ThenBlock {
    result7 = 50
}
test_name = "GreaterThan(5, 3)"
expected = 50
actual = result7
RunTask(RecordTest)

a = 2
b = 8
result8 = 1
IfCondition LessThan(a, b) ThenBlock {
    result8 = 60
} ElseBlock {
    result8 = 0
}
test_name = "LessThan(2, 8)"
expected = 60
actual = result8
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 2: WHILE LOOPS")
PrintMessage("========================================")

// Test 2.1: Basic counting loop
PrintMessage("2.1 Basic Counting Loop")
counter = 0
iterations = 0
WhileLoop LessThan(counter, 3) {
    iterations = Add(iterations, 1)
    counter = Add(counter, 1)
}
test_name = "Count to 3"
expected = 3
actual = iterations
RunTask(RecordTest)

test_name = "Final counter"
expected = 3
actual = counter
RunTask(RecordTest)

// Test 2.2: Condition with variables
PrintMessage("")
PrintMessage("2.2 Variable-Based Loop")
done = 0
steps = 0
WhileLoop EqualTo(done, 0) {
    steps = Add(steps, 1)
    IfCondition EqualTo(steps, 4) ThenBlock {
        done = 1
    }
}
test_name = "Variable termination"
expected = 4
actual = steps
RunTask(RecordTest)

// Test 2.3: Nested loops
PrintMessage("")
PrintMessage("2.3 Nested Loops")
outer_count = 0
total_inner = 0
inner_count = 0
WhileLoop LessThan(outer_count, 2) {
    inner_count = 0
    WhileLoop LessThan(inner_count, 3) {
        total_inner = Add(total_inner, 1)
        inner_count = Add(inner_count, 1)
    }
    outer_count = Add(outer_count, 1)
}
test_name = "Nested loop iterations"
expected = 6
actual = total_inner
RunTask(RecordTest)

// Test 2.4: Loop with complex condition
PrintMessage("")
PrintMessage("2.4 Complex Loop Conditions")
value = 10
result9 = 0
WhileLoop And(GreaterThan(value, 0), LessThan(result9, 100)) {
    result9 = Add(result9, value)
    value = Subtract(value, 3)
}
test_name = "Complex condition result"
expected = 40
actual = result9
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 3: LOOP CONTROL (BREAK/CONTINUE)")
PrintMessage("NOTE: May not be implemented")
PrintMessage("========================================")

// Test 3.1: Break statement (may fail if not implemented)
PrintMessage("3.1 Break Statement")
break_counter = 0
break_sum = 0
WhileLoop LessThan(break_counter, 10) {
    break_counter = Add(break_counter, 1)
    break_sum = Add(break_sum, break_counter)
    
    IfCondition EqualTo(break_counter, 4) ThenBlock {
        // BreakLoop  // Uncomment if implemented
        // Workaround: set condition to exit
        break_counter = 10
    }
}
test_name = "Break at 4 (simulated)"
expected = 11  // Will be 11 due to workaround
actual = break_counter
RunTask(RecordTest)

// Test 3.2: Continue statement (likely not implemented)
PrintMessage("")
PrintMessage("3.2 Continue Statement")
PrintMessage("(ContinueLoop likely not implemented - using workaround)")
continue_counter = 0
odd_sum = 0
WhileLoop LessThan(continue_counter, 6) {
    continue_counter = Add(continue_counter, 1)
    
    // Skip even numbers (workaround for missing ContinueLoop)
    is_odd = Modulo(continue_counter, 2)
    IfCondition EqualTo(is_odd, 1) ThenBlock {
        odd_sum = Add(odd_sum, continue_counter)
    }
}
test_name = "Continue loop counter"
expected = 6
actual = continue_counter
RunTask(RecordTest)

test_name = "Odd numbers sum"
expected = 9
actual = odd_sum
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 4: ADVANCED PATTERNS")
PrintMessage("========================================")

// Test 4.1: State machine pattern
PrintMessage("4.1 State Machine Pattern")
state = 1
machine_steps = 0
data_value = 0

WhileLoop LessThan(state, 3) {
    machine_steps = Add(machine_steps, 1)
    
    IfCondition EqualTo(state, 1) ThenBlock {
        data_value = 100
        state = 2
    } ElseBlock {
        IfCondition EqualTo(state, 2) ThenBlock {
            data_value = Multiply(data_value, 2)
            state = 3
        }
    }
}
test_name = "State machine steps"
expected = 2
actual = machine_steps
RunTask(RecordTest)

test_name = "Final data value"
expected = 200
actual = data_value
RunTask(RecordTest)

// Test 4.2: Factorial calculation
PrintMessage("")
PrintMessage("4.2 Factorial Calculation")
num = 1
factorial = 1
WhileLoop LessEqual(num, 5) {
    factorial = Multiply(factorial, num)
    num = Add(num, 1)
}
test_name = "Factorial of 5"
expected = 120
actual = factorial
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 5: EDGE CASES")
PrintMessage("========================================")

// Test 5.1: Zero iteration loop
PrintMessage("5.1 Zero Iteration Loop")
zero_iter = 0
WhileLoop LessThan(5, 3) {
    zero_iter = Add(zero_iter, 1)
}
test_name = "Zero iterations"
expected = 0
actual = zero_iter
RunTask(RecordTest)

// Test 5.2: Single iteration loop
PrintMessage("")
PrintMessage("5.2 Single Iteration Loop")
single_iter = 0
control_var = 0
WhileLoop EqualTo(control_var, 0) {
    single_iter = Add(single_iter, 1)
    control_var = 1
}
test_name = "Single iteration"
expected = 1
actual = single_iter
RunTask(RecordTest)

// Test 5.3: Deeply nested conditions
PrintMessage("")
PrintMessage("5.3 Deeply Nested Conditions")
deep_result = 0
level1 = 1
level2 = 1
level3 = 1

IfCondition EqualTo(level1, 1) ThenBlock {
    IfCondition EqualTo(level2, 1) ThenBlock {
        IfCondition EqualTo(level3, 1) ThenBlock {
            deep_result = 777
        }
    }
}
test_name = "Deep nesting"
expected = 777
actual = deep_result
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("FINAL TEST SUMMARY")
PrintMessage("========================================")

PrintMessage("Total Tests Run: ")
PrintNumber(total_tests)
PrintMessage("Tests Passed: ")
PrintNumber(passed_tests)
PrintMessage("Tests Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock {
    // Calculate percentage (integer division)
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")

IfCondition EqualTo(failed_tests, 0) ThenBlock {
    PrintMessage("")
    PrintMessage("ALL TESTS PASSED!")
    PrintMessage("Flow control implementation is working correctly.")
} ElseBlock {
    PrintMessage("")
    PrintMessage("FAILURES DETECTED")
    PrintMessage("Review failed tests above.")
}

PrintMessage("")
PrintMessage("Test harness complete.")