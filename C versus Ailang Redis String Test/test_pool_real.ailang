// test_pool_real.ailang
// Real pool allocator performance test

PrintMessage("Real Pool Allocator Test")
PrintMessage("========================")

// Initialize a string pool with 64KB
// This is ONE mmap syscall for the entire pool
PrintMessage("")
PrintMessage("Initializing 64KB string pool...")
DebugPerf.Start("pool_init")
pool = StringPool.Init(65536)
DebugPerf.End("pool_init")

// Verify pool was created
IfCondition EqualTo(pool, 0) ThenBlock {
    PrintMessage("ERROR: Pool initialization failed!")
    HaltProgram("Pool init failed")
}
PrintMessage("Pool initialized successfully")

// Test 1: Regular StringConcat (10 mmap syscalls)
PrintMessage("")
PrintMessage("Test 1: Regular StringConcat (10x)")
DebugPerf.Start("regular_concat")
i = 0
str1 = "A"
WhileLoop LessThan(i, 10) {
    str1 = StringConcat(str1, "B")
    i = Add(i, 1)
}
DebugPerf.End("regular_concat")
PrintMessage("Result:")
PrintMessage(str1)

// Test 2: Pooled StringConcat (ZERO syscalls)
PrintMessage("")
PrintMessage("Test 2: Pooled StringConcat (10x)")
DebugPerf.Start("pooled_concat")
j = 0
str2 = "A"
WhileLoop LessThan(j, 10) {
    str2 = StringConcatPooled(str2, "B")
    j = Add(j, 1)
}
DebugPerf.End("pooled_concat")
PrintMessage("Result:")
PrintMessage(str2)

// Check pool usage
PrintMessage("")
PrintMessage("Pool statistics:")
used = StringPool.Status()
PrintMessage("Bytes used:")
PrintNumber(used)
PrintMessage("of 65536 available")

// Test 3: Massive scale test (100 concatenations)
PrintMessage("")
PrintMessage("Test 3: 100 concatenations")

// Regular (100 mmap syscalls!)
//DebugPerf.Start("regular_100x")
//k = 0
//str3 = "X"
//WhileLoop LessThan(k, 100) {
//    str3 = StringConcat(str3, "Y")
//    k = Add(k, 1)
//}
//DebugPerf.End("regular_100x")

// Pooled (still ZERO syscalls!)
DebugPerf.Start("pooled_100x")
m = 0
str4 = "X"
WhileLoop LessThan(m, 100) {
    str4 = StringConcatPooled(str4, "Y")
    m = Add(m, 1)
}
DebugPerf.End("pooled_100x")




// Final pool status
PrintMessage("")
used = StringPool.Status()
PrintMessage("Final pool usage:")
PrintNumber(used)
PrintMessage("bytes")

// Calculate savings
PrintMessage("")
PrintMessage("Performance Analysis:")
PrintMessage("- Regular: 110 mmap syscalls")
PrintMessage("- Pooled: 1 mmap syscall")
PrintMessage("- Syscalls eliminated: 109")
PrintMessage("- Estimated cycles saved: ~3,000,000+")

PrintMessage("")
PrintMessage("Test complete!")