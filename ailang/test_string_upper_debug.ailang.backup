// test_string_upper_debug.ailang
// Focused test to debug the StringToUpper -> StringEquals crash
// This reproduces the exact scenario from the Redis server

PrintMessage("=== StringToUpper/StringEquals Debug Test ===")
PrintMessage("")

// Test 1: Basic StringToUpper
PrintMessage("[1] Basic StringToUpper Test")
Debug("Test1.Start", level=1) {
    PrintMessage("  Creating test string 'ping'")
}

original = "ping"
PrintMessage("  Original: ")
PrintMessage(original)
PrintMessage("  Original address: ")
PrintNumber(original)

Debug("Test1.PreUpper", level=2) {
    PrintMessage("  About to call StringToUpper...")
}

upper = StringToUpper(original)

Debug("Test1.PostUpper", level=2) {
    PrintMessage("  StringToUpper returned: ")
    PrintNumber(upper)
}

PrintMessage("  Uppercase: ")
PrintMessage(upper)

PrintMessage("")

// Test 2: StringEquals with literals
PrintMessage("[2] StringEquals with Literals")
Debug("Test2.Start", level=1) {
    PrintMessage("  Testing StringEquals with string literals")
}

// Test comparing original with literal
eq1 = StringEquals(original, "ping")
PrintMessage("  StringEquals('ping', 'ping'): ")
PrintNumber(eq1)
DebugAssert(EqualTo(eq1, 1), "Lowercase should match")

// Test comparing uppercase result with literal
Debug("Test2.PreCompare", level=2) {
    PrintMessage("  About to compare uppercase with 'PING'...")
    PrintMessage("  Upper address: ")
    PrintNumber(upper)
}

eq2 = StringEquals(upper, "PING")

Debug("Test2.PostCompare", level=2) {
    PrintMessage("  StringEquals returned: ")
    PrintNumber(eq2)
}

PrintMessage("  StringEquals(upper, 'PING'): ")
PrintNumber(eq2)
DebugAssert(EqualTo(eq2, 1), "Uppercase should match PING")

PrintMessage("")

// Test 3: Simulate exact Redis scenario
PrintMessage("[3] Simulate Redis Scenario")
Debug("Test3.Start", level=1) {
    PrintMessage("  Simulating RESP command parsing")
}

// Simulate extracting "PING" from buffer (like StringExtract does)
PrintMessage("  Creating extracted command...")
extracted = "PING"
PrintMessage("  Extracted: ")
PrintMessage(extracted)
PrintMessage("  Extracted address: ")
PrintNumber(extracted)

Debug("Test3.ToUpper", level=2) {
    PrintMessage("  Converting extracted to uppercase...")
}

extracted_upper = StringToUpper(extracted)

Debug("Test3.UpperResult", level=2) {
    PrintMessage("  Upper result: ")
    PrintMessage(extracted_upper)
    PrintMessage("  Upper address: ")
    PrintNumber(extracted_upper)
}

// This is where Redis crashes - comparing uppercase with literal
Debug("Test3.CriticalTest", level=1) {
    PrintMessage("  >>> CRITICAL TEST: Compare with literal <<<")
}

is_ping = StringEquals(extracted_upper, "PING")

Debug("Test3.Survived", level=1) {
    PrintMessage("  >>> SURVIVED CRITICAL TEST <<<")
    PrintMessage("  Result: ")
    PrintNumber(is_ping)
}

PrintMessage("  StringEquals(extracted_upper, 'PING'): ")
PrintNumber(is_ping)

PrintMessage("")

// Test 4: Multiple comparisons (like Redis does)
PrintMessage("[4] Multiple Command Comparisons")
Debug("Test4.Start", level=1) {
    PrintMessage("  Testing multiple StringEquals like Redis")
}

command = StringToUpper("get")
PrintMessage("  Command after uppercase: ")
PrintMessage(command)

Debug("Test4.Comparisons", level=2) {
    PrintMessage("  Running multiple comparisons...")
}

is_ping_check = StringEquals(command, "PING")
PrintMessage("  Is PING? ")
PrintNumber(is_ping_check)

is_get_check = StringEquals(command, "GET")
PrintMessage("  Is GET? ")
PrintNumber(is_get_check)

is_set_check = StringEquals(command, "SET")
PrintMessage("  Is SET? ")
PrintNumber(is_set_check)

PrintMessage("")

// Test 5: Check string allocation pattern
PrintMessage("[5] String Allocation Pattern")
Debug("Test5.Memory", level=1) {
    PrintMessage("  Checking memory allocation pattern")
}

// Create multiple uppercase strings
u1 = StringToUpper("test1")
PrintMessage("  u1 address: ")
PrintNumber(u1)

u2 = StringToUpper("test2")
PrintMessage("  u2 address: ")
PrintNumber(u2)

u3 = StringToUpper("test3")
PrintMessage("  u3 address: ")
PrintNumber(u3)

// Check if they're properly allocated
Debug("Test5.Verification", level=2) {
    PrintMessage("  Verifying allocations...")
}

v1 = StringEquals(u1, "TEST1")
v2 = StringEquals(u2, "TEST2")
v3 = StringEquals(u3, "TEST3")

PrintMessage("  Verification results: ")
PrintNumber(v1)
PrintMessage(", ")
PrintNumber(v2)
PrintMessage(", ")
PrintNumber(v3)

PrintMessage("")

// Test 6: StringExtract + StringToUpper + StringEquals (full chain)
PrintMessage("[6] Full Chain Test")
Debug("Test6.FullChain", level=1) {
    PrintMessage("  Testing complete chain like Redis")
}

// Create a buffer like RESP would have
buffer = "*1\r\n$4\r\nPING\r\n"
PrintMessage("  Buffer: ")
PrintMessage(buffer)

// Extract just the command part (simulate what RESP parser does)
// Start at position 8 (after "*1\r\n$4\r\n"), length 4
extracted_cmd = StringExtract(buffer, 8, 4)

Debug("Test6.Extracted", level=2) {
    PrintMessage("  Extracted command: '")
    PrintMessage(extracted_cmd)
    PrintMessage("'")
    PrintMessage("  Address: ")
    PrintNumber(extracted_cmd)
}

// Convert to uppercase
upper_cmd = StringToUpper(extracted_cmd)

Debug("Test6.Upper", level=2) {
    PrintMessage("  Uppercase: '")
    PrintMessage(upper_cmd)
    PrintMessage("'")
    PrintMessage("  Address: ")
    PrintNumber(upper_cmd)
}

// Compare with literal (this is where Redis crashes)
Debug("Test6.FinalCompare", level=1) {
    PrintMessage("  >>> FINAL COMPARISON TEST <<<")
}

final_result = StringEquals(upper_cmd, "PING")

Debug("Test6.Success", level=1) {
    PrintMessage("  >>> TEST COMPLETED SUCCESSFULLY <<<")
    PrintMessage("  Match result: ")
    PrintNumber(final_result)
}

PrintMessage("")
PrintMessage("=== ALL TESTS COMPLETED ===")

IfCondition EqualTo(final_result, 1) ThenBlock {
    PrintMessage("SUCCESS: The string operations work correctly!")
    PrintMessage("The Redis crash must be due to something else.")
} ElseBlock {
    PrintMessage("ISSUE FOUND: String comparison failed!")
    PrintMessage("This explains the Redis crash.")
}

PrintMessage("")
PrintMessage("If this test crashes at the same point as Redis,")
PrintMessage("we've successfully isolated the bug!")