LibraryImport.Core.Math {
    // Basic math operations not in core language
    
    Function.Math.Modulo {
        Input: (dividend: Integer, divisor: Integer)
        Output: Integer
        Body: {
            IfCondition EqualTo(divisor, 0) ThenBlock: {
                PrintMessage("Error: Division by zero in modulo")
                ReturnValue(0)
            }
            quotient = Divide(dividend, divisor)
            remainder = Subtract(dividend, Multiply(quotient, divisor))
            ReturnValue(remainder)
        }
    }
    
    Function.Math.ModuloFloat {
        Input: (dividend: FloatingPoint, divisor: FloatingPoint)
        Output: FloatingPoint
        Body: {
            IfCondition EqualTo(divisor, 0.0) ThenBlock: {
                PrintMessage("Error: Division by zero in modulo")
                ReturnValue(0.0)
            }
            quotient = Divide(dividend, divisor)
            // Floor the quotient
            quotient_int = quotient  // Would need proper floor function
            remainder = Subtract(dividend, Multiply(quotient_int, divisor))
            ReturnValue(remainder)
        }
    }
    
    Function.Math.Abs {
        Input: (value: FloatingPoint)
        Output: FloatingPoint
        Body: {
            IfCondition LessThan(value, 0.0) ThenBlock: {
                ReturnValue(Multiply(value, -1.0))
            }
            ReturnValue(value)
        }
    }
    
    Function.Math.Min {
        Input: (a: FloatingPoint, b: FloatingPoint)
        Output: FloatingPoint
        Body: {
            IfCondition LessThan(a, b) ThenBlock: {
                ReturnValue(a)
            }
            ReturnValue(b)
        }
    }
    
    Function.Math.Max {
        Input: (a: FloatingPoint, b: FloatingPoint)
        Output: FloatingPoint
        Body: {
            IfCondition GreaterThan(a, b) ThenBlock: {
                ReturnValue(a)
            }
            ReturnValue(b)
        }
    }
}