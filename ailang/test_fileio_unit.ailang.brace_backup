// test_fileio_unit.ailang
// Unit test for file I/O operations - minimal, focused testing

PrintMessage("File I/O Unit Tests")
PrintMessage("==================")

// === UNIT 1: WriteTextFile ===
PrintMessage("[UNIT] WriteTextFile")

WriteTextFile("unit1.txt", "test content")
exists1 = FileExists("unit1.txt")
DebugAssert(EqualTo(exists1, 1), "WriteTextFile basic")

WriteTextFile("unit2.txt", "")
exists2 = FileExists("unit2.txt") 
DebugAssert(EqualTo(exists2, 1), "WriteTextFile empty")

PrintMessage("  WriteTextFile: PASS")

// === UNIT 2: FileExists ===
PrintMessage("[UNIT] FileExists")

missing = FileExists("nonexistent_12345.txt")
DebugAssert(EqualTo(missing, 0), "FileExists missing file")

WriteTextFile("unit3.txt", "exists test")
present = FileExists("unit3.txt")
DebugAssert(EqualTo(present, 1), "FileExists present file")

PrintMessage("  FileExists: PASS")

// === UNIT 3: String Operations with Files ===
PrintMessage("[UNIT] String + File Operations")

filename = StringConcat("dynamic_", "name.txt")
content = StringConcat("Dynamic ", "content")
WriteTextFile(filename, content)
dyn_exists = FileExists(filename)
DebugAssert(EqualTo(dyn_exists, 1), "Dynamic filename+content")

PrintMessage("  String+File: PASS")

// === UNIT 4: Numeric Content ===
PrintMessage("[UNIT] Numeric File Content")

num_str = NumberToString(42)
WriteTextFile("number.txt", num_str)
num_exists = FileExists("number.txt")
DebugAssert(EqualTo(num_exists, 1), "Numeric content write")

PrintMessage("  Numeric: PASS")

// === UNIT 5: Overwrite Behavior ===
PrintMessage("[UNIT] File Overwrite")

WriteTextFile("overwrite.txt", "original")
WriteTextFile("overwrite.txt", "replacement")
ow_exists = FileExists("overwrite.txt")
DebugAssert(EqualTo(ow_exists, 1), "File overwrite")

PrintMessage("  Overwrite: PASS")

PrintMessage("==================")
PrintMessage("All file I/O units PASS")
PrintMessage("Files created in current directory")