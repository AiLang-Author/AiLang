// test_string_harness.ailang
// Comprehensive test of string operations to identify bugs

PrintMessage("=== STRING OPERATIONS TEST HARNESS ===")
PrintMessage("")

// Test tracking
total_tests = 0
passed_tests = 0

// ========================================
// TEST 1: Basic String Creation
// ========================================
PrintMessage("[1] String Literals")
str1 = "Hello"
str2 = "World"
empty = ""

PrintMessage("  str1 = 'Hello'")
PrintMessage("  str2 = 'World'")
PrintMessage("  empty = ''")

len1 = StringLength(str1)
len2 = StringLength(str2)
len_empty = StringLength(empty)

PrintMessage("  Length of 'Hello': ")
PrintNumber(len1)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(len1, 5) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 5")
}

PrintMessage("  Length of 'World': ")
PrintNumber(len2)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(len2, 5) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 5")
}

PrintMessage("  Length of empty: ")
PrintNumber(len_empty)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(len_empty, 0) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 0")
}

// ========================================
// TEST 2: StringEquals
// ========================================
PrintMessage("")
PrintMessage("[2] StringEquals")

eq1 = StringEquals("test", "test")
eq2 = StringEquals("test", "Test")
eq3 = StringEquals("", "")
eq4 = StringEquals("abc", "")

PrintMessage("  'test' == 'test': ")
PrintNumber(eq1)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(eq1, 1) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 1")
}

PrintMessage("  'test' == 'Test': ")
PrintNumber(eq2)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(eq2, 0) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 0")
}

PrintMessage("  '' == '': ")
PrintNumber(eq3)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(eq3, 1) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 1")
}

// ========================================
// TEST 3: StringConcat
// ========================================
PrintMessage("")
PrintMessage("[3] StringConcat")

concat1 = StringConcat("Hello", "World")
PrintMessage("  'Hello' + 'World' = ")
PrintMessage(concat1)
len_concat1 = StringLength(concat1)
PrintMessage("  Length: ")
PrintNumber(len_concat1)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(len_concat1, 10) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 10")
}

concat2 = StringConcat("", "test")
PrintMessage("  '' + 'test' = ")
PrintMessage(concat2)
eq_test = StringEquals(concat2, "test")
total_tests = Add(total_tests, 1)
IfCondition EqualTo(eq_test, 1) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Should equal 'test'")
}

// ========================================
// TEST 4: NumberToString / StringToNumber
// ========================================
PrintMessage("")
PrintMessage("[4] Number Conversions")

num_str = NumberToString(42)
PrintMessage("  NumberToString(42) = ")
PrintMessage(num_str)
len_num = StringLength(num_str)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(len_num, 2) ThenBlock: {
    PrintMessage("  ✓ PASS - Length is 2")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Length should be 2")
}

str_num = StringToNumber("42")
PrintMessage("  StringToNumber('42') = ")
PrintNumber(str_num)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(str_num, 42) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 42")
}

neg_str = NumberToString(-123)
PrintMessage("  NumberToString(-123) = ")
PrintMessage(neg_str)
neg_num = StringToNumber("-123")
PrintMessage("  StringToNumber('-123') = ")
PrintNumber(neg_num)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(neg_num, -123) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected -123")
}

// ========================================
// TEST 5: String Memory/Buffer Interaction
// ========================================
PrintMessage("")
PrintMessage("[5] String vs Buffer Tests")

// Test if strings work with buffers
buffer = Allocate(100)

// Store ASCII values for "TEST"
StoreValue(buffer, 84)        // 'T'
StoreValue(Add(buffer, 1), 69) // 'E'
StoreValue(Add(buffer, 2), 83) // 'S'
StoreValue(Add(buffer, 3), 84) // 'T'
StoreValue(Add(buffer, 4), 0)  // null terminator

PrintMessage("  Created buffer with 'TEST'")

// Read back individual bytes
b1 = Dereference(buffer)
b2 = Dereference(Add(buffer, 1))
b3 = Dereference(Add(buffer, 2))
b4 = Dereference(Add(buffer, 3))

PrintMessage("  Bytes: ")
PrintNumber(b1)
PrintMessage(", ")
PrintNumber(b2)
PrintMessage(", ")
PrintNumber(b3)
PrintMessage(", ")
PrintNumber(b4)

total_tests = Add(total_tests, 1)
IfCondition And(EqualTo(b1, 84), And(EqualTo(b2, 69), And(EqualTo(b3, 83), EqualTo(b4, 84)))) ThenBlock: {
    PrintMessage("  ✓ PASS - Buffer contains T-E-S-T")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Buffer corruption")
}

// ========================================
// TEST 6: Edge Cases
// ========================================
PrintMessage("")
PrintMessage("[6] Edge Cases")

// Very long string
long_str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
long_len = StringLength(long_str)
PrintMessage("  Long string length: ")
PrintNumber(long_len)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(long_len, 62) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 62")
}

// Multiple concatenations
multi = StringConcat("A", "B")
multi = StringConcat(multi, "C")
multi = StringConcat(multi, "D")
PrintMessage("  Multiple concats: ")
PrintMessage(multi)
multi_len = StringLength(multi)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(multi_len, 4) ThenBlock: {
    PrintMessage("  ✓ PASS - Length is 4")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected length 4")
}

// ========================================
// TEST 7: RESP-like String Building
// ========================================
PrintMessage("")
PrintMessage("[7] RESP String Simulation")

// Build a string like RESP would
resp_str = "+"
resp_str = StringConcat(resp_str, "OK")
resp_str = StringConcat(resp_str, "\r")
resp_str = StringConcat(resp_str, "\n")
PrintMessage("  Built: '+OK\\r\\n'")
resp_len = StringLength(resp_str)
PrintMessage("  Length: ")
PrintNumber(resp_len)
total_tests = Add(total_tests, 1)
IfCondition EqualTo(resp_len, 5) ThenBlock: {
    PrintMessage("  ✓ PASS")
    passed_tests = Add(passed_tests, 1)
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Expected 5")
}

// ========================================
// TEST 8: StringExtract Simulation
// ========================================
PrintMessage("")
PrintMessage("[8] String Extraction")

// Note: StringExtract may not be implemented
// Test what we can with available functions

source = "Hello World Test"
source_len = StringLength(source)
PrintMessage("  Source: ")
PrintMessage(source)
PrintMessage("  Length: ")
PrintNumber(source_len)

// ========================================
// SUMMARY
// ========================================
PrintMessage("")
PrintMessage("=== TEST SUMMARY ===")
PrintMessage("Total tests: ")
PrintNumber(total_tests)
PrintMessage("Passed: ")
PrintNumber(passed_tests)
PrintMessage("Failed: ")
PrintNumber(Subtract(total_tests, passed_tests))

success_rate = Multiply(Divide(passed_tests, total_tests), 100)
PrintMessage("Success rate: ")
PrintNumber(success_rate)
PrintMessage("%")

IfCondition EqualTo(passed_tests, total_tests) ThenBlock: {
    PrintMessage("")
    PrintMessage("✓ ALL TESTS PASSED - Strings working correctly!")
} ElseBlock: {
    PrintMessage("")
    PrintMessage("✗ FAILURES DETECTED - Check string implementation")
}

PrintMessage("")
PrintMessage("=== END TEST HARNESS ===")

// Deallocate test buffer
Deallocate(buffer, 100)