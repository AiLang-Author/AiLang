// test_fileio_comprehensive.ailang
// Comprehensive file I/O test suite with all sections
// Tests file operations with string manipulations

PrintMessage("========================================================")
PrintMessage("AILANG Comprehensive File I/O Test Suite")
PrintMessage("========================================================")
PrintMessage("")

// Test result tracking
total_tests = 0
passed_tests = 0
failed_tests = 0
test_name = ""
expected = 0
actual = 0

// Test result helper
SubRoutine.TestResult {
    total_tests = Add(total_tests, 1)
    PrintMessage("  TEST: ")
    PrintMessage(test_name)
    PrintMessage("    Expected: ")
    PrintNumber(expected)
    PrintMessage("    Actual: ")
    PrintNumber(actual)
    
    IfCondition EqualTo(expected, actual) ThenBlock: {
        PrintMessage("    PASS")
        passed_tests = Add(passed_tests, 1)
    } ElseBlock: {
        PrintMessage("    FAIL")
        failed_tests = Add(failed_tests, 1)
    }
    PrintMessage("")
}

// ========== SECTION 1: Basic File Operations ==========
PrintMessage("SECTION 1: Basic File Operations")
PrintMessage("--------------------------------")

// Test 1.1: Write and verify basic file
WriteTextFile("basic.txt", "Hello AILANG")
test_name = "Basic file exists"
expected = 1
actual = FileExists("basic.txt")
RunTask(TestResult)

// Test 1.2: Check non-existent file
test_name = "Non-existent file"
expected = 0
actual = FileExists("does_not_exist_12345.txt")
RunTask(TestResult)

// Test 1.3: Write empty file
WriteTextFile("empty.txt", "")
test_name = "Empty file exists"
expected = 1
actual = FileExists("empty.txt")
RunTask(TestResult)

// Test 1.4: Overwrite file
WriteTextFile("overwrite.txt", "Original content")
WriteTextFile("overwrite.txt", "New content")
test_name = "File overwrite"
expected = 1
actual = FileExists("overwrite.txt")
RunTask(TestResult)

// ========== SECTION 2: Dynamic Content Generation ==========
PrintMessage("")
PrintMessage("SECTION 2: Dynamic Content Generation")
PrintMessage("-------------------------------------")

// Test 2.1: Number to string conversion for content
num_value = 42
num_str = NumberToString(num_value)
WriteTextFile("number.txt", num_str)
test_name = "Number content file"
expected = 1
actual = FileExists("number.txt")
RunTask(TestResult)

// Test 2.2: String concatenation for content
part1 = "First part"
part2 = " and second part"
combined = StringConcat(part1, part2)
WriteTextFile("concat_content.txt", combined)
test_name = "Concatenated content"
expected = 1
actual = FileExists("concat_content.txt")
RunTask(TestResult)

// Test 2.3: Complex content building
header = "Report: "
value = NumberToString(999)
report = StringConcat(header, value)
WriteTextFile("report.txt", report)
test_name = "Complex content"
expected = 1
actual = FileExists("report.txt")
RunTask(TestResult)

// ========== SECTION 3: Dynamic Filename Generation ==========
PrintMessage("")
PrintMessage("SECTION 3: Dynamic Filename Generation")
PrintMessage("--------------------------------------")

// Test 3.1: Simple dynamic filename
base = "dynamic_"
suffix = "file.txt"
filename = StringConcat(base, suffix)
WriteTextFile(filename, "Dynamic filename test")
test_name = "Dynamic filename simple"
expected = 1
actual = FileExists(filename)
RunTask(TestResult)

// Test 3.2: Numeric filename
file_id = 123
id_str = NumberToString(file_id)
num_filename = StringConcat("file_", id_str)
num_filename = StringConcat(num_filename, ".txt")
WriteTextFile(num_filename, "Numeric filename")
test_name = "Numeric filename"
expected = 1
actual = FileExists(num_filename)
RunTask(TestResult)

// Test 3.3: Complex filename building
prefix = "log"
timestamp = NumberToString(20250121)
extension = ".txt"
log_file = StringConcat(prefix, "_")
log_file = StringConcat(log_file, timestamp)
log_file = StringConcat(log_file, extension)
WriteTextFile(log_file, "Log entry")
test_name = "Complex filename"
expected = 1
actual = FileExists(log_file)
RunTask(TestResult)

// ========== SECTION 4: Batch File Operations ==========
PrintMessage("")
PrintMessage("SECTION 4: Batch File Operations")
PrintMessage("--------------------------------")

// Create multiple files in a loop
batch_count = 0
i = 0
WhileLoop LessThan(i, 5) {
    // Build filename for each iteration
    batch_name = StringConcat("batch_", NumberToString(i))
    batch_name = StringConcat(batch_name, ".txt")
    
    // Build content
    batch_content = StringConcat("File number: ", NumberToString(i))
    
    // Write file
    WriteTextFile(batch_name, batch_content)
    
    // Verify it exists
    exists = FileExists(batch_name)
    IfCondition EqualTo(exists, 1) ThenBlock: {
        batch_count = Add(batch_count, 1)
    }
    
    i = Add(i, 1)
}

test_name = "Batch files created"
expected = 5
actual = batch_count
RunTask(TestResult)

// ========== SECTION 5: Stress Test ==========
PrintMessage("")
PrintMessage("SECTION 5: Stress Test")
PrintMessage("---------------------")

// Rapid file creation with varying names and content
stress_count = 0
j = 0
WhileLoop LessThan(j, 10) {
    // Create varied filename
    stress_file = StringConcat("stress_", NumberToString(j))
    stress_file = StringConcat(stress_file, "_test.txt")
    
    // Create varied content
    stress_content = StringConcat("Stress test file ", NumberToString(j))
    stress_content = StringConcat(stress_content, " with more content")
    
    // Write and verify
    WriteTextFile(stress_file, stress_content)
    
    verify = FileExists(stress_file)
    IfCondition EqualTo(verify, 1) ThenBlock: {
        stress_count = Add(stress_count, 1)
    }
    
    j = Add(j, 1)
}

test_name = "Stress test files"
expected = 10
actual = stress_count
RunTask(TestResult)

// ========== SECTION 6: Edge Cases ==========
PrintMessage("")
PrintMessage("SECTION 6: Edge Cases")
PrintMessage("--------------------")

// Test 6.1: Very long filename
long_name = "very_long_filename_that_tests_the_system_"
long_name = StringConcat(long_name, "with_many_characters_")
long_name = StringConcat(long_name, "to_see_if_it_works_properly.txt")
WriteTextFile(long_name, "Long name test")
test_name = "Long filename"
expected = 1
actual = FileExists(long_name)
RunTask(TestResult)

// Test 6.2: Special characters in content
special_content = "Line 1\nLine 2\tTabbed\n"
WriteTextFile("special.txt", special_content)
test_name = "Special characters"
expected = 1
actual = FileExists("special.txt")
RunTask(TestResult)

// Test 6.3: Reuse of variables
reused_name = "reused.txt"
WriteTextFile(reused_name, "First write")
reused_name = "reused2.txt"  // Change the variable
WriteTextFile(reused_name, "Second write")
test_name = "Variable reuse"
expected = 1
actual = FileExists("reused2.txt")
RunTask(TestResult)

// ========== FINAL SUMMARY ==========
PrintMessage("")
PrintMessage("========================================================")
PrintMessage("TEST SUMMARY")
PrintMessage("========================================================")
PrintMessage("Total Tests: ")
PrintNumber(total_tests)
PrintMessage("Passed: ")
PrintNumber(passed_tests)
PrintMessage("Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock: {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")
PrintMessage("")

IfCondition EqualTo(failed_tests, 0) ThenBlock: {
    PrintMessage("=== ALL TESTS PASSED! ===")
} ElseBlock: {
    PrintMessage("=== SOME TESTS FAILED ===")
    PrintMessage("Check the failed tests above for details")
}

PrintMessage("")
PrintMessage("Files created in current directory for verification")
PrintMessage("Test complete!")