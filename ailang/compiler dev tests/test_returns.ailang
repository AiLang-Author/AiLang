// test_returns.ailang
// Test various return patterns

PrintMessage("Return Value Test")
PrintMessage("=================")

// Test 1: Immediate return
Function.Ret.Immediate {
    Output: Integer
    Body: {
        ReturnValue(99)
    }
}

r1 = Ret.Immediate()
PrintMessage("Immediate return (99):")
PrintNumber(r1)

// Test 2: Return after calculation
Function.Ret.Calculate {
    Input: x: Integer
    Output: Integer
    Body: {
        a = Multiply(x, 2)
        b = Add(a, 10)
        ReturnValue(b)
    }
}

r2 = Ret.Calculate(5)
PrintMessage("Calculate return (5*2+10):")
PrintNumber(r2)

// Test 3: Conditional return with early exit
Function.Ret.Early {
    Input: x: Integer
    Output: Integer
    Body: {
        is_zero = EqualTo(x, 0)
        IfCondition is_zero ThenBlock: {
            ReturnValue(999)
        }
        
        is_neg = LessThan(x, 0)
        IfCondition is_neg ThenBlock: {
            ReturnValue(111)
        }
        
        ReturnValue(x)
    }
}

r3a = Ret.Early(0)
PrintMessage("Early return for 0 (999):")
PrintNumber(r3a)

r3b = Ret.Early(-5)
PrintMessage("Early return for -5 (111):")
PrintNumber(r3b)

r3c = Ret.Early(42)
PrintMessage("Early return for 42 (42):")
PrintNumber(r3c)

// Test 4: Return from nested conditions
Function.Ret.Nested {
    Input: a: Integer
    Input: b: Integer
    Output: Integer
    Body: {
        a_big = GreaterThan(a, 50)
        IfCondition a_big ThenBlock: {
            b_big = GreaterThan(b, 50)
            IfCondition b_big ThenBlock: {
                ReturnValue(100)
            }
            ReturnValue(50)
        }
        ReturnValue(0)
    }
}

r4a = Ret.Nested(60, 60)
PrintMessage("Nested return (60,60->100):")
PrintNumber(r4a)

r4b = Ret.Nested(60, 30)
PrintMessage("Nested return (60,30->50):")
PrintNumber(r4b)

r4c = Ret.Nested(30, 30)
PrintMessage("Nested return (30,30->0):")
PrintNumber(r4c)

// Test 5: Return complex value (array pointer)
Function.Ret.ArrayPtr {
    Output: Address
    Body: {
        arr = ArrayCreate(2)
        ArraySet(arr, 0, 77)
        ArraySet(arr, 1, 88)
        ReturnValue(arr)
    }
}

arr_ptr = Ret.ArrayPtr()
PrintMessage("Array pointer returned (non-zero):")
PrintNumber(arr_ptr)

val = ArrayGet(arr_ptr, 0)
PrintMessage("First element (77):")
PrintNumber(val)

// Test 6: Function with no explicit return should return 0
Function.Ret.NoReturn {
    Output: Integer
    Body: {
        x = 10
        y = 20
        // No ReturnValue - should return 0
        ReturnValue(0)  // Adding explicit return for clarity
    }
}

r6 = Ret.NoReturn()
PrintMessage("No explicit return (should be 0):")
PrintNumber(r6)

// Test 7: Empty function body
Function.Ret.Empty {
    Output: Integer
    Body: {
        // Completely empty - needs explicit return
        ReturnValue(0)
    }
}

r7 = Ret.Empty()
PrintMessage("Empty body (should be 0):")
PrintNumber(r7)

// Test 8: Function returning 0
Function.Ret.Zero {
    Output: Integer
    Body: {
        ReturnValue(0)
    }
}

r8 = Ret.Zero()
PrintMessage("Explicit zero return:")
PrintNumber(r8)

// Test 9: Function with large number
Function.Ret.Large {
    Output: Integer
    Body: {
        big = 1000000
        ReturnValue(big)
    }
}

r9 = Ret.Large()
PrintMessage("Large number (1000000):")
PrintNumber(r9)

// Test 10: Negative number return
Function.Ret.Negative {
    Output: Integer
    Body: {
        neg = Subtract(0, 42)
        ReturnValue(neg)
    }
}

r10 = Ret.Negative()
PrintMessage("Negative return (-42):")
PrintNumber(r10)

PrintMessage("Return test complete!")