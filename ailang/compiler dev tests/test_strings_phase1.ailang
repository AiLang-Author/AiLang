// test_strings_phase1.ailang
// Test Phase 1 string operations

PrintMessage("Phase 1 String Operations Test")
PrintMessage("==============================")

// Test 1: StringFromChar
PrintMessage("[1] StringFromChar")
char_A = StringFromChar(65)  // ASCII 'A'
char_z = StringFromChar(122) // ASCII 'z'
char_0 = StringFromChar(48)  // ASCII '0'
char_space = StringFromChar(32) // Space

check_A = StringEquals(char_A, "A")
check_z = StringEquals(char_z, "z")
check_0 = StringEquals(char_0, "0")

DebugAssert(EqualTo(check_A, 1), "StringFromChar(65) = 'A'")
DebugAssert(EqualTo(check_z, 1), "StringFromChar(122) = 'z'")
DebugAssert(EqualTo(check_0, 1), "StringFromChar(48) = '0'")

PrintMessage("  StringFromChar: PASSED")

// Test 2: StringToUpper
PrintMessage("[2] StringToUpper")
upper1 = StringToUpper("hello")
upper2 = StringToUpper("Hello World!")
upper3 = StringToUpper("abc123xyz")
upper4 = StringToUpper("")
upper5 = StringToUpper("ALREADY UPPER")

check_upper1 = StringEquals(upper1, "HELLO")
check_upper2 = StringEquals(upper2, "HELLO WORLD!")
check_upper3 = StringEquals(upper3, "ABC123XYZ")
check_upper4 = StringEquals(upper4, "")
check_upper5 = StringEquals(upper5, "ALREADY UPPER")

DebugAssert(EqualTo(check_upper1, 1), "hello -> HELLO")
DebugAssert(EqualTo(check_upper2, 1), "Mixed case to upper")
DebugAssert(EqualTo(check_upper3, 1), "Letters only affected")
DebugAssert(EqualTo(check_upper4, 1), "Empty string unchanged")
DebugAssert(EqualTo(check_upper5, 1), "Already upper unchanged")

PrintMessage("  StringToUpper: PASSED")

// Test 3: StringToLower
PrintMessage("[3] StringToLower")
lower1 = StringToLower("HELLO")
lower2 = StringToLower("Hello World!")
lower3 = StringToLower("ABC123XYZ")
lower4 = StringToLower("")
lower5 = StringToLower("already lower")

check_lower1 = StringEquals(lower1, "hello")
check_lower2 = StringEquals(lower2, "hello world!")
check_lower3 = StringEquals(lower3, "abc123xyz")
check_lower4 = StringEquals(lower4, "")
check_lower5 = StringEquals(lower5, "already lower")

DebugAssert(EqualTo(check_lower1, 1), "HELLO -> hello")
DebugAssert(EqualTo(check_lower2, 1), "Mixed case to lower")
DebugAssert(EqualTo(check_lower3, 1), "Letters only affected")
DebugAssert(EqualTo(check_lower4, 1), "Empty string unchanged")
DebugAssert(EqualTo(check_lower5, 1), "Already lower unchanged")

PrintMessage("  StringToLower: PASSED")

// Test 4: StringContains
PrintMessage("[4] StringContains")
text = "The quick brown fox jumps"

contains1 = StringContains(text, "quick")
contains2 = StringContains(text, "fox")
contains3 = StringContains(text, "lazy")
contains4 = StringContains(text, "")
contains5 = StringContains("", "test")
contains6 = StringContains(text, "The")
contains7 = StringContains(text, "jumps")
contains8 = StringContains("HELLO", "LLO")

DebugAssert(EqualTo(contains1, 1), "Contains 'quick'")
DebugAssert(EqualTo(contains2, 1), "Contains 'fox'")
DebugAssert(EqualTo(contains3, 0), "Doesn't contain 'lazy'")
DebugAssert(EqualTo(contains4, 1), "Contains empty string")
DebugAssert(EqualTo(contains5, 0), "Empty doesn't contain 'test'")
DebugAssert(EqualTo(contains6, 1), "Contains at start")
DebugAssert(EqualTo(contains7, 1), "Contains at end")
DebugAssert(EqualTo(contains8, 1), "Contains substring")

PrintMessage("  StringContains: PASSED")

// Test 5: Combined operations
PrintMessage("[5] Combined Operations")

// Build a word from characters
word = StringConcat(StringFromChar(72), StringFromChar(105))  // "Hi"
word_upper = StringToUpper(word)
word_lower = StringToLower(word_upper)

check_word = StringEquals(word, "Hi")
check_word_upper = StringEquals(word_upper, "HI")
check_word_lower = StringEquals(word_lower, "hi")

DebugAssert(EqualTo(check_word, 1), "StringFromChar concat")
DebugAssert(EqualTo(check_word_upper, 1), "Upper of char-built string")
DebugAssert(EqualTo(check_word_lower, 1), "Lower of upper")

// Check if uppercase contains lowercase (shouldn't match due to case)
upper_text = StringToUpper("hello world")
contains_lower = StringContains(upper_text, "hello")
contains_upper = StringContains(upper_text, "HELLO")

DebugAssert(EqualTo(contains_lower, 0), "Upper doesn't contain lower")
DebugAssert(EqualTo(contains_upper, 1), "Upper contains upper")

PrintMessage("  Combined ops: PASSED")

PrintMessage("==============================")
PrintMessage("All Phase 1 tests PASSED!")