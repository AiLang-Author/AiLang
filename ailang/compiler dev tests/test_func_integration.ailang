// test_func_integration.ailang
// Test function integration with other AIlang features

PrintMessage("Function Integration Test")
PrintMessage("=========================")

// Test 1: Function with memory operations
Function.Mem.AllocAndInit {
    Input: size: Integer
    Input: init_val: Integer
    Output: Address
    Body: {
        ptr = Allocate(size)
        StoreValue(ptr, init_val)
        ReturnValue(ptr)
    }
}

mem_ptr = Mem.AllocAndInit(8, 42)
PrintMessage("Allocated and initialized memory")
val = Dereference(mem_ptr)
PrintMessage("Value at allocated memory (42):")
PrintNumber(val)

// Test 2: Function with bitwise operations
Function.Bit.PackBytes {
    Input: high: Integer
    Input: low: Integer
    Output: Integer
    Body: {
        shifted = LeftShift(high, 8)
        packed = BitwiseOr(shifted, low)
        ReturnValue(packed)
    }
}

packed = Bit.PackBytes(171, 205)
PrintMessage("Packed bytes 171,205 (43981):")
PrintNumber(packed)

// Test 3: Function for comparison
Function.Cmp.Between {
    Input: val: Integer
    Input: min: Integer
    Input: max: Integer
    Output: Integer
    Body: {
        above_min = GreaterEqual(val, min)
        below_max = LessEqual(val, max)
        both = BitwiseAnd(above_min, below_max)
        ReturnValue(both)
    }
}

in_range = Cmp.Between(15, 10, 20)
PrintMessage("15 between 10-20 (1):")
PrintNumber(in_range)

out_range = Cmp.Between(25, 10, 20)
PrintMessage("25 between 10-20 (0):")
PrintNumber(out_range)

// Test 4: Hash function wrapper
Function.Data.SimpleHash {
    Input: val: Integer
    Output: Integer
    Body: {
        // Simple hash: multiply by prime and xor with shift
        mul = Multiply(val, 31)
        shift = RightShift(val, 4)
        hash = BitwiseXor(mul, shift)
        ReturnValue(hash)
    }
}

hash1 = Data.SimpleHash(42)
PrintMessage("Hash of 42:")
PrintNumber(hash1)

hash2 = Data.SimpleHash(100)
PrintMessage("Hash of 100:")
PrintNumber(hash2)

// Test 5: Utility function for RESP-like protocol
Function.Proto.MakeStatus {
    Output: Address
    Body: {
        // Create "+OK\r\n"
        resp = ArrayCreate(5)
        ArraySet(resp, 0, 43)   // '+'
        ArraySet(resp, 1, 79)   // 'O'
        ArraySet(resp, 2, 75)   // 'K'
        ArraySet(resp, 3, 13)   // '\r'
        ArraySet(resp, 4, 10)   // '\n'
        ReturnValue(resp)
    }
}

status = Proto.MakeStatus()
PrintMessage("Status response created")
first = ArrayGet(status, 0)
PrintMessage("First byte of status (43):")
PrintNumber(first)

// Test 6: Math utility
Function.Math.Abs {
    Input: x: Integer
    Output: Integer
    Body: {
        is_neg = LessThan(x, 0)
        IfCondition is_neg ThenBlock: {
            neg = Subtract(0, x)
            ReturnValue(neg)
        }
        ReturnValue(x)
    }
}

abs1 = Math.Abs(-42)
PrintMessage("Abs(-42) = 42:")
PrintNumber(abs1)

abs2 = Math.Abs(17)
PrintMessage("Abs(17) = 17:")
PrintNumber(abs2)

PrintMessage("Integration test complete!")