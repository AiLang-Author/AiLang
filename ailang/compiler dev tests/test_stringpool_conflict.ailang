// test_stringpool_conflict.ailang
// Test if StringPool.Init corrupts FixedPool

PrintMessage("=== STRINGPOOL CONFLICT TEST ===")
PrintMessage("")

// Create FixedPool first
FixedPool.TestPool {
    "value1": Initialize=100
    "value2": Initialize=200
    "value3": Initialize=300
}

PrintMessage("Before StringPool.Init:")
PrintMessage("  TestPool.value1 = ")
PrintNumber(TestPool.value1)
PrintMessage("  TestPool.value2 = ")
PrintNumber(TestPool.value2)
PrintMessage("  TestPool.value3 = ")
PrintNumber(TestPool.value3)
PrintMessage("")

// Initialize StringPool (exactly as in Section 12)
PrintMessage("Calling StringPool.Init(4096)...")
pool = StringPool.Init(4096)
PrintMessage("StringPool.Init returned: ")
PrintNumber(pool)
PrintMessage("")

// Check pool values after StringPool.Init
PrintMessage("After StringPool.Init:")
PrintMessage("  TestPool.value1 = ")
PrintNumber(TestPool.value1)
PrintMessage("  TestPool.value2 = ")
PrintNumber(TestPool.value2)
PrintMessage("  TestPool.value3 = ")
PrintNumber(TestPool.value3)
PrintMessage("")

// Use StringPool operations
pooled = StringConcatPooled("ABC", "DEF")
usage = StringPool.Status()

PrintMessage("After StringPool operations:")
PrintMessage("  TestPool.value1 = ")
PrintNumber(TestPool.value1)
PrintMessage("  TestPool.value2 = ")
PrintNumber(TestPool.value2)
PrintMessage("  TestPool.value3 = ")
PrintNumber(TestPool.value3)
PrintMessage("")

// Try creating another FixedPool after StringPool
FixedPool.AnotherPool {
    "test": Initialize=777
}

PrintMessage("After creating another FixedPool:")
PrintMessage("  TestPool.value1 = ")
PrintNumber(TestPool.value1)
PrintMessage("  AnotherPool.test = ")
PrintNumber(AnotherPool.test)
PrintMessage("")

PrintMessage("=== END TEST ===")