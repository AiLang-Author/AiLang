// test_string_ops.ailang
// Isolate the exact string operation causing the crash

FixedPool.DebugState {
    "counter": Initialize=0
}

Function.TestStringOps {
    Input: None
    Body: {
        PrintMessage("=== Test 1: Direct StringEquals ===\n")
        result1 = StringEquals("PING", "PING")
        PrintMessage("Direct equals: ")
        PrintNumber(result1)
        PrintMessage("\n")
        
        PrintMessage("=== Test 2: After StringToUpper ===\n")
        upper = StringToUpper("ping")
        PrintMessage("Upper result: ")
        PrintMessage(upper)
        PrintMessage("\n")
        result2 = StringEquals(upper, "PING")
        PrintMessage("Upper equals: ")
        PrintNumber(result2)
        PrintMessage("\n")
        
        PrintMessage("=== Test 3: After Allocation ===\n")
        alloc_str = Allocate(5)
        // Manually build "PING"
        SetByte(alloc_str, 0, 80)  // 'P'
        SetByte(alloc_str, 1, 73)  // 'I'
        SetByte(alloc_str, 2, 78)  // 'N'
        SetByte(alloc_str, 3, 71)  // 'G'
        SetByte(alloc_str, 4, 0)   // null terminator
        PrintMessage("Allocated: ")
        PrintMessage(alloc_str)
        PrintMessage("\n")
        result3 = StringEquals(alloc_str, "PING")
        PrintMessage("Alloc equals: ")
        PrintNumber(result3)
        PrintMessage("\n")
        
        PrintMessage("=== Test 4: Multiple ops (Redis sequence) ===\n")
        extracted = "ping"
        PrintMessage("Extracted: ")
        PrintMessage(extracted)
        PrintMessage("\n")
        
        upper2 = StringToUpper(extracted)
        PrintMessage("Upper2: ")
        PrintMessage(upper2)
        PrintMessage("\n")
        
        // This is where Redis crashes
        result4 = StringEquals(upper2, "PING")
        PrintMessage("Final equals: ")
        PrintNumber(result4)
        PrintMessage("\n")
    }
}

TestStringOps()