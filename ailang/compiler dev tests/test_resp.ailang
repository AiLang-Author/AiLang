// test_resp.ailang
// Test harness for RESP library

LibraryImport.Library.RESP

// Test variables
response = 0
test_count = 0
pass_count = 0

// ====================
// Test Simple String
// ====================
SubRoutine.TestSimpleString {
    PrintMessage("Testing Simple String...")
    
    response = RESP.SimpleString("OK")
    PrintMessage("  Response: ")
    PrintMessage(response)
    
    // Check format: +OK\r\n
    byte0 = GetByte(response, 0)
    IfCondition EqualTo(byte0, 43) ThenBlock: {  // '+'
        PrintMessage("  ✓ Starts with +")
        pass_count = Add(pass_count, 1)
    } ElseBlock: {
        PrintMessage("  ✗ Wrong prefix")
    }
    test_count = Add(test_count, 1)
    
    Deallocate(response, 0)
}

// ====================
// Test Bulk String
// ====================
SubRoutine.TestBulkString {
    PrintMessage("Testing Bulk String...")
    
    response = RESP.BulkString("hello")
    PrintMessage("  Response: ")
    PrintMessage(response)
    
    // Check format: $5\r\nhello\r\n
    byte0 = GetByte(response, 0)
    IfCondition EqualTo(byte0, 36) ThenBlock: {  // '$'
        PrintMessage("  ✓ Starts with $")
        pass_count = Add(pass_count, 1)
    } ElseBlock: {
        PrintMessage("  ✗ Wrong prefix")
    }
    test_count = Add(test_count, 1)
    
    Deallocate(response, 0)
    
    // Test null bulk string
    PrintMessage("Testing NULL Bulk String...")
    response = RESP.BulkString(0)
    PrintMessage("  Response: ")
    PrintMessage(response)
    
    // Should be: $-1\r\n
    Deallocate(response, 0)
}

// ====================
// Test Integer
// ====================
SubRoutine.TestInteger {
    PrintMessage("Testing Integer...")
    
    response = RESP.Integer(42)
    PrintMessage("  Response: ")
    PrintMessage(response)
    
    // Check format: :42\r\n
    byte0 = GetByte(response, 0)
    IfCondition EqualTo(byte0, 58) ThenBlock: {  // ':'
        PrintMessage("  ✓ Starts with :")
        pass_count = Add(pass_count, 1)
    } ElseBlock: {
        PrintMessage("  ✗ Wrong prefix")
    }
    test_count = Add(test_count, 1)
    
    Deallocate(response, 0)
    
    // Test negative
    PrintMessage("Testing Negative Integer...")
    response = RESP.Integer(-123)
    PrintMessage("  Response: ")
    PrintMessage(response)
    Deallocate(response, 0)
}

// ====================
// Test Array
// ====================
SubRoutine.TestArray {
    PrintMessage("Testing Array...")
    
    arr = ArrayCreate(3)
    ArraySet(arr, 0, "first")
    ArraySet(arr, 1, "second")
    ArraySet(arr, 2, "third")
    
    response = RESP.Array(arr)
    PrintMessage("  Response: ")
    PrintMessage(response)
    
    // Check format: *3\r\n$5\r\nfirst\r\n...
    byte0 = GetByte(response, 0)
    IfCondition EqualTo(byte0, 42) ThenBlock: {  // '*'
        PrintMessage("  ✓ Starts with *")
        pass_count = Add(pass_count, 1)
    } ElseBlock: {
        PrintMessage("  ✗ Wrong prefix")
    }
    test_count = Add(test_count, 1)
    
    ArrayDestroy(arr)
    Deallocate(response, 0)
    
    // Test empty array
    PrintMessage("Testing Empty Array...")
    arr = ArrayCreate(0)
    response = RESP.Array(arr)
    PrintMessage("  Response: ")
    PrintMessage(response)
    ArrayDestroy(arr)
    Deallocate(response, 0)
}

// ====================
// Test Error
// ====================
SubRoutine.TestError {
    PrintMessage("Testing Error...")
    
    response = RESP.Error("unknown command")
    PrintMessage("  Response: ")
    PrintMessage(response)
    
    // Check format: -ERR unknown command\r\n
    byte0 = GetByte(response, 0)
    IfCondition EqualTo(byte0, 45) ThenBlock: {  // '-'
        PrintMessage("  ✓ Starts with -")
        pass_count = Add(pass_count, 1)
    } ElseBlock: {
        PrintMessage("  ✗ Wrong prefix")
    }
    test_count = Add(test_count, 1)
    
    Deallocate(response, 0)
}

// ====================
// Main Test Runner
// ====================
PrintMessage("=================================")
PrintMessage("RESP Library Test Suite")
PrintMessage("=================================")
PrintMessage("")

RunTask(TestSimpleString)
PrintMessage("")

RunTask(TestBulkString)
PrintMessage("")

RunTask(TestInteger)
PrintMessage("")

RunTask(TestArray)
PrintMessage("")

RunTask(TestError)
PrintMessage("")

PrintMessage("=================================")
PrintMessage("Test Results:")
PrintMessage("  Passed: ")
PrintNumber(pass_count)
PrintMessage(" / ")
PrintNumber(test_count)
PrintMessage("")

IfCondition EqualTo(pass_count, test_count) ThenBlock: {
    PrintMessage("✓ All tests passed!")
} ElseBlock: {
    PrintMessage("✗ Some tests failed")
}
PrintMessage("=================================")