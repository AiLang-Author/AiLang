// test_string_aggressive.ailang
// AGGRESSIVE test - will crash if functions don't exist
// Run this to find EXACTLY what's broken

PrintMessage("=== AGGRESSIVE STRING FUNCTION TEST ===")
PrintMessage("WARNING: This WILL crash if functions are missing!")
PrintMessage("That's the point - to find what's broken")
PrintMessage("")

// Helper
Function.ReadByte {
    Input: addr: Address
    Output: Integer
    Body: {
        raw = Dereference(addr)
        byte = BitwiseAnd(raw, 255)
        ReturnValue(byte)
    }
}

// Test each function one by one
// Comment out the one that crashes to continue testing

PrintMessage("[1] Testing StringLength...")
str = "test"
len = StringLength(str)
PrintMessage("  StringLength('test') = ")
PrintNumber(len)
PrintMessage("  ✓ StringLength works")
PrintMessage("")

PrintMessage("[2] Testing StringConcat...")
s1 = "AB"
s2 = "CD"
result = StringConcat(s1, s2)
PrintMessage("  StringConcat('AB', 'CD') = ")
PrintMessage(result)
PrintMessage("  ✓ StringConcat works")
PrintMessage("")

PrintMessage("[3] Testing StringEquals...")
eq = StringEquals("hi", "hi")
PrintMessage("  StringEquals('hi', 'hi') = ")
PrintNumber(eq)
PrintMessage("  ✓ StringEquals works")
PrintMessage("")

PrintMessage("[4] Testing NumberToString...")
nstr = NumberToString(123)
PrintMessage("  NumberToString(123) = ")
PrintMessage(nstr)
PrintMessage("  ✓ NumberToString works")
PrintMessage("")

PrintMessage("[5] Testing StringToNumber...")
snum = StringToNumber("456")
PrintMessage("  StringToNumber('456') = ")
PrintNumber(snum)
PrintMessage("  ✓ StringToNumber works")
PrintMessage("")

// CRITICAL TESTS - These likely don't exist

PrintMessage("[6] Testing StringToUpper...")
PrintMessage("  If this crashes, StringToUpper doesn't exist")
upper = StringToUpper("hello")
PrintMessage("  StringToUpper('hello') = ")
PrintMessage(upper)
PrintMessage("  ✓ StringToUpper works")
PrintMessage("")

PrintMessage("[7] Testing StringExtractUntil...")
PrintMessage("  If this crashes, StringExtractUntil doesn't exist")
// Create test buffer
buf = Allocate(32)
StoreValue(buf, 65)  // 'A'
StoreValue(Add(buf, 1), 66)  // 'B'
StoreValue(Add(buf, 2), 13)  // '\r'
StoreValue(Add(buf, 3), 10)  // '\n'
extracted = StringExtractUntil(buf, 0, "\r\n")
PrintMessage("  StringExtractUntil result: ")
PrintMessage(extracted)
PrintMessage("  ✓ StringExtractUntil works")
Deallocate(buf, 32)
PrintMessage("")

PrintMessage("[8] Testing StringExtract...")
PrintMessage("  If this crashes, StringExtract doesn't exist")
buf2 = Allocate(32)
StoreValue(buf2, 72)  // 'H'
StoreValue(Add(buf2, 1), 73)  // 'I'
extracted2 = StringExtract(buf2, 0, 2)
PrintMessage("  StringExtract result: ")
PrintMessage(extracted2)
PrintMessage("  ✓ StringExtract works")
Deallocate(buf2, 32)
PrintMessage("")

PrintMessage("[9] Testing StringCharAt...")
PrintMessage("  If this crashes, StringCharAt doesn't exist")
test_str = "WXYZ"
char = StringCharAt(test_str, 2)
PrintMessage("  StringCharAt('WXYZ', 2) = ")
PrintNumber(char)
PrintMessage("  ✓ StringCharAt works")
PrintMessage("")

PrintMessage("[10] Testing StringIndexOf...")
PrintMessage("  If this crashes, StringIndexOf doesn't exist")
idx = StringIndexOf("hello world", "world")
PrintMessage("  StringIndexOf('hello world', 'world') = ")
PrintNumber(idx)
PrintMessage("  ✓ StringIndexOf works")
PrintMessage("")

PrintMessage("[11] Testing StringSubstring...")
PrintMessage("  If this crashes, StringSubstring doesn't exist")
sub = StringSubstring("abcdef", 2, 4)
PrintMessage("  StringSubstring('abcdef', 2, 4) = ")
PrintMessage(sub)
PrintMessage("  ✓ StringSubstring works")
PrintMessage("")

PrintMessage("[12] Testing StringTrim...")
PrintMessage("  If this crashes, StringTrim doesn't exist")
trimmed = StringTrim("  spaces  ")
PrintMessage("  StringTrim('  spaces  ') = ")
PrintMessage(trimmed)
PrintMessage("  ✓ StringTrim works")
PrintMessage("")

PrintMessage("[13] Testing StringReplace...")
PrintMessage("  If this crashes, StringReplace doesn't exist")
replaced = StringReplace("hello world", "world", "AILANG")
PrintMessage("  StringReplace result: ")
PrintMessage(replaced)
PrintMessage("  ✓ StringReplace works")
PrintMessage("")

PrintMessage("[14] Testing StringSplit...")
PrintMessage("  If this crashes, StringSplit doesn't exist")
parts = StringSplit("a,b,c", ",")
PrintMessage("  StringSplit('a,b,c', ',') returned array")
PrintMessage("  ✓ StringSplit works")
PrintMessage("")

PrintMessage("=== ALL TESTS PASSED ===")
PrintMessage("If you see this, ALL string functions exist!")
PrintMessage("The Redis crash must be from something else.")