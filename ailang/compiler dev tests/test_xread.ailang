// test_xread.ailang
// Isolated test for XREAD memory corruption issue

LibraryImport.RESP
LibraryImport.XArrays

// Test data structure for stream entries
Function.CreateTestStreamEntry {
    Input: id_str:
    Input: field1:
    Input: value1:
    Body: {
        entry = XArray.XCreate(3)
        XArray.XPush(entry, id_str)
        XArray.XPush(entry, field1)
        XArray.XPush(entry, value1)
        ReturnValue(entry)
    }
}

// Test the problematic string concatenation pattern
Function.TestStringConcat {
    Body: {
        PrintMessage("=== Testing String Concatenation ===\n")
        
        // Test 1: Basic concatenation
        str1 = "Hello"
        str2 = " World"
        result = StringConcat(str1, str2, "\r\n")
        PrintMessage("Test 1 result: ")
        PrintMessage(result)
        PrintMessage("\n")
        Deallocate(result, 0)
        
        // Test 2: Multiple concatenations (mimicking the XREAD pattern)
        response = StringConcat("*", "3", "\r\n")
        PrintMessage("Initial response: ")
        PrintMessage(response)
        PrintMessage("\n")
        
        // Loop concatenation pattern from XREAD
        i = 0
        WhileLoop LessThan(i, 3) {
            part = StringConcat("$", "5", "\r\n")
            part2 = StringConcat(part, "test", "\r\n")
            Deallocate(part, 0)
            
            temp_response = StringConcat(response, part2)
            PrintMessage("Before dealloc - response addr: ")
            PrintNumber(response)
            PrintMessage(" temp_response addr: ")
            PrintNumber(temp_response)
            PrintMessage("\n")
            
            Deallocate(response, 0)  // <-- Potential issue: deallocating then reassigning
            Deallocate(part2, 0)
            response = temp_response  // <-- response now points to temp_response
            
            PrintMessage("After iteration ")
            PrintNumber(i)
            PrintMessage(": ")
            PrintMessage(response)
            PrintMessage("\n")
            
            i = Add(i, 1)
        }
        
        PrintMessage("Final response: ")
        PrintMessage(response)
        PrintMessage("\n")
        Deallocate(response, 0)
        
        PrintMessage("String concat test completed\n")
    }
}

// Test the XREAD response building pattern
Function.TestXREADResponsePattern {
    Body: {
        PrintMessage("\n=== Testing XREAD Response Pattern ===\n")
        
        // Create a mock stream with entries
        stream = XArray.XCreate(5)
        
        // Add test entries
        entry1 = CreateTestStreamEntry("1000-0", "field1", "value1")
        entry2 = CreateTestStreamEntry("2000-0", "field2", "value2")
        entry3 = CreateTestStreamEntry("3000-0", "field3", "value3")
        
        XArray.XPush(stream, entry1)
        XArray.XPush(stream, entry2)
        XArray.XPush(stream, entry3)
        
        // Create matching entries array (simulating XREAD filter)
        matching_entries = XArray.XCreate(3)
        XArray.XPush(matching_entries, entry2)  // Entry after "1000-0"
        XArray.XPush(matching_entries, entry3)
        
        num_found = XArray.XSize(matching_entries)
        PrintMessage("Found ")
        PrintNumber(num_found)
        PrintMessage(" matching entries\n")
        
        // Build response using the problematic pattern
        IfCondition GreaterThan(num_found, 0) ThenBlock: {
            first_entry = XArray.XGet(matching_entries, 0)
            num_elements = XArray.XSize(first_entry)
            
            PrintMessage("Building response for entry with ")
            PrintNumber(num_elements)
            PrintMessage(" elements\n")
            
            // Convert number to string
            num_elements_str = IntToString(num_elements)
            response = StringConcat("*", num_elements_str, "\r\n")
            Deallocate(num_elements_str, 0)
            
            PrintMessage("Initial response header: ")
            PrintMessage(response)
            PrintMessage("\n")
            
            j = 0
            WhileLoop LessThan(j, num_elements) {
                element_ptr = XArray.XGet(first_entry, j)
                
                // Build bulk string for this element
                element_len = StringLength(element_ptr)
                len_str = IntToString(element_len)
                
                part1 = StringConcat("$", len_str, "\r\n")
                part2 = StringConcat(part1, element_ptr, "\r\n")
                
                Deallocate(len_str, 0)
                Deallocate(part1, 0)
                
                // Concatenate to response
                temp_response = StringConcat(response, part2)
                
                // Clean up old response and part
                Deallocate(response, 0)
                Deallocate(part2, 0)
                
                // Update response pointer
                response = temp_response
                
                j = Add(j, 1)
            }
            
            PrintMessage("Final RESP response:\n")
            PrintMessage(response)
            PrintMessage("\n")
            
            // Clean up
            Deallocate(response, 0)
        }
        
        // Clean up test data
        XArray.XDestroy(matching_entries)
        XArray.XDestroy(stream)
        Deallocate(entry1, 0)
        Deallocate(entry2, 0)
        Deallocate(entry3, 0)
        
        PrintMessage("XREAD response pattern test completed\n")
    }
}

// Helper function for int to string conversion
Function.IntToString {
    Input: num:
    Body: {
        buffer = Allocate(32)
        
        // Handle zero
        IfCondition EqualTo(num, 0) ThenBlock: {
            SetByte(buffer, 0, 48)  // '0'
            SetByte(buffer, 1, 0)   // null terminator
            ReturnValue(buffer)
        }
        
        // Handle negative
        value = num
        offset = 0
        IfCondition LessThan(value, 0) ThenBlock: {
            SetByte(buffer, 0, 45)  // '-'
            offset = 1
            value = Subtract(0, value)
        }
        
        // Convert digits (reversed)
        temp_buffer = Allocate(32)
        digit_count = 0
        WhileLoop GreaterThan(value, 0) {
            digit = Modulo(value, 10)
            SetByte(temp_buffer, digit_count, Add(digit, 48))
            value = Divide(value, 10)
            digit_count = Add(digit_count, 1)
        }
        
        // Reverse into final buffer
        i = 0
        WhileLoop LessThan(i, digit_count) {
            SetByte(buffer, Add(offset, i), GetByte(temp_buffer, Subtract(Subtract(digit_count, 1), i)))
            i = Add(i, 1)
        }
        SetByte(buffer, Add(offset, digit_count), 0)  // null terminator
        
        Deallocate(temp_buffer, 0)
        ReturnValue(buffer)
    }
}

// Main test runner - AILANG entry point
PrintMessage("Starting XREAD Memory Corruption Tests\n")
PrintMessage("=====================================\n\n")

// Run string concatenation tests
TestStringConcat()

// Run XREAD response pattern tests  
TestXREADResponsePattern()

PrintMessage("\n=====================================\n")
PrintMessage("All tests completed\n")