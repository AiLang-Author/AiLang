// expanded_flow_control_tests.ailang
// Comprehensive tests for all flow control constructs
// Fixed with consistent colon syntax for all blocks

PrintMessage("========================================")
PrintMessage("ADVANCED FLOW CONTROL TEST SUITE v2.0")
PrintMessage("========================================")
PrintMessage("")

// Global test tracking
total_tests = 0
passed_tests = 0
failed_tests = 0
test_name = ""
expected = 0
actual = 0

// Test result helper
SubRoutine.RecordTest {
    total_tests = Add(total_tests, 1)
    PrintMessage("TEST: ")
    PrintMessage(test_name)
    PrintMessage("  Expected: ")
    PrintNumber(expected)
    PrintMessage("  Actual: ")
    PrintNumber(actual)
    
    IfCondition EqualTo(expected, actual) ThenBlock: {
        PrintMessage("  PASS")
        passed_tests = Add(passed_tests, 1)
    } ElseBlock: {
        PrintMessage("  FAIL")
        failed_tests = Add(failed_tests, 1)
    }
}

PrintMessage("========================================")
PrintMessage("SECTION 1: FORK CONSTRUCT")
PrintMessage("========================================")

// Test 1.1: Basic Fork with True condition
PrintMessage("1.1 Fork with True Condition")
fork_result1 = 0
Fork True TrueBlock: {
    fork_result1 = 100
} FalseBlock: {
    fork_result1 = 200
}
test_name = "Fork True branch"
expected = 100
actual = fork_result1
RunTask(RecordTest)

// Test 1.2: Fork with False condition
PrintMessage("")
PrintMessage("1.2 Fork with False Condition")
fork_result2 = 0
Fork False TrueBlock: {
    fork_result2 = 300
} FalseBlock: {
    fork_result2 = 400
}
test_name = "Fork False branch"
expected = 400
actual = fork_result2
RunTask(RecordTest)

// Test 1.3: Fork with expression condition
PrintMessage("")
PrintMessage("1.3 Fork with Expression")
x = 10
y = 5
fork_result3 = 0
Fork GreaterThan(x, y) TrueBlock: {
    fork_result3 = Add(x, y)
} FalseBlock: {
    fork_result3 = Subtract(x, y)
}
test_name = "Fork with GreaterThan"
expected = 15
actual = fork_result3
RunTask(RecordTest)

// Test 1.4: Nested Fork
PrintMessage("")
PrintMessage("1.4 Nested Fork")
outer_val = 1
inner_val = 2
nested_fork_result = 0
Fork EqualTo(outer_val, 1) TrueBlock: {
    Fork EqualTo(inner_val, 2) TrueBlock: {
        nested_fork_result = 999
    } FalseBlock: {
        nested_fork_result = 111
    }
} FalseBlock: {
    nested_fork_result = 222
}
test_name = "Nested Fork"
expected = 999
actual = nested_fork_result
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 2: BRANCH CONSTRUCT")
PrintMessage("========================================")

// Test 2.1: Basic Branch with matching case
PrintMessage("2.1 Branch with Matching Case")
branch_value = 2
branch_result1 = 0
Branch branch_value {
    Case 1: {
        branch_result1 = 10
    }
    Case 2: {
        branch_result1 = 20
    }
    Case 3: {
        branch_result1 = 30
    }
    Default: {
        branch_result1 = 99
    }
}
test_name = "Branch Case 2"
expected = 20
actual = branch_result1
RunTask(RecordTest)

// Test 2.2: Branch with Default case
PrintMessage("")
PrintMessage("2.2 Branch Default Case")
branch_value2 = 10
branch_result2 = 0
Branch branch_value2 {
    Case 1: {
        branch_result2 = 100
    }
    Case 2: {
        branch_result2 = 200
    }
    Default: {
        branch_result2 = 999
    }
}
test_name = "Branch Default"
expected = 999
actual = branch_result2
RunTask(RecordTest)

// Test 2.3: Branch with expression
PrintMessage("")
PrintMessage("2.3 Branch with Expression")
a = 5
b = 3
branch_result3 = 0
Branch Add(a, b) {
    Case 7: {
        branch_result3 = 70
    }
    Case 8: {
        branch_result3 = 80
    }
    Case 9: {
        branch_result3 = 90
    }
    Default: {
        branch_result3 = 0
    }
}
test_name = "Branch Expression"
expected = 80
actual = branch_result3
RunTask(RecordTest)

// remove section 3 due to duplication of function, a clean code base ia a happy code base

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 4: TRYBLOCK CONSTRUCT")
PrintMessage("========================================")

// Test 4.1: TryBlock with no error
PrintMessage("4.1 TryBlock No Error")
try_result1 = 0
error_caught1 = 0
TryBlock: {
    try_result1 = 50
    // No error occurs
} CatchError: {
    error_caught1 = 1
} FinallyBlock: {
    // Always executes
    try_result1 = Add(try_result1, 1)
}
test_name = "Try no error result"
expected = 51
actual = try_result1
RunTask(RecordTest)

test_name = "Try no error caught flag"
expected = 0
actual = error_caught1
RunTask(RecordTest)

// Test 4.2: TryBlock with error simulation
PrintMessage("")
PrintMessage("4.2 TryBlock With Error Simulation")
try_result2 = 0
error_flag = 1  // Simulate error condition
error_caught2 = 0

TryBlock: {
    try_result2 = 100
    // Simulate error by checking flag
    IfCondition error_flag ThenBlock: {
        // In real implementation, this would throw
        // For now, we'll just set a flag
        error_caught2 = 1
        try_result2 = 0  // Reset on "error"
    }
} CatchError: {
    // This would handle the error
    try_result2 = 999
    error_caught2 = 1
} FinallyBlock: {
    // Always runs
    try_result2 = Add(try_result2, 5)
}
test_name = "Try with error simulation"
expected = 5  // 0 + 5 from finally
actual = try_result2
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 5: FOREVERY CONSTRUCT")
PrintMessage("========================================")

// Test 5.1: ForEvery with array
PrintMessage("5.1 ForEvery Array Iteration")
sum = 0
count = 0
// Simulate array with individual elements (since array syntax may vary)
// ForEvery would iterate over collection
// For now test with manual simulation
array_size = 3
array_elem1 = 10
array_elem2 = 20
array_elem3 = 30

// Simulated ForEvery loop
// In real syntax: ForEvery item in [10, 20, 30] { sum = Add(sum, item) }
// Manual simulation:
sum = Add(sum, array_elem1)
count = Add(count, 1)
sum = Add(sum, array_elem2)
count = Add(count, 1)
sum = Add(sum, array_elem3)
count = Add(count, 1)

test_name = "ForEvery sum"
expected = 60
actual = sum
RunTask(RecordTest)

test_name = "ForEvery count"
expected = 3
actual = count
RunTask(RecordTest)

// Test 5.2: ForEvery with empty collection simulation
PrintMessage("")
PrintMessage("5.2 ForEvery Empty Collection")
empty_sum = 0
empty_count = 0
// ForEvery with no elements - nothing happens
test_name = "ForEvery empty sum"
expected = 0
actual = empty_sum
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 6: COMBINED FLOW CONTROL")
PrintMessage("========================================")

// Test 6.1: Fork inside Branch
PrintMessage("6.1 Fork Inside Branch")
mode = 2
condition = True
combined_result1 = 0

Branch mode {
    Case 1: {
        combined_result1 = 100
    }
    Case 2: {
        Fork condition TrueBlock: {
            combined_result1 = 250
        } FalseBlock: {
            combined_result1 = 350
        }
    }
    Default: {
        combined_result1 = 999
    }
}
test_name = "Fork in Branch"
expected = 250
actual = combined_result1
RunTask(RecordTest)

// Test 6.2: ChoosePath inside WhileLoop
PrintMessage("")
PrintMessage("6.2 Branch in WhileLoop")
loop_counter = 0
state = 1
accumulated = 0

WhileLoop LessThan(loop_counter, 3) {
    Branch state {
        Case 1: {
            accumulated = Add(accumulated, 10)
            state = 2
        }
        Case 2: {
            accumulated = Add(accumulated, 20)
            state = 3
        }
        Case 3: {
            accumulated = Add(accumulated, 30)
            state = 1
        }
        Default: {
            accumulated = Add(accumulated, 1)
        }
    }
    loop_counter = Add(loop_counter, 1)
}
test_name = "Branch in loop"
expected = 60  // 10 + 20 + 30
actual = accumulated
RunTask(RecordTest)

// Test 6.3: Nested Branch and Fork
PrintMessage("")
PrintMessage("6.3 Nested Branch and Fork")
outer_mode = 1
inner_condition = False
complex_result = 0

Branch outer_mode {
    Case 1: {
        Fork inner_condition TrueBlock: {
            complex_result = 111
        } FalseBlock: {
            Branch 2 {
                Case 1: {
                    complex_result = 222
                }
                Case 2: {
                    complex_result = 333
                }
                Default: {
                    complex_result = 444
                }
            }
        }
    }
    Default: {
        complex_result = 555
    }
}
test_name = "Complex nesting"
expected = 333
actual = complex_result
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 7: EVERYINTERVAL CONSTRUCT")
PrintMessage("========================================")

// Test 7.1: EveryInterval simulation
PrintMessage("7.1 EveryInterval Simulation")
interval_counter = 0
interval_result = 0

// Simulating: EveryInterval 100ms { interval_counter = Add(interval_counter, 1) }
// For testing, we'll just simulate 3 intervals
interval_counter = Add(interval_counter, 1)
interval_counter = Add(interval_counter, 1)
interval_counter = Add(interval_counter, 1)
interval_result = Multiply(interval_counter, 10)

test_name = "EveryInterval simulation"
expected = 30
actual = interval_result
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 8: WITHSECURITY CONSTRUCT")
PrintMessage("========================================")

// Test 8.1: WithSecurity simulation
PrintMessage("8.1 WithSecurity Simulation")
security_result = 0
security_level = 2

// Simulating: WithSecurity "restricted" { ... }
// For testing purposes, we'll just check security level
IfCondition GreaterEqual(security_level, 1) ThenBlock: {
    // Allowed operation
    security_result = 100
} ElseBlock: {
    // Denied operation
    security_result = 0
}

test_name = "WithSecurity access"
expected = 100
actual = security_result
RunTask(RecordTest)

PrintMessage("")
PrintMessage("========================================")
PrintMessage("FINAL ADVANCED TEST SUMMARY")
PrintMessage("========================================")

PrintMessage("Total Tests Run: ")
PrintNumber(total_tests)
PrintMessage("Tests Passed: ")
PrintNumber(passed_tests)
PrintMessage("Tests Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock: {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")

IfCondition EqualTo(failed_tests, 0) ThenBlock: {
    PrintMessage("")
    PrintMessage("ALL ADVANCED TESTS PASSED!")
    PrintMessage("Full flow control suite is working correctly.")
    PrintMessage("")
    PrintMessage("Successfully tested:")
    PrintMessage("- Fork construct with TrueBlock:/FalseBlock:")
    PrintMessage("- Branch construct with Case:/Default:")
    PrintMessage("- TryBlock:/CatchError:/FinallyBlock:")
    PrintMessage("- ForEvery simulation")
    PrintMessage("- EveryInterval simulation")
    PrintMessage("- WithSecurity simulation")
    PrintMessage("- Complex nested constructs")
} ElseBlock: {
    PrintMessage("")
    PrintMessage("FAILURES DETECTED IN ADVANCED TESTS")
    PrintMessage("Review failed tests above for debugging.")
}

PrintMessage("")
PrintMessage("Advanced test harness complete.")
PrintMessage("========================================")