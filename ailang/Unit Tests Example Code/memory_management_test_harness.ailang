// memory_management_test_harness.ailang
// Fixed version with complete functions and proper syntax

PrintMessage("========================================================")
PrintMessage("AILANG Memory Management & Data Structures Test Suite")
PrintMessage("========================================================")
PrintMessage("")

// Global test tracking
total_tests = 0
passed_tests = 0
failed_tests = 0
section_tests = 0
section_passed = 0
test_name = ""
test_expected = 0
test_actual = 0
section_name = ""

// Stack variables
stack_data = 0
stack_top = -1

// Helper subroutine for test results
SubRoutine.TestResult {
    total_tests = Add(total_tests, 1)
    section_tests = Add(section_tests, 1)
    
    PrintMessage("  TEST: ")
    PrintMessage(test_name)
    PrintMessage("    Expected: ")
    PrintNumber(test_expected)
    PrintMessage("    Actual: ")
    PrintNumber(test_actual)
    
    IfCondition EqualTo(test_expected, test_actual) ThenBlock: {
        PrintMessage("    PASS")
        passed_tests = Add(passed_tests, 1)
        section_passed = Add(section_passed, 1)
    } ElseBlock: {
        PrintMessage("    FAIL")
        failed_tests = Add(failed_tests, 1)
    }
    PrintMessage("")
}

// Helper for section summary
SubRoutine.SectionSummary {
    PrintMessage("Section ")
    PrintMessage(section_name)
    PrintMessage(" Results: ")
    PrintNumber(section_passed)
    PrintMessage("/")
    PrintNumber(section_tests)
    PrintMessage(" passed")
    PrintMessage("")
    
    section_tests = 0
    section_passed = 0
}

PrintMessage("========================================================")
PrintMessage("SECTION 1: BASIC MEMORY ALLOCATION")
PrintMessage("========================================================")

// Test small allocation
small_buffer = Allocate(64)
test_name = "Small buffer allocation"
test_expected = 1
test_actual = 1  // If we get here, allocation worked
IfCondition EqualTo(small_buffer, 0) ThenBlock: {
    test_actual = 0
}
RunTask(TestResult)

// Test store and dereference
StoreValue(small_buffer, 12345)
stored_value = Dereference(small_buffer)
test_name = "Store and dereference"
test_expected = 12345
test_actual = stored_value
RunTask(TestResult)

// Test offset addressing
StoreValue(Add(small_buffer, 8), 67890)
second_value = Dereference(Add(small_buffer, 8))
test_name = "Offset store and dereference"
test_expected = 67890
test_actual = second_value
RunTask(TestResult)

// Clean up
Deallocate(small_buffer, 64)

// Test medium allocation
medium_buffer = Allocate(1024)
test_name = "Medium buffer allocation"
test_expected = 1
test_actual = 1
IfCondition EqualTo(medium_buffer, 0) ThenBlock: {
    test_actual = 0
}
RunTask(TestResult)

// Pattern test
i = 0
WhileLoop LessThan(i, 10) {
    address = Add(medium_buffer, Multiply(i, 8))
    value = Multiply(i, 100)
    StoreValue(address, value)
    i = Add(i, 1)
}

test_address = Add(medium_buffer, 40)  // 5th element (5 * 8)
test_value = Dereference(test_address)
test_name = "Pattern write/read"
test_expected = 500
test_actual = test_value
RunTask(TestResult)

Deallocate(medium_buffer, 1024)

section_name = "1 (Basic Memory)"
RunTask(SectionSummary)

PrintMessage("========================================================")
PrintMessage("SECTION 2: ARRAYS")
PrintMessage("========================================================")

// Create array
small_array = ArrayCreate(10)
test_name = "Array creation"
test_expected = 1
test_actual = 1
IfCondition EqualTo(small_array, 0) ThenBlock: {
    test_actual = 0
}
RunTask(TestResult)

// Test array operations
ArraySet(small_array, 0, 100)
ArraySet(small_array, 5, 500)
ArraySet(small_array, 9, 900)

first_value = ArrayGet(small_array, 0)
test_name = "Array get first"
test_expected = 100
test_actual = first_value
RunTask(TestResult)

middle_value = ArrayGet(small_array, 5)
test_name = "Array get middle"
test_expected = 500
test_actual = middle_value
RunTask(TestResult)

last_value = ArrayGet(small_array, 9)
test_name = "Array get last"
test_expected = 900
test_actual = last_value
RunTask(TestResult)

ArrayDestroy(small_array)

section_name = "2 (Arrays)"
RunTask(SectionSummary)

PrintMessage("========================================================")
PrintMessage("SECTION 3: ARRAY PROCESSING")
PrintMessage("========================================================")

// Create and fill array with squares
numbers = ArrayCreate(20)
k = 0
WhileLoop LessThan(k, 10) {
    square = Multiply(k, k)
    ArraySet(numbers, k, square)
    k = Add(k, 1)
}

// Calculate sum of first 5 squares: 0 + 1 + 4 + 9 + 16 = 30
sum = 0
m = 0
WhileLoop LessThan(m, 5) {
    value = ArrayGet(numbers, m)
    sum = Add(sum, value)
    m = Add(m, 1)
}

test_name = "Sum of squares"
test_expected = 30
test_actual = sum
RunTask(TestResult)

// Find maximum
max_value = 0
n = 0
WhileLoop LessThan(n, 10) {
    current = ArrayGet(numbers, n)
    IfCondition GreaterThan(current, max_value) ThenBlock: {
        max_value = current
    }
    n = Add(n, 1)
}

test_name = "Array maximum"
test_expected = 81  // 9^2
test_actual = max_value
RunTask(TestResult)

ArrayDestroy(numbers)

section_name = "3 (Array Processing)"
RunTask(SectionSummary)

PrintMessage("========================================================")
PrintMessage("SECTION 4: MEMORY POOLS")
PrintMessage("========================================================")

// Fixed Pool test
FixedPool.TestPool {
    "counter": Initialize=0
    "max_value": Initialize=1000
    "state": Initialize=42
}

test_name = "Pool initial value"
test_expected = 1000
test_actual = TestPool.max_value
RunTask(TestResult)

TestPool.counter = 25
test_name = "Pool modification"
test_expected = 25
test_actual = TestPool.counter
RunTask(TestResult)

new_state = Add(TestPool.state, TestPool.counter)
test_name = "Pool computation"
test_expected = 67  // 42 + 25
test_actual = new_state
RunTask(TestResult)

section_name = "4 (Memory Pools)"
RunTask(SectionSummary)

PrintMessage("========================================================")
PrintMessage("SECTION 5: STACK IMPLEMENTATION")
PrintMessage("========================================================")

// Initialize stack
stack_data = ArrayCreate(20)
stack_top = -1

// Stack push simulation
SubRoutine.StackPush {
    // Expects: push_value as global
    IfCondition GreaterEqual(stack_top, 19) ThenBlock: {
        stack_result = 0  // Overflow
    } ElseBlock: {
        stack_top = Add(stack_top, 1)
        ArraySet(stack_data, stack_top, push_value)
        stack_result = 1  // Success
    }
}

// Stack pop simulation
SubRoutine.StackPop {
    IfCondition LessThan(stack_top, 0) ThenBlock: {
        pop_value = -1  // Underflow
    } ElseBlock: {
        pop_value = ArrayGet(stack_data, stack_top)
        stack_top = Subtract(stack_top, 1)
    }
}

// Test stack operations
push_value = 42
RunTask(StackPush)
test_name = "Stack push"
test_expected = 1
test_actual = stack_result
RunTask(TestResult)

push_value = 17
RunTask(StackPush)

push_value = 99
RunTask(StackPush)

// Pop and verify LIFO order
RunTask(StackPop)
test_name = "Stack pop LIFO"
test_expected = 99
test_actual = pop_value
RunTask(TestResult)

RunTask(StackPop)
test_name = "Stack pop second"
test_expected = 17
test_actual = pop_value
RunTask(TestResult)

ArrayDestroy(stack_data)

section_name = "5 (Stack)"
RunTask(SectionSummary)

// FINAL SUMMARY
PrintMessage("========================================================")
PrintMessage("FINAL TEST SUMMARY")
PrintMessage("========================================================")

PrintMessage("Total Tests: ")
PrintNumber(total_tests)
PrintMessage("Passed: ")
PrintNumber(passed_tests)
PrintMessage("Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock: {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")

IfCondition EqualTo(failed_tests, 0) ThenBlock: {
    PrintMessage("")
    PrintMessage("=== ALL MEMORY TESTS PASSED! ===")
} ElseBlock: {
    PrintMessage("")
    PrintMessage("=== SOME TESTS FAILED ===")
}

PrintMessage("")
PrintMessage("Memory Management Test Complete")