// test_library_comprehensive.ailang
// Comprehensive library mechanism test

PrintMessage("=== COMPREHENSIVE LIBRARY TEST ===")
PrintMessage("")

// Test 1: Define local pool and function
FixedPool.LocalPool {
    "test_value": Initialize=123,
    "scale": Initialize=1000
}

Function.LocalFunc {
    Input: x:
    Body: {
        ReturnValue(Multiply(x, LocalPool.scale))
    }
}

// Test local access
local_val = LocalPool.test_value
PrintMessage("Local pool access: ")
PrintNumber(local_val)
PrintMessage("Expected: 123")

local_result = LocalFunc(5)
PrintMessage("Local function result: ")
PrintNumber(local_result)
PrintMessage("Expected: 5000")

// Test 2: Try library import
PrintMessage("")
PrintMessage("Importing library...")
LibraryImport.FixedPointTrig {
    // Should load the library
}

// Test 3: Try different access patterns for library content
PrintMessage("")
PrintMessage("Testing library access patterns:")

// Pattern A: Direct function call (might work)
//result_a = Trig.Sin(0)
//PrintMessage("Trig.Sin(0): ")
//PrintNumber(result_a)

// Pattern B: Fully qualified
//result_b = FixedPointTrig.Trig.Sin(0)
//PrintMessage("FixedPointTrig.Trig.Sin(0): ")
//PrintNumber(result_b)

// Pattern C: Try pool access directly
//scale_val = FixedPointTrig.scale
//PrintMessage("FixedPointTrig.scale: ")
//PrintNumber(scale_val)

// Test 4: Define a function that mimics library function structure
Function.Trig.TestSin {
    Input: degrees:
    Body: {
        // Just return 0 for 0 degrees, 5000 for 30 degrees
        IfCondition EqualTo(degrees, 0) ThenBlock: {
            ReturnValue(0)
        }
        IfCondition EqualTo(degrees, 30) ThenBlock: {
            ReturnValue(5000)
        }
        ReturnValue(-1)
    }
}

test_sin_0 = Trig.TestSin(0)
PrintMessage("Local Trig.TestSin(0): ")
PrintNumber(test_sin_0)
PrintMessage("Expected: 0")

test_sin_30 = Trig.TestSin(30)
PrintMessage("Local Trig.TestSin(30): ")
PrintNumber(test_sin_30)
PrintMessage("Expected: 5000")

// Test 5: Nested function namespaces
Function.Math.Calc.Add {
    Input: a:
    Input: b:
    Body: {
        ReturnValue(Add(a, b))
    }
}

nested_result = Math.Calc.Add(10, 20)
PrintMessage("Math.Calc.Add(10, 20): ")
PrintNumber(nested_result)
PrintMessage("Expected: 30")

// Test 6: Check if library pools persist
PrintMessage("")
PrintMessage("Testing if library pools created:")

// Try to create our own version with same name
FixedPool.FixedPointTrig {
    "our_scale": Initialize=9999
}

our_scale = FixedPointTrig.our_scale
PrintMessage("Our FixedPointTrig.our_scale: ")
PrintNumber(our_scale)
PrintMessage("Expected: 9999")

PrintMessage("")
PrintMessage("=== END COMPREHENSIVE TEST ===")
PrintMessage("")
PrintMessage("Summary:")
PrintMessage("- Local pools and functions work")
PrintMessage("- Library code executes on import")
PrintMessage("- But library symbols not accessible")
PrintMessage("- Need namespace resolution fix")