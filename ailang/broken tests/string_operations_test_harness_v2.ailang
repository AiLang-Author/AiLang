// string_operations_test_harness_v2.ailang
// Upgraded comprehensive test suite for string operations
// Fixed syntax - uses ONLY implemented functions

// Test tracking globals
total_tests = 0
passed_tests = 0
failed_tests = 0
section_tests = 0
section_passed = 0

// Test state globals
test_name = ""
test_expected_num = 0
test_actual_num = 0
test_expected_str = ""
test_actual_str = ""
section_name = ""

// Helper globals for complex tests
text = ""
i = 0
result = 0
char_code = 0
length = 0

// Test result handlers
SubRoutine.TestNumberResult {
    total_tests = Add(total_tests, 1)
    section_tests = Add(section_tests, 1)
    
    PrintMessage("  TEST: ")
    PrintMessage(test_name)
    PrintMessage("\n    Expected: ")
    PrintNumber(test_expected_num)
    PrintMessage("\n    Actual: ")
    PrintNumber(test_actual_num)
    PrintMessage("\n    ")
    
    IfCondition EqualTo(test_expected_num, test_actual_num) ThenBlock: {
        PrintMessage("PASS\n\n")
        passed_tests = Add(passed_tests, 1)
        section_passed = Add(section_passed, 1)
    } ElseBlock: {
        PrintMessage("FAIL\n\n")
        failed_tests = Add(failed_tests, 1)
    }
}

SubRoutine.TestStringResult {
    total_tests = Add(total_tests, 1)
    section_tests = Add(section_tests, 1)
    
    PrintMessage("  TEST: ")
    PrintMessage(test_name)
    PrintMessage("\n    Expected: '")
    PrintMessage(test_expected_str)
    PrintMessage("'\n    Actual: '")
    PrintMessage(test_actual_str)
    PrintMessage("'\n    ")
    
    IfCondition StringEquals(test_expected_str, test_actual_str) ThenBlock: {
        PrintMessage("PASS\n\n")
        passed_tests = Add(passed_tests, 1)
        section_passed = Add(section_passed, 1)
    } ElseBlock: {
        PrintMessage("FAIL\n\n")
        failed_tests = Add(failed_tests, 1)
    }
}

SubRoutine.SectionSummary {
    PrintMessage("Section ")
    PrintMessage(section_name)
    PrintMessage(" Results: ")
    PrintNumber(section_passed)
    PrintMessage("/")
    PrintNumber(section_tests)
    PrintMessage(" passed\n\n")
    section_tests = 0
    section_passed = 0
}

// === MAIN TEST SUITE ===

PrintMessage("=======================================================\n")
PrintMessage("AILANG String Operations - UPGRADED Test Suite v2.0\n")
PrintMessage("Now with bug fixes and extended coverage\n")
PrintMessage("=======================================================\n\n")

// =======================================================
// SECTION 1: STRING LITERALS & BASIC OPERATIONS
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 1: STRING LITERALS & BASIC OPERATIONS\n")
PrintMessage("=======================================================\n")

test_name = "Basic string literal"
test_expected_str = "Hello"
test_actual_str = "Hello"
RunTask(TestStringResult)

test_name = "Empty string"
test_expected_str = ""
test_actual_str = ""
RunTask(TestStringResult)

test_name = "Numeric string"
test_expected_str = "12345"
test_actual_str = "12345"
RunTask(TestStringResult)

test_name = "Mixed characters"
test_expected_str = "ABC123!@#"
test_actual_str = "ABC123!@#"
RunTask(TestStringResult)

test_name = "String with spaces"
test_expected_str = "Hello World"
test_actual_str = "Hello World"
RunTask(TestStringResult)

section_name = "1 (Literals)"
RunTask(SectionSummary)

// =======================================================
// SECTION 2: STRING LENGTH
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 2: STRING LENGTH\n")
PrintMessage("=======================================================\n")

test_name = "Length of 'Hello'"
test_expected_num = 5
test_actual_num = StringLength("Hello")
RunTask(TestNumberResult)

test_name = "Length of empty string"
test_expected_num = 0
test_actual_num = StringLength("")
RunTask(TestNumberResult)

test_name = "Length of single char"
test_expected_num = 1
test_actual_num = StringLength("A")
RunTask(TestNumberResult)

test_name = "Length of long string"
test_expected_num = 46
test_actual_num = StringLength("The quick brown fox jumps over the lazy dog!!!")
RunTask(TestNumberResult)

test_name = "Length with spaces"
test_expected_num = 11
test_actual_num = StringLength("Hello World")
RunTask(TestNumberResult)

section_name = "2 (Length)"
RunTask(SectionSummary)

// =======================================================
// SECTION 3: STRING CONCATENATION
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 3: STRING CONCATENATION\n")
PrintMessage("=======================================================\n")

test_name = "Simple concat"
test_expected_str = "HelloWorld"
test_actual_str = StringConcat("Hello", "World")
RunTask(TestStringResult)

test_name = "Concat with space"
test_expected_str = "Hello World"
test_actual_str = StringConcat("Hello ", "World")
RunTask(TestStringResult)

test_name = "Concat empty + string"
test_expected_str = "Test"
test_actual_str = StringConcat("", "Test")
RunTask(TestStringResult)

test_name = "Concat string + empty"
test_expected_str = "Test"
test_actual_str = StringConcat("Test", "")
RunTask(TestStringResult)

test_name = "Concat empty + empty"
test_expected_str = ""
test_actual_str = StringConcat("", "")
RunTask(TestStringResult)

test_name = "Multiple concat"
test_expected_str = "ABC"
temp1 = StringConcat("A", "B")
test_actual_str = StringConcat(temp1, "C")
RunTask(TestStringResult)

section_name = "3 (Concat)"
RunTask(SectionSummary)

// =======================================================
// SECTION 4: STRING EQUALITY
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 4: STRING EQUALITY\n")
PrintMessage("=======================================================\n")

test_name = "Equal strings"
test_expected_num = 1
test_actual_num = StringEquals("Hello", "Hello")
RunTask(TestNumberResult)

test_name = "Different strings"
test_expected_num = 0
test_actual_num = StringEquals("Hello", "World")
RunTask(TestNumberResult)

test_name = "Empty equals empty"
test_expected_num = 1
test_actual_num = StringEquals("", "")
RunTask(TestNumberResult)

test_name = "Empty vs non-empty"
test_expected_num = 0
test_actual_num = StringEquals("", "Test")
RunTask(TestNumberResult)

test_name = "Case sensitive check"
test_expected_num = 0
test_actual_num = StringEquals("Hello", "hello")
RunTask(TestNumberResult)

section_name = "4 (Equals)"
RunTask(SectionSummary)

// =======================================================
// SECTION 5: NUMBER CONVERSIONS
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 5: NUMBER CONVERSIONS\n")
PrintMessage("=======================================================\n")

test_name = "Number 0 to string"
test_expected_str = "0"
test_actual_str = NumberToString(0)
RunTask(TestStringResult)

test_name = "Number 42 to string"
test_expected_str = "42"
test_actual_str = NumberToString(42)
RunTask(TestStringResult)

test_name = "Negative number to string"
test_expected_str = "-123"
test_actual_str = NumberToString(-123)
RunTask(TestStringResult)

test_name = "String '0' to number"
test_expected_num = 0
test_actual_num = StringToNumber("0")
RunTask(TestNumberResult)

test_name = "String '42' to number"
test_expected_num = 42
test_actual_num = StringToNumber("42")
RunTask(TestNumberResult)

test_name = "String '-100' to number"
test_expected_num = -100
test_actual_num = StringToNumber("-100")
RunTask(TestNumberResult)

section_name = "5 (Conversions)"
RunTask(SectionSummary)

// =======================================================
// SECTION 6: CHARACTER ACCESS
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 6: CHARACTER ACCESS (StringCharAt)\n")
PrintMessage("=======================================================\n")

test_string = "Hello"

test_name = "First char 'H' (72)"
test_expected_num = 72
test_actual_num = StringCharAt(test_string, 0)
RunTask(TestNumberResult)

test_name = "Second char 'e' (101)"
test_expected_num = 101
test_actual_num = StringCharAt(test_string, 1)
RunTask(TestNumberResult)

test_name = "Third char 'l' (108)"
test_expected_num = 108
test_actual_num = StringCharAt(test_string, 2)
RunTask(TestNumberResult)

test_name = "Last char 'o' (111)"
test_expected_num = 111
test_actual_num = StringCharAt(test_string, 4)
RunTask(TestNumberResult)

test_name = "Space character (32)"
test_expected_num = 32
test_actual_num = StringCharAt("Hello World", 5)
RunTask(TestNumberResult)

section_name = "6 (CharAt)"
RunTask(SectionSummary)

// =======================================================
// SECTION 7: BYTE-LEVEL BUFFER OPERATIONS (BUG FIX TEST)
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 7: BYTE-LEVEL BUFFER OPERATIONS\n")
PrintMessage("Previously FAILED - Should now PASS with bug fixes\n")
PrintMessage("=======================================================\n")

// Allocate buffer for manual byte manipulation
buffer = Allocate(100)

// Store individual bytes for "TEST"
StoreValue(buffer, 84)         // 'T' = 84
StoreValue(Add(buffer, 1), 69) // 'E' = 69
StoreValue(Add(buffer, 2), 83) // 'S' = 83
StoreValue(Add(buffer, 3), 84) // 'T' = 84
StoreValue(Add(buffer, 4), 0)  // Null terminator

// Read back individual bytes
byte1 = Dereference(buffer, "byte")
byte2 = Dereference(Add(buffer, 1), "byte")
byte3 = Dereference(Add(buffer, 2), "byte")
byte4 = Dereference(Add(buffer, 3), "byte")

test_name = "Buffer byte 1: 'T' (84)"
test_expected_num = 84
test_actual_num = byte1
RunTask(TestNumberResult)

test_name = "Buffer byte 2: 'E' (69)"
test_expected_num = 69
test_actual_num = byte2
RunTask(TestNumberResult)

test_name = "Buffer byte 3: 'S' (83)"
test_expected_num = 83
test_actual_num = byte3
RunTask(TestNumberResult)

test_name = "Buffer byte 4: 'T' (84)"
test_expected_num = 84
test_actual_num = byte4
RunTask(TestNumberResult)

// Test with different positions
test_name = "Read byte at offset 2"
test_expected_num = 83
test_actual_num = Dereference(Add(buffer, 2), "byte")
RunTask(TestNumberResult)

test_name = "Read null terminator"
test_expected_num = 0
test_actual_num = Dereference(Add(buffer, 4), "byte")
RunTask(TestNumberResult)

Deallocate(buffer, 100)

section_name = "7 (Buffer/Byte Ops)"
RunTask(SectionSummary)

// =======================================================
// SECTION 8: MANUAL BYTE COPY TEST
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 8: MANUAL BYTE COPY TEST\n")
PrintMessage("=======================================================\n")

// Manual byte-by-byte copy to validate byte operations
src_buf = Allocate(50)
dest_buf = Allocate(50)

// Write "COPY" to source
StoreValue(src_buf, 67)         // 'C'
StoreValue(Add(src_buf, 1), 79) // 'O'
StoreValue(Add(src_buf, 2), 80) // 'P'
StoreValue(Add(src_buf, 3), 89) // 'Y'
StoreValue(Add(src_buf, 4), 0)

// Manual copy byte by byte
byte_val = Dereference(src_buf, "byte")
StoreValue(dest_buf, byte_val)

byte_val = Dereference(Add(src_buf, 1), "byte")
StoreValue(Add(dest_buf, 1), byte_val)

byte_val = Dereference(Add(src_buf, 2), "byte")
StoreValue(Add(dest_buf, 2), byte_val)

byte_val = Dereference(Add(src_buf, 3), "byte")
StoreValue(Add(dest_buf, 3), byte_val)

byte_val = Dereference(Add(src_buf, 4), "byte")
StoreValue(Add(dest_buf, 4), byte_val)

test_name = "Copied byte 0 'C'"
test_expected_num = 67
test_actual_num = Dereference(dest_buf, "byte")
RunTask(TestNumberResult)

test_name = "Copied byte 1 'O'"
test_expected_num = 79
test_actual_num = Dereference(Add(dest_buf, 1), "byte")
RunTask(TestNumberResult)

test_name = "Copied byte 2 'P'"
test_expected_num = 80
test_actual_num = Dereference(Add(dest_buf, 2), "byte")
RunTask(TestNumberResult)

test_name = "Copied byte 3 'Y'"
test_expected_num = 89
test_actual_num = Dereference(Add(dest_buf, 3), "byte")
RunTask(TestNumberResult)

Deallocate(src_buf, 50)
Deallocate(dest_buf, 50)

section_name = "8 (Manual Copy)"
RunTask(SectionSummary)

// =======================================================
// SECTION 9: COMPLEX STRING OPERATIONS
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 9: COMPLEX STRING OPERATIONS\n")
PrintMessage("=======================================================\n")

// Count spaces in a string
SubRoutine.CountSpaces {
    // Uses globals: text, sets result
    i = 0
    length = StringLength(text)
    result = 0
    
    WhileLoop LessThan(i, length) {
        char_code = StringCharAt(text, i)
        IfCondition EqualTo(char_code, 32) ThenBlock: {  // 32 = space
            result = Add(result, 1)
        }
        i = Add(i, 1)
    }
}

text = "Hello World Test"
RunTask(CountSpaces)
test_name = "Count spaces in 'Hello World Test'"
test_expected_num = 2
test_actual_num = result
RunTask(TestNumberResult)

// Check if string contains only digits
SubRoutine.IsAllDigits {
    // Uses globals: text, sets result
    i = 0
    length = StringLength(text)
    result = 1
    
    IfCondition EqualTo(length, 0) ThenBlock: {
        result = 0
    }
    
    WhileLoop And(LessThan(i, length), EqualTo(result, 1)) {
        char_code = StringCharAt(text, i)
        // '0' = 48, '9' = 57
        IfCondition Or(LessThan(char_code, 48), GreaterThan(char_code, 57)) ThenBlock: {
            result = 0
        }
        i = Add(i, 1)
    }
}

text = "12345"
RunTask(IsAllDigits)
test_name = "IsAllDigits('12345')"
test_expected_num = 1
test_actual_num = result
RunTask(TestNumberResult)

text = "12a45"
RunTask(IsAllDigits)
test_name = "IsAllDigits('12a45')"
test_expected_num = 0
test_actual_num = result
RunTask(TestNumberResult)

text = ""
RunTask(IsAllDigits)
test_name = "IsAllDigits('')"
test_expected_num = 0
test_actual_num = result
RunTask(TestNumberResult)

// Count vowels
SubRoutine.CountVowels {
    // Uses globals: text, sets result
    i = 0
    length = StringLength(text)
    result = 0
    
    WhileLoop LessThan(i, length) {
        char_code = StringCharAt(text, i)
        // Check for a, e, i, o, u (lowercase)
        is_vowel = 0
        IfCondition EqualTo(char_code, 97) ThenBlock: { is_vowel = 1 }  // 'a'
        IfCondition EqualTo(char_code, 101) ThenBlock: { is_vowel = 1 } // 'e'
        IfCondition EqualTo(char_code, 105) ThenBlock: { is_vowel = 1 } // 'i'
        IfCondition EqualTo(char_code, 111) ThenBlock: { is_vowel = 1 } // 'o'
        IfCondition EqualTo(char_code, 117) ThenBlock: { is_vowel = 1 } // 'u'
        
        IfCondition EqualTo(is_vowel, 1) ThenBlock: {
            result = Add(result, 1)
        }
        i = Add(i, 1)
    }
}

text = "hello world"
RunTask(CountVowels)
test_name = "Count vowels in 'hello world'"
test_expected_num = 3
test_actual_num = result
RunTask(TestNumberResult)

section_name = "9 (Complex)"
RunTask(SectionSummary)

// =======================================================
// SECTION 10: STRESS TESTS
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("SECTION 10: STRESS TESTS\n")
PrintMessage("=======================================================\n")

// Long string concatenation
long_str = "A"
i = 0
WhileLoop LessThan(i, 5) {
    long_str = StringConcat(long_str, "B")
    i = Add(i, 1)
}

test_name = "Long concat length"
test_expected_num = 6
test_actual_num = StringLength(long_str)
RunTask(TestNumberResult)

test_name = "Long concat content"
test_expected_str = "ABBBBB"
test_actual_str = long_str
RunTask(TestStringResult)

// Multiple allocations
i = 0
alloc_test_pass = 1
WhileLoop LessThan(i, 10) {
    temp_buf = Allocate(100)
    IfCondition EqualTo(temp_buf, 0) ThenBlock: {
        alloc_test_pass = 0
    }
    Deallocate(temp_buf, 100)
    i = Add(i, 1)
}

test_name = "Multiple alloc/dealloc cycles"
test_expected_num = 1
test_actual_num = alloc_test_pass
RunTask(TestNumberResult)

section_name = "10 (Stress)"
RunTask(SectionSummary)

// =======================================================
// FINAL SUMMARY
// =======================================================
PrintMessage("=======================================================\n")
PrintMessage("FINAL TEST SUMMARY\n")
PrintMessage("=======================================================\n")

PrintMessage("Total Tests: ")
PrintNumber(total_tests)
PrintMessage("\nPassed: ")
PrintNumber(passed_tests)
PrintMessage("\nFailed: ")
PrintNumber(failed_tests)
PrintMessage("\n")

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock: {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%\n\n")

PrintMessage("SECTIONS COVERED:\n")
PrintMessage("1. String Literals & Basic Operations\n")
PrintMessage("2. String Length\n")
PrintMessage("3. String Concatenation\n")
PrintMessage("4. String Equality\n")
PrintMessage("5. Number Conversions\n")
PrintMessage("6. Character Access (StringCharAt)\n")
PrintMessage("7. Byte-Level Buffer Operations (BUG FIX VALIDATION)\n")
PrintMessage("8. Manual Byte Copy Test\n")
PrintMessage("9. Complex String Operations\n")
PrintMessage("10. Stress Tests\n\n")

IfCondition EqualTo(failed_tests, 0) ThenBlock: {
    PrintMessage("=== ALL TESTS PASSED! ===\n")
} ElseBlock: {
    PrintMessage("=== SOME TESTS FAILED ===\n")
    PrintMessage("Review failures above for details\n")
}

PrintMessage("\nTest Complete - Ready for production!\n")