// test_redis_buffer.ailang
// Test specifically for Redis RESP buffer handling

PrintMessage("=== REDIS BUFFER HANDLING TEST ===")
PrintMessage("")

// Simulate exactly what Redis server does
PrintMessage("[1] Simulating SocketRead Buffer")

// Create buffer like Redis does
request_buffer = Allocate(4096)

// Clear buffer (important!)
i = 0
WhileLoop LessThan(i, 100) {
    
        StoreValue(Add(request_buffer, i), 0)
        i = Add(i, 1)
    }
PrintMessage("  Buffer allocated and cleared")

// Simulate what a Redis client sends: "*1\r\n$4\r\nPING\r\n"
PrintMessage("")
PrintMessage("[2] Simulating Client Data")
PrintMessage("  Client sends: *1\\r\\n$4\\r\\nPING\\r\\n")

// Store the RESP array
StoreValue(request_buffer, 42)        // '*'
StoreValue(Add(request_buffer, 1), 49) // '1'
StoreValue(Add(request_buffer, 2), 13) // '\r'
StoreValue(Add(request_buffer, 3), 10) // '\n'
StoreValue(Add(request_buffer, 4), 36) // '$'
StoreValue(Add(request_buffer, 5), 52) // '4'
StoreValue(Add(request_buffer, 6), 13) // '\r'
StoreValue(Add(request_buffer, 7), 10) // '\n'
StoreValue(Add(request_buffer, 8), 80) // 'P'
StoreValue(Add(request_buffer, 9), 73) // 'I'
StoreValue(Add(request_buffer, 10), 78) // 'N'
StoreValue(Add(request_buffer, 11), 71) // 'G'
StoreValue(Add(request_buffer, 12), 13) // '\r'
StoreValue(Add(request_buffer, 13), 10) // '\n'
StoreValue(Add(request_buffer, 14), 0)  // null terminator

bytes_read = 14  // Simulate SocketRead return value

PrintMessage("")
PrintMessage("[3] Buffer Contents Check")
PrintMessage("  First 20 bytes:")
j = 0
WhileLoop LessThan(j, 20) {
    
        byte = Dereference(Add(request_buffer, j))
        PrintMessage("    [")
        PrintNumber(j)
        PrintMessage("] = ")
        PrintNumber(byte)
    
        // Decode
        IfCondition EqualTo(byte, 42) ThenBlock: {
            PrintMessage(" ('*' ARRAY)")
        }
        IfCondition EqualTo(byte, 36) ThenBlock: {
            PrintMessage(" ('$' BULK)")
        }
        IfCondition EqualTo(byte, 49) ThenBlock: {
            PrintMessage(" ('1')")
        }
        IfCondition EqualTo(byte, 52) ThenBlock: {
            PrintMessage(" ('4')")
        }
        IfCondition EqualTo(byte, 80) ThenBlock: {
            PrintMessage(" ('P')")
        }
        IfCondition EqualTo(byte, 73) ThenBlock: {
            PrintMessage(" ('I')")
        }
        IfCondition EqualTo(byte, 78) ThenBlock: {
            PrintMessage(" ('N')")
        }
        IfCondition EqualTo(byte, 71) ThenBlock: {
            PrintMessage(" ('G')")
        }
        IfCondition EqualTo(byte, 13) ThenBlock: {
            PrintMessage(" ('\\r')")
        }
        IfCondition EqualTo(byte, 10) ThenBlock: {
            PrintMessage(" ('\\n')")
        }
        IfCondition EqualTo(byte, 0) ThenBlock: {
            PrintMessage(" (NULL)")
            j = 100  // Stop loop
        }
    
        j = Add(j, 1)
    }
    }

PrintMessage("")
PrintMessage("[4] RESP Parse Check")

// Check first byte like RESP.ParseCommand does
first_byte = Dereference(request_buffer)
PrintMessage("  First byte value: ")
PrintNumber(first_byte)
PrintMessage("  Expected: 42 (for '*')")

IfCondition EqualTo(first_byte, 42) ThenBlock: {
    PrintMessage("  ✓ PASS - Valid RESP array marker")
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Not a valid RESP array!")
    PrintMessage("    This would trigger the error you're seeing")
}

// Check if we can parse the count
PrintMessage("")
PrintMessage("[5] Parse Array Count")

// The count is at offset 1 (should be '1')
count_byte = Dereference(Add(request_buffer, 1))
PrintMessage("  Count character: ")
PrintNumber(count_byte)
PrintMessage("  Expected: 49 (for '1')")

IfCondition EqualTo(count_byte, 49) ThenBlock: {
    PrintMessage("  ✓ PASS - Valid count")
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Invalid count character")
}

// Test extraction simulation
PrintMessage("")
PrintMessage("[6] String Extraction Test")

// Try to extract "PING" from offset 8-11
ping_test = ArrayCreate(4)
ArraySet(ping_test, 0, Dereference(Add(request_buffer, 8)))
ArraySet(ping_test, 1, Dereference(Add(request_buffer, 9)))
ArraySet(ping_test, 2, Dereference(Add(request_buffer, 10)))
ArraySet(ping_test, 3, Dereference(Add(request_buffer, 11)))

p1 = ArrayGet(ping_test, 0)
p2 = ArrayGet(ping_test, 1)
p3 = ArrayGet(ping_test, 2)
p4 = ArrayGet(ping_test, 3)

PrintMessage("  Extracted bytes: ")
PrintNumber(p1)
PrintMessage(", ")
PrintNumber(p2)
PrintMessage(", ")
PrintNumber(p3)
PrintMessage(", ")
PrintNumber(p4)

IfCondition And(EqualTo(p1, 80), And(EqualTo(p2, 73), And(EqualTo(p3, 78), EqualTo(p4, 71)))) ThenBlock: {
    PrintMessage("  ✓ PASS - Spells 'PING'")
} ElseBlock: {
    PrintMessage("  ✗ FAIL - Does not spell 'PING'")
}

// Clean up
Deallocate(request_buffer, 4096)

PrintMessage("")
PrintMessage("=== END REDIS BUFFER TEST ===")
PrintMessage("")
PrintMessage("If this test passes but Redis still fails,")
PrintMessage("the issue is likely in SocketRead itself.")