// test_pool_function_context.ailang
// Test pool updates inside functions - this is where the crash happens

PrintMessage("=== Pool Update in Function Context Test ===")
PrintMessage("")

// Create a test pool like Redis.ServerState
FixedPool.GlobalState {
    "total_commands": Initialize=0
}

GlobalState.total_commands = 0

// Function that updates the pool (like Redis.DispatchCommand)
Function.UpdateCounter {
    Input: dummy: Integer
    Body: {
        PrintMessage("  In function - current counter: ")
        PrintNumber(GlobalState.total_commands)
        
        PrintMessage("  Updating...")
        old_val = GlobalState.total_commands
        new_val = Add(old_val, 1)
        
        PrintMessage("    Old: ")
        PrintNumber(old_val)
        PrintMessage(" New: ")
        PrintNumber(new_val)
        
        // This assignment might be where it crashes
        GlobalState.total_commands = new_val
        
        PrintMessage("  Updated to: ")
        PrintNumber(GlobalState.total_commands)
    }
}

// Test 1: Call function with literal
PrintMessage("[Test 1] Function call with literal")
UpdateCounter(1)
PrintMessage("  After call, counter: ")
PrintNumber(GlobalState.total_commands)
PrintMessage("")

// Test 2: Call function after StringExtract
PrintMessage("[Test 2] Function call after StringExtract")
buffer = "*1\r\n$4\r\nPING\r\n"
extracted = StringExtract(buffer, 8, 4)
PrintMessage("  Extracted: '")
PrintMessage(extracted)
PrintMessage("'")

PrintMessage("  Calling function...")
UpdateCounter(2)  // This is where it should crash based on previous test
PrintMessage("  After call, counter: ")
PrintNumber(GlobalState.total_commands)
PrintMessage("")

// Test 3: Function that takes extracted string
Function.ProcessCommand {
    Input: cmd: Text
    Body: {
        PrintMessage("  Processing: '")
        PrintMessage(cmd)
        PrintMessage("'")
        
        // Update counter
        PrintMessage("  Updating counter in ProcessCommand...")
        GlobalState.total_commands = Add(GlobalState.total_commands, 1)
        
        PrintMessage("  Counter now: ")
        PrintNumber(GlobalState.total_commands)
    }
}

PrintMessage("[Test 3] Pass extracted string to function")
extracted2 = StringExtract(buffer, 8, 4)
ProcessCommand(extracted2)
PrintMessage("")

// Test 4: Nested function calls with pool updates
Function.Outer {
    Input: x: Integer
    Body: {
        PrintMessage("    Outer function")
        Inner(x)
    }
}

Function.Inner {
    Input: y: Integer  
    Body: {
        PrintMessage("      Inner function")
        PrintMessage("      Updating counter...")
        GlobalState.total_commands = Add(GlobalState.total_commands, 1)
        PrintMessage("      Done")
    }
}

PrintMessage("[Test 4] Nested functions with pool update")
Outer(1)
PrintMessage("  Counter: ")
PrintNumber(GlobalState.total_commands)
PrintMessage("")

// Test 5: The exact Redis pattern
Function.ExactRedisPattern {
    Input: command_parts: Array
    Body: {
        PrintMessage("  >>> REDIS PATTERN <<<")
        
        // Get command
        raw = ArrayGet(command_parts, 0)
        PrintMessage("    Raw: '")
        PrintMessage(raw)
        PrintMessage("'")
        
        // Convert to upper
        upper = StringToUpper(raw)
        PrintMessage("    Upper: '")
        PrintMessage(upper)
        PrintMessage("'")
        
        // Print like Redis does
        PrintMessage("  Command: ")
        PrintMessage(upper)
        PrintMessage("  Args: 0")
        
        // UPDATE STATS - This is the exact crash point
        PrintMessage("    About to update stats...")
        old_count = GlobalState.total_commands
        PrintMessage("      Old: ")
        PrintNumber(old_count)
        
        GlobalState.total_commands = Add(GlobalState.total_commands, 1)
        
        new_count = GlobalState.total_commands
        PrintMessage("      New: ")
        PrintNumber(new_count)
        
        // String comparison (where Redis crashes)
        PrintMessage("    Comparing...")
        is_ping = StringEquals(upper, "PING")
        PrintMessage("      Is PING? ")
        PrintNumber(is_ping)
    }
}

PrintMessage("[Test 5] Exact Redis pattern")

// First call (works)
arr1 = ArrayCreate(1)
ArraySet(arr1, 0, "PING")
PrintMessage("  First call with literal...")
ExactRedisPattern(arr1)

// Second call with extracted (crashes)
extracted3 = StringExtract(buffer, 8, 4)
arr2 = ArrayCreate(1)
ArraySet(arr2, 0, extracted3)
PrintMessage("  Second call with extracted...")
ExactRedisPattern(arr2)  // Should crash here

PrintMessage("")
PrintMessage("=== TEST COMPLETE ===")
PrintMessage("If we get here, the bug is very specific to Redis context!")