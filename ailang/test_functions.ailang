// test_functions_basic.ailang
// Basic function tests - start simple and build up

PrintMessage("Basic Function Tests")
PrintMessage("====================")

// Test 1: Simplest function - no params, constant return
Function.Test.GetFortyTwo {
    Body: {
        ReturnValue(42)
    }
}

result1 = Test.GetFortyTwo()
PrintMessage("Test 1 - GetFortyTwo():")
PrintNumber(result1)

// Test 2: Function with one parameter
Function.Math.Double {
    Input: x:
    Body: {
        result = Multiply(x, 2)
        ReturnValue(result)
    }
}

result2 = Math.Double(21)
PrintMessage("Test 2 - Double(21):")
PrintNumber(result2)

// Test 3: Function with two parameters
Function.Math.Add {
    Input: a:
    Input: b:
    Body: {
        sum = Add(a, b)
        ReturnValue(sum)
    }
}

result3 = Math.Add(15, 27)
PrintMessage("Test 3 - Add(15, 27):")
PrintNumber(result3)

// Test 4: Function calling another function
Function.Math.Quadruple {
    Input: x:
    Body: {
        doubled = Math.Double(x)
        quadrupled = Math.Double(doubled)
        ReturnValue(quadrupled)
    }
}

result4 = Math.Quadruple(10)
PrintMessage("Test 4 - Quadruple(10):")
PrintNumber(result4)

// Test 5: Function with conditional
Function.Logic.IsPositive {
    Input: num:
    Body: {
        is_pos = GreaterThan(num, 0)
        IfCondition is_pos ThenBlock {
            ReturnValue(1)
        }
        ReturnValue(0)
    }
}

result5a = Logic.IsPositive(10)
PrintMessage("Test 5a - IsPositive(10):")
PrintNumber(result5a)

result5b = Logic.IsPositive(-5)
PrintMessage("Test 5b - IsPositive(-5):")
PrintNumber(result5b)

// Test 6: Function with array operations
Function.Utils.MakeSimpleArray {
    Body: {
        arr = ArrayCreate(3)
        ArraySet(arr, 0, 100)
        ArraySet(arr, 1, 200)
        ArraySet(arr, 2, 300)
        ReturnValue(arr)
    }
}

arr = Utils.MakeSimpleArray()
PrintMessage("Test 6 - Array function:")
val = ArrayGet(arr, 1)
PrintMessage("Array[1] (should be 200):")
PrintNumber(val)

PrintMessage("Basic tests complete!")