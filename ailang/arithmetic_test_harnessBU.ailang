// arithmetic_test_harness.ailang
// Fixed version with proper syntax

PrintMessage("================================================")
PrintMessage("AILANG Arithmetic & Math Operations Test Suite")
PrintMessage("================================================")
PrintMessage("")

// Global test tracking - declare before functions
total_tests = 0
passed_tests = 0
failed_tests = 0
section_tests = 0
section_passed = 0
test_name = ""
expected = 0
actual = 0
section_name = ""

// Helper subroutine for test results
SubRoutine.TestResult {
    // Uses globals: test_name, expected, actual
    total_tests = Add(total_tests, 1)
    section_tests = Add(section_tests, 1)
    
    PrintMessage("  TEST: ")
    PrintMessage(test_name)
    PrintMessage("    Expected: ")
    PrintNumber(expected)
    PrintMessage("    Actual: ")
    PrintNumber(actual)
    
    IfCondition EqualTo(expected, actual) ThenBlock {
        PrintMessage("    PASS")
        passed_tests = Add(passed_tests, 1)
        section_passed = Add(section_passed, 1)
    } ElseBlock {
        PrintMessage("    FAIL")
        failed_tests = Add(failed_tests, 1)
    }
    PrintMessage("")
}

// Section summary helper
SubRoutine.SectionSummary {
    // Uses global: section_name
    PrintMessage("Section ")
    PrintMessage(section_name)
    PrintMessage(" Results: ")
    PrintNumber(section_passed)
    PrintMessage("/")
    PrintNumber(section_tests)
    PrintMessage(" passed")
    PrintMessage("")
    
    section_tests = 0
    section_passed = 0
}

PrintMessage("================================================")
PrintMessage("SECTION 1: BASIC ARITHMETIC - FUNCTION SYNTAX")
PrintMessage("================================================")

// Addition tests
test_name = "Add(10, 5)"
expected = 15
actual = Add(10, 5)
RunTask(TestResult)

test_name = "Add(-10, 5)"
expected = -5
actual = Add(-10, 5)
RunTask(TestResult)

test_name = "Add(0, 0)"
expected = 0
actual = Add(0, 0)
RunTask(TestResult)

// Subtraction tests
test_name = "Subtract(20, 8)"
expected = 12
actual = Subtract(20, 8)
RunTask(TestResult)

test_name = "Subtract(5, 10)"
expected = -5
actual = Subtract(5, 10)
RunTask(TestResult)

// Multiplication tests
test_name = "Multiply(7, 6)"
expected = 42
actual = Multiply(7, 6)
RunTask(TestResult)

test_name = "Multiply(-3, 4)"
expected = -12
actual = Multiply(-3, 4)
RunTask(TestResult)

test_name = "Multiply(0, 999)"
expected = 0
actual = Multiply(0, 999)
RunTask(TestResult)

// Division tests
test_name = "Divide(20, 4)"
expected = 5
actual = Divide(20, 4)
RunTask(TestResult)

test_name = "Divide(20, 3)"
expected = 6
actual = Divide(20, 3)
RunTask(TestResult)

test_name = "Divide(0, 5)"
expected = 0
actual = Divide(0, 5)
RunTask(TestResult)

// Modulo tests
test_name = "Modulo(17, 5)"
expected = 2
actual = Modulo(17, 5)
RunTask(TestResult)

test_name = "Modulo(20, 4)"
expected = 0
actual = Modulo(20, 4)
RunTask(TestResult)

// Power tests
test_name = "Power(2, 3)"
expected = 8
actual = Power(2, 3)
RunTask(TestResult)

test_name = "Power(5, 2)"
expected = 25
actual = Power(5, 2)
RunTask(TestResult)

test_name = "Power(10, 0)"
expected = 1
actual = Power(10, 0)
RunTask(TestResult)

section_name = "1 (Functions)"
RunTask(SectionSummary)

PrintMessage("================================================")
PrintMessage("SECTION 2: COMPARISON OPERATIONS")
PrintMessage("================================================")

// Function syntax comparisons
test_name = "LessThan(3, 5)"
expected = 1
actual = LessThan(3, 5)
RunTask(TestResult)

test_name = "LessThan(5, 3)"
expected = 0
actual = LessThan(5, 3)
RunTask(TestResult)

test_name = "LessEqual(5, 5)"
expected = 1
actual = LessEqual(5, 5)
RunTask(TestResult)

test_name = "GreaterThan(7, 3)"
expected = 1
actual = GreaterThan(7, 3)
RunTask(TestResult)

test_name = "GreaterEqual(5, 5)"
expected = 1
actual = GreaterEqual(5, 5)
RunTask(TestResult)

test_name = "EqualTo(42, 42)"
expected = 1
actual = EqualTo(42, 42)
RunTask(TestResult)

test_name = "NotEqual(10, 20)"
expected = 1
actual = NotEqual(10, 20)
RunTask(TestResult)

section_name = "2 (Comparisons)"
RunTask(SectionSummary)

PrintMessage("================================================")
PrintMessage("SECTION 3: LOGICAL OPERATIONS")
PrintMessage("================================================")

// Function syntax logical operations
test_name = "And(1, 1)"
expected = 1
actual = And(1, 1)
RunTask(TestResult)

test_name = "And(1, 0)"
expected = 0
actual = And(1, 0)
RunTask(TestResult)

test_name = "Or(1, 0)"
expected = 1
actual = Or(1, 0)
RunTask(TestResult)

test_name = "Or(0, 0)"
expected = 0
actual = Or(0, 0)
RunTask(TestResult)

test_name = "Not(1)"
expected = 0
actual = Not(1)
RunTask(TestResult)

test_name = "Not(0)"
expected = 1
actual = Not(0)
RunTask(TestResult)

section_name = "3 (Logical)"
RunTask(SectionSummary)

PrintMessage("================================================")
PrintMessage("SECTION 4: BITWISE OPERATIONS")
PrintMessage("================================================")

// Bitwise operations
test_name = "BitwiseAnd(12, 10)"
expected = 8  // 1100 & 1010 = 1000
actual = BitwiseAnd(12, 10)
RunTask(TestResult)

test_name = "BitwiseOr(8, 4)"
expected = 12  // 1000 | 0100 = 1100
actual = BitwiseOr(8, 4)
RunTask(TestResult)

test_name = "BitwiseXor(12, 10)"
expected = 6  // 1100 ^ 1010 = 0110
actual = BitwiseXor(12, 10)
RunTask(TestResult)

test_name = "BitwiseNot(0)"
expected = -1  // ~0 = -1
actual = BitwiseNot(0)
RunTask(TestResult)

// Shift operations
test_name = "LeftShift(5, 2)"
expected = 20  // 101 << 2 = 10100
actual = LeftShift(5, 2)
RunTask(TestResult)

test_name = "RightShift(20, 2)"
expected = 5  // 10100 >> 2 = 101
actual = RightShift(20, 2)
RunTask(TestResult)

test_name = "LeftShift(1, 8)"
expected = 256  // 2^8
actual = LeftShift(1, 8)
RunTask(TestResult)

section_name = "4 (Bitwise)"
RunTask(SectionSummary)

PrintMessage("================================================")
PrintMessage("SECTION 5: MIXED EXPRESSIONS")
PrintMessage("================================================")

// Variables for testing
a = 15
b = 3
test_name = "Add with variables"
expected = 18
actual = Add(a, b)
RunTask(TestResult)

val1 = 10
val2 = 5
val3 = 2
test_name = "Complex expression"
expected = 15
actual = Add(Divide(val1, val3), Multiply(val2, val3))
RunTask(TestResult)

section_name = "5 (Mixed)"
RunTask(SectionSummary)

PrintMessage("================================================")
PrintMessage("SECTION 6: ALGORITHMS")
PrintMessage("================================================")

// GCD using Euclidean algorithm
gcd_a = 48
gcd_b = 18
WhileLoop NotEqual(gcd_b, 0) {
    temp = gcd_b
    gcd_b = Modulo(gcd_a, gcd_b)
    gcd_a = temp
}
test_name = "GCD(48, 18)"
expected = 6
actual = gcd_a
RunTask(TestResult)

// Factorial calculation (5!)
fact_n = 5
factorial = 1
fact_i = 1
WhileLoop LessEqual(fact_i, fact_n) {
    factorial = Multiply(factorial, fact_i)
    fact_i = Add(fact_i, 1)
}
test_name = "5! factorial"
expected = 120
actual = factorial
RunTask(TestResult)

section_name = "6 (Algorithms)"
RunTask(SectionSummary)

PrintMessage("================================================")
PrintMessage("SECTION 7: EDGE CASES")
PrintMessage("================================================")

// Zero operations
test_name = "Zero * Large"
expected = 0
actual = Multiply(0, 999999)
RunTask(TestResult)

test_name = "Zero / Nonzero"
expected = 0
actual = Divide(0, 42)
RunTask(TestResult)

// Identity operations
test_name = "N * 1"
expected = 42
actual = Multiply(42, 1)
RunTask(TestResult)

test_name = "N + 0"
expected = 42
actual = Add(42, 0)
RunTask(TestResult)

// Modulo edge cases
test_name = "N % N"
expected = 0
actual = Modulo(17, 17)
RunTask(TestResult)

// Double negation using function
neg_val = -42
test_name = "Negate(-42)"
expected = 42
actual = Negate(neg_val)
RunTask(TestResult)

section_name = "7 (Edge Cases)"
RunTask(SectionSummary)

PrintMessage("================================================")
PrintMessage("SECTION 8: ADVANCED MATH (INTEGER APPROXIMATIONS)")
PrintMessage("================================================")

// Approximating square roots (using integer math)
test_name = "SquareRoot(16)"
expected = 4
actual = SquareRoot(16)
RunTask(TestResult)

test_name = "SquareRoot(25)"
expected = 5
actual = SquareRoot(25)
RunTask(TestResult)

test_name = "SquareRoot(2)"  // Approximation: 1.414 * 10 (sqrt(200)) / 10
expected = 1
actual = SquareRoot(2)
RunTask(TestResult)

// Factorial via loop, again but checking a different number
fact_n = 7
factorial = 1
fact_i = 1
WhileLoop LessEqual(fact_i, fact_n) {
    factorial = Multiply(factorial, fact_i)
    fact_i = Add(fact_i, 1)
}
test_name = "7! factorial"
expected = 5040
actual = factorial
RunTask(TestResult)

// Power of negative numbers
test_name = "Power(-2, 3)"
expected = -8
actual = Power(-2, 3)
RunTask(TestResult)

// Check order of operations (with function syntax)
test_name = "(2 + 3) * 4"
expected = 20
actual = Multiply(Add(2, 3), 4)
RunTask(TestResult)

// Integer division precision (demonstrates limitations)
test_name = "1 / 3 (integer division)"
expected = 0
actual = Divide(1, 3)
RunTask(TestResult)

// Approximating Pi * 100
test_name = "PI * 100 (as integer)"
expected = 314
actual = Multiply(3.14, 100)
RunTask(TestResult)

// Modulo with larger numbers
test_name = "1000 Modulo 7"
expected = 6
actual = Modulo(1000, 7)
RunTask(TestResult)

// Combining bitwise and arithmetic
test_name = "(5 << 2) + (10 | 3)"
expected = 33  // (5 << 2) = 20, (10 | 3) = 11
actual = Add(LeftShift(5, 2), BitwiseOr(10, 3))
RunTask(TestResult)

section_name = "8 (Advanced Math)"
RunTask(SectionSummary)

// FINAL SUMMARY
PrintMessage("================================================")
PrintMessage("FINAL TEST SUMMARY")
PrintMessage("================================================")

PrintMessage("Total Tests: ")
PrintNumber(total_tests)
PrintMessage("Passed: ")
PrintNumber(passed_tests)
PrintMessage("Failed: ")
PrintMessage(" Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")

IfCondition EqualTo(failed_tests, 0) ThenBlock {
    PrintMessage("")
    PrintMessage("=== ALL ARITHMETIC TESTS PASSED! ===")
} ElseBlock {
    PrintMessage("")
    PrintMessage("=== SOME TESTS FAILED ===")
}

PrintMessage("")
PrintMessage("Arithmetic Test Complete")