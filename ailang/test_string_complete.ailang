// test_string_complete.ailang
// Comprehensive test for string operations including StringEquals and ReadInput

PrintMessage("Complete String Operations Test")
PrintMessage("================================")

// Test 1: StringEquals with identical strings
str1 = "Hello"
str2 = "Hello"
equal_result = StringEquals(str1, str2)
PrintMessage("Test 1 - StringEquals('Hello', 'Hello'):")
PrintNumber(equal_result)
DebugAssert(EqualTo(equal_result, 1), "Identical strings should be equal")

// Test 2: StringEquals with different strings
str3 = "World"
not_equal_result = StringEquals(str1, str3)
PrintMessage("Test 2 - StringEquals('Hello', 'World'):")
PrintNumber(not_equal_result)
DebugAssert(EqualTo(not_equal_result, 0), "Different strings should not be equal")

// Test 3: StringEquals with empty strings
empty1 = ""
empty2 = ""
empty_equal = StringEquals(empty1, empty2)
PrintMessage("Test 3 - StringEquals('', ''):")
PrintNumber(empty_equal)
DebugAssert(EqualTo(empty_equal, 1), "Empty strings should be equal")

// Test 4: StringEquals with one empty string
empty_not_equal = StringEquals(str1, empty1)
PrintMessage("Test 4 - StringEquals('Hello', ''):")
PrintNumber(empty_not_equal)
DebugAssert(EqualTo(empty_not_equal, 0), "Empty vs non-empty should not be equal")

// Test 5: StringEquals with similar but different length strings
str4 = "Hell"
str5 = "Hello"
length_diff = StringEquals(str4, str5)
PrintMessage("Test 5 - StringEquals('Hell', 'Hello'):")
PrintNumber(length_diff)
DebugAssert(EqualTo(length_diff, 0), "Different length strings should not be equal")

// Test 6: StringConcat and StringEquals combination
part1 = "Hel"
part2 = "lo"
combined = StringConcat(part1, part2)
concat_equal = StringEquals(combined, str1)
PrintMessage("Test 6 - StringEquals(StringConcat('Hel', 'lo'), 'Hello'):")
PrintNumber(concat_equal)
DebugAssert(EqualTo(concat_equal, 1), "Concatenated string should equal 'Hello'")

// Test 7: StringLength on various strings
len1 = StringLength("AILANG")
PrintMessage("Test 7a - StringLength('AILANG'):")
PrintNumber(len1)
DebugAssert(EqualTo(len1, 6), "Length of 'AILANG' should be 6")

len2 = StringLength("")
PrintMessage("Test 7b - StringLength(''):")
PrintNumber(len2)
DebugAssert(EqualTo(len2, 0), "Length of empty string should be 0")

// Test 8: NumberToString and StringEquals
num = 42
str_num = NumberToString(num)
str_42 = "42"
num_string_equal = StringEquals(str_num, str_42)
PrintMessage("Test 8 - StringEquals(NumberToString(42), '42'):")
PrintNumber(num_string_equal)
DebugAssert(EqualTo(num_string_equal, 1), "NumberToString(42) should equal '42'")

// Test 9: StringToNumber conversion
str_123 = "123"
num_123 = StringToNumber(str_123)
PrintMessage("Test 9a - StringToNumber('123'):")
PrintNumber(num_123)
DebugAssert(EqualTo(num_123, 123), "StringToNumber('123') should be 123")

str_neg = "-456"
num_neg = StringToNumber(str_neg)
PrintMessage("Test 9b - StringToNumber('-456'):")
PrintNumber(num_neg)
// Note: Negative number display may appear as large positive due to unsigned interpretation
// but the value should be correctly negative in memory

// Test 10: Complex string operation chain
base = "Test"
suffix = "ing"
full = StringConcat(base, suffix)
full_len = StringLength(full)
PrintMessage("Test 10 - StringLength(StringConcat('Test', 'ing')):")
PrintNumber(full_len)
DebugAssert(EqualTo(full_len, 7), "Length of 'Testing' should be 7")

// Test 11: StringCompare (different from StringEquals - returns comparison result)
cmp1 = StringCompare("abc", "abc")
PrintMessage("Test 11a - StringCompare('abc', 'abc'):")
PrintNumber(cmp1)
DebugAssert(EqualTo(cmp1, 0), "Identical strings should compare to 0")

cmp2 = StringCompare("abc", "xyz")
PrintMessage("Test 11b - StringCompare('abc', 'xyz'):")
PrintNumber(cmp2)
DebugAssert(NotEqual(cmp2, 0), "Different strings should not compare to 0")

// Test 12: Case sensitivity check
upper = "HELLO"
lower = "hello"
case_test = StringEquals(upper, lower)
PrintMessage("Test 12 - StringEquals('HELLO', 'hello'):")
PrintNumber(case_test)
DebugAssert(EqualTo(case_test, 0), "StringEquals should be case-sensitive")

// Interactive ReadInput test (commented out for automated testing)
// Uncomment these lines to test ReadInput interactively:

PrintMessage("")
PrintMessage("=== Interactive ReadInput Test ===")
PrintMessage("Enter your name: ")
name = ReadInput()
greeting = StringConcat("Hello, ", name)
greeting2 = StringConcat(greeting, "!")
PrintMessage(greeting2)

PrintMessage("Enter 'yes' to continue: ")
response = ReadInput()
is_yes = StringEquals(response, "yes")
IfCondition is_yes ThenBlock {
    PrintMessage("You entered yes!")
} ElseBlock {
    PrintMessage("You did not enter yes.")
}


PrintMessage("")
PrintMessage("================================")
PrintMessage("All string operation tests completed successfully!")