// test_fixedpoint_trig.ailang
// Comprehensive test for fixed-point trigonometry library

// Import the library (assuming it's in Libraries/FixedPointTrig/)
LibraryImport.FixedPointTrig {
    // Library will be loaded
}

PrintMessage("===========================================")
PrintMessage("Fixed-Point Trigonometry Test Suite")
PrintMessage("===========================================")
PrintMessage("")

// === TEST 1: Basic Sin/Cos/Tan ===
PrintMessage("[TEST 1] Basic Trigonometric Functions")
PrintMessage("---------------------------------------")

// Test key angles
PrintMessage("Testing sin() at key angles:")

sin0 = Trig.Sin(0)
PrintMessage("  sin(0°) = ")
PrintNumber(sin0)
PrintMessage("  Expected: 0")

sin30 = Trig.Sin(30)
PrintMessage("  sin(30°) = ")
PrintNumber(sin30)
PrintMessage("  Expected: 5000 (0.5)")

sin45 = Trig.Sin(45)
PrintMessage("  sin(45°) = ")
PrintNumber(sin45)
PrintMessage("  Expected: 7071 (0.7071)")

sin60 = Trig.Sin(60)
PrintMessage("  sin(60°) = ")
PrintNumber(sin60)
PrintMessage("  Expected: 8660 (0.866)")

sin90 = Trig.Sin(90)
PrintMessage("  sin(90°) = ")
PrintNumber(sin90)
PrintMessage("  Expected: 10000 (1.0)")

PrintMessage("")
PrintMessage("Testing cos() at key angles:")

cos0 = Trig.Cos(0)
PrintMessage("  cos(0°) = ")
PrintNumber(cos0)
PrintMessage("  Expected: 10000 (1.0)")

cos30 = Trig.Cos(30)
PrintMessage("  cos(30°) = ")
PrintNumber(cos30)
PrintMessage("  Expected: 8660 (0.866)")

cos45 = Trig.Cos(45)
PrintMessage("  cos(45°) = ")
PrintNumber(cos45)
PrintMessage("  Expected: 7071 (0.7071)")

cos60 = Trig.Cos(60)
PrintMessage("  cos(60°) = ")
PrintNumber(cos60)
PrintMessage("  Expected: 5000 (0.5)")

cos90 = Trig.Cos(90)
PrintMessage("  cos(90°) = ")
PrintNumber(cos90)
PrintMessage("  Expected: 0")

PrintMessage("")
PrintMessage("Testing tan() at key angles:")

tan0 = Trig.Tan(0)
PrintMessage("  tan(0°) = ")
PrintNumber(tan0)
PrintMessage("  Expected: 0")

tan45 = Trig.Tan(45)
PrintMessage("  tan(45°) = ")
PrintNumber(tan45)
PrintMessage("  Expected: 10000 (1.0)")

// === TEST 2: Negative Angles and Quadrants ===
PrintMessage("")
PrintMessage("[TEST 2] Negative Angles and Quadrants")
PrintMessage("---------------------------------------")

sin_neg30 = Trig.Sin(-30)
PrintMessage("  sin(-30°) = ")
PrintNumber(sin_neg30)
PrintMessage("  Expected: -5000 (-0.5)")

sin120 = Trig.Sin(120)
PrintMessage("  sin(120°) = ")
PrintNumber(sin120)
PrintMessage("  Expected: 8660 (0.866)")

sin210 = Trig.Sin(210)
PrintMessage("  sin(210°) = ")
PrintNumber(sin210)
PrintMessage("  Expected: -5000 (-0.5)")

sin330 = Trig.Sin(330)
PrintMessage("  sin(330°) = ")
PrintNumber(sin330)
PrintMessage("  Expected: -5000 (-0.5)")

// === TEST 3: Fixed-Point Arithmetic ===
PrintMessage("")
PrintMessage("[TEST 3] Fixed-Point Arithmetic")
PrintMessage("--------------------------------")

// Convert integers to fixed-point
three_fp = FixedPoint.FromInt(3)
four_fp = FixedPoint.FromInt(4)
five_fp = FixedPoint.FromInt(5)

PrintMessage("Converting integers to fixed-point:")
PrintMessage("  3 -> ")
PrintNumber(three_fp)
PrintMessage("  (should be 30000)")

// Test multiplication
product = FixedPoint.Multiply(three_fp, four_fp)
PrintMessage("Fixed-point 3 * 4 = ")
PrintNumber(product)
PrintMessage("  (should be 120000 = 12.0)")

product_int = FixedPoint.ToInt(product)
PrintMessage("Converted back to int: ")
PrintNumber(product_int)
PrintMessage("  (should be 12)")

// Test division
quotient = FixedPoint.Divide(five_fp, four_fp)
PrintMessage("Fixed-point 5 / 4 = ")
PrintNumber(quotient)
PrintMessage("  (should be 12500 = 1.25)")

// === TEST 4: Pythagorean Identity ===
PrintMessage("")
PrintMessage("[TEST 4] Pythagorean Identity: sin²+cos²=1")
PrintMessage("-------------------------------------------")

// Test at 30 degrees
sin30_sq = FixedPoint.Multiply(sin30, sin30)
cos30_sq = FixedPoint.Multiply(cos30, cos30)
sum30 = Add(sin30_sq, cos30_sq)

PrintMessage("At 30°:")
PrintMessage("  sin²(30°) = ")
PrintNumber(sin30_sq)
PrintMessage("  cos²(30°) = ")
PrintNumber(cos30_sq)
PrintMessage("  sin²+cos² = ")
PrintNumber(sum30)
PrintMessage("  Expected: 100000000 (1.0 squared)")

// Divide by scale to get back to normal fixed-point
identity30 = Divide(sum30, FixedPointTrig.scale)
PrintMessage("  Normalized: ")
PrintNumber(identity30)
PrintMessage("  Expected: 10000 (1.0)")

// === TEST 5: Distance Calculation ===
PrintMessage("")
PrintMessage("[TEST 5] 2D Distance Calculation")
PrintMessage("---------------------------------")

// Calculate distance from (0,0) to (3,4) - should be 5
x1 = 0
y1 = 0
x2 = FixedPoint.FromInt(3)  // 30000
y2 = FixedPoint.FromInt(4)  // 40000

dist = Math.Distance2D(x1, y1, x2, y2)
PrintMessage("Distance from (0,0) to (3,4):")
PrintMessage("  Fixed-point result: ")
PrintNumber(dist)

dist_int = FixedPoint.ToInt(dist)
PrintMessage("  As integer: ")
PrintNumber(dist_int)
PrintMessage("  Expected: 5")

// === TEST 6: Angle Calculations ===
PrintMessage("")
PrintMessage("[TEST 6] Inverse Trig Functions")
PrintMessage("--------------------------------")

// Test atan
atan_val = Trig.Atan(10000)  // atan(1.0)
PrintMessage("atan(1.0) = ")
PrintNumber(atan_val)
PrintMessage("  Expected: 45°")

// Test atan2 for different quadrants
angle1 = Trig.Atan2(10000, 10000)  // Quadrant 1: (1,1)
PrintMessage("atan2(1, 1) = ")
PrintNumber(angle1)
PrintMessage("  Expected: 45°")

angle2 = Trig.Atan2(10000, -10000)  // Quadrant 2: (1,-1)
PrintMessage("atan2(1, -1) = ")
PrintNumber(angle2)
PrintMessage("  Expected: 135°")

angle3 = Trig.Atan2(-10000, -10000)  // Quadrant 3: (-1,-1)
PrintMessage("atan2(-1, -1) = ")
PrintNumber(angle3)
PrintMessage("  Expected: 225°")

angle4 = Trig.Atan2(-10000, 10000)  // Quadrant 4: (-1,1)
PrintMessage("atan2(-1, 1) = ")
PrintNumber(angle4)
PrintMessage("  Expected: 315°")

// === TEST 7: Practical Application - Rotating a Point ===
PrintMessage("")
PrintMessage("[TEST 7] Practical: Rotate Point")
PrintMessage("---------------------------------")

// Rotate point (1,0) by 90 degrees
// New position should be (0,1)

px = FixedPoint.FromInt(1)  // 10000
py = 0

angle = 90
cos_angle = Trig.Cos(angle)
sin_angle = Trig.Sin(angle)

// Rotation matrix:
// x' = x*cos - y*sin
// y' = x*sin + y*cos

new_x = Subtract(
    FixedPoint.Multiply(px, cos_angle),
    FixedPoint.Multiply(py, sin_angle)
)

new_y = Add(
    FixedPoint.Multiply(px, sin_angle),
    FixedPoint.Multiply(py, cos_angle)
)

PrintMessage("Rotating (1,0) by 90°:")
PrintMessage("  New X: ")
PrintNumber(new_x)
PrintMessage("  Expected: 0")
PrintMessage("  New Y: ")
PrintNumber(new_y)
PrintMessage("  Expected: 10000 (1.0)")

// === TEST 8: Square Root Test ===
PrintMessage("")
PrintMessage("[TEST 8] Integer Square Root")
PrintMessage("-----------------------------")

sqrt16 = Math.ISqrt(16)
PrintMessage("ISqrt(16) = ")
PrintNumber(sqrt16)
PrintMessage("  Expected: 4")

sqrt25 = Math.ISqrt(25)
PrintMessage("ISqrt(25) = ")
PrintNumber(sqrt25)
PrintMessage("  Expected: 5")

sqrt100 = Math.ISqrt(100)
PrintMessage("ISqrt(100) = ")
PrintNumber(sqrt100)
PrintMessage("  Expected: 10")

// === SUMMARY ===
PrintMessage("")
PrintMessage("===========================================")
PrintMessage("Test Suite Complete!")
PrintMessage("===========================================")
PrintMessage("")
PrintMessage("Notes:")
PrintMessage("- Fixed-point scale: 10000 (4 decimal places)")
PrintMessage("- All angles in degrees")
PrintMessage("- Some minor rounding errors are expected")