// test_socket_theory.ailang  
// Test what might be wrong with SocketRead

PrintMessage("=== SOCKET READ THEORY TEST ===")

PrintMessage("\n[Theory 1] SocketRead might not write to buffer+0")
PrintMessage("If SocketRead has an off-by-one error, data starts at buffer+1")

buffer = Allocate(32)

// Simulate SocketRead putting data at wrong offset
StoreValue(Add(buffer, 1), 42)  // '*' at offset 1 instead of 0
StoreValue(Add(buffer, 2), 49)  // '1'
StoreValue(Add(buffer, 3), 13)  // '\r'
StoreValue(Add(buffer, 4), 10)  // '\n'

// Check offset 0
byte0 = Dereference(buffer)
PrintMessage("Byte at offset 0: ")
PrintNumber(byte0)

// Check offset 1
byte1 = Dereference(Add(buffer, 1))
PrintMessage("Byte at offset 1: ")
PrintNumber(byte1)

IfCondition And(NotEqual(byte0, 42), EqualTo(byte1, 42)) ThenBlock {
    PrintMessage("FOUND IT: Data is at offset 1, not 0!")
}

PrintMessage("\n[Theory 2] SocketRead might return wrong count")
PrintMessage("If bytes_read is wrong, parsing fails")

// Simulate correct buffer but wrong count
buf2 = Allocate(32)
StoreValue(buf2, 42)
StoreValue(Add(buf2, 1), 49)

// What if SocketRead returns 0 or -1?
fake_bytes_read = 0
IfCondition LessEqual(fake_bytes_read, 0) ThenBlock {
    PrintMessage("Would disconnect if bytes_read <= 0")
}

PrintMessage("\n[Theory 3] Client not sending RESP format")
PrintMessage("Maybe the client sends plain text instead of RESP")

// Simulate plain "PING" without RESP formatting
buf3 = Allocate(32)
StoreValue(buf3, 80)  // 'P'
StoreValue(Add(buf3, 1), 73)  // 'I'
StoreValue(Add(buf3, 2), 78)  // 'N'
StoreValue(Add(buf3, 3), 71)  // 'G'

first = Dereference(buf3)
PrintMessage("Plain text first byte: ")
PrintNumber(first)
PrintMessage(" (Should be 80 for 'P', not 42 for '*')")

PrintMessage("\n[Theory 4] Buffer not actually passed correctly")
PrintMessage("Function parameter passing issue?")

Function.Test.CheckBuffer {
    Input: test_buf: Address
    Body: {
        PrintMessage("Inside function, buffer address: ")
        PrintNumber(test_buf)
        
        first_in_func = Dereference(test_buf)
        PrintMessage("First byte in function: ")
        PrintNumber(first_in_func)
    }
}

buf4 = Allocate(32)
StoreValue(buf4, 42)
PrintMessage("Outside function, buffer address: ")
PrintNumber(buf4)
Test.CheckBuffer(buf4)

Deallocate(buffer, 32)
Deallocate(buf2, 32)
Deallocate(buf3, 32)
Deallocate(buf4, 32)

PrintMessage("\n=== MOST LIKELY CAUSES ===")
PrintMessage("1. Client not sending RESP format (sending plain text)")
PrintMessage("2. SocketRead has an offset bug")
PrintMessage("3. Buffer address corruption in function calls")
PrintMessage("4. The test client you're using doesn't speak RESP")
PrintMessage("")
PrintMessage("Try: echo '*1\\r\\n$4\\r\\nPING\\r\\n' | nc localhost 6379")