// test_pool_fixes.ailang
// Comprehensive test of pool bug fixes

PrintMessage("Pool Bug Fix Test Suite")
PrintMessage("=======================")
PrintMessage("")

// ==========================================
// TEST 1: FixedPool with Initialize values
// ==========================================
PrintMessage("TEST 1: FixedPool Initialization")
PrintMessage("---------------------------------")

FixedPool.TestPool {
    "zero": Initialize=0
    "small": Initialize=42
    "negative": Initialize=-100
    "large": Initialize=65536
    "max_int": Initialize=2147483647
}

PrintMessage("Checking initialized values:")
PrintMessage("zero (should be 0):")
PrintNumber(TestPool.zero)
PrintMessage("small (should be 42):")
PrintNumber(TestPool.small)
PrintMessage("negative (should be -100):")
PrintNumber(TestPool.negative)
PrintMessage("large (should be 65536):")
PrintNumber(TestPool.large)
PrintMessage("max_int (should be 2147483647):")
PrintNumber(TestPool.max_int)

// Test operations on initialized values
sum = Add(TestPool.small, TestPool.large)
PrintMessage("")
PrintMessage("Operations test (42 + 65536):")
PrintNumber(sum)

// ==========================================
// TEST 2: Multiple FixedPools
// ==========================================
PrintMessage("")
PrintMessage("TEST 2: Multiple FixedPools")
PrintMessage("----------------------------")

FixedPool.Config {
    "version": Initialize=100
    "max_connections": Initialize=1000
    "timeout": Initialize=30
}

FixedPool.Settings {
    "debug": Initialize=1
    "verbose": Initialize=0
    "log_level": Initialize=3
}

PrintMessage("Config.version (should be 100):")
PrintNumber(Config.version)
PrintMessage("Config.max_connections (should be 1000):")
PrintNumber(Config.max_connections)
PrintMessage("Settings.debug (should be 1):")
PrintNumber(Settings.debug)
PrintMessage("Settings.log_level (should be 3):")
PrintNumber(Settings.log_level)

// ==========================================
// TEST 3: DynamicPool Compilation
// ==========================================
PrintMessage("")
PrintMessage("TEST 3: DynamicPool Compilation")
PrintMessage("--------------------------------")

DynamicPool.Runtime {
    "buffer": Initialize=0
    "size": Initialize=1024
    "count": Initialize=0
}

PrintMessage("DynamicPool declared successfully!")

// Test DynamicPool operations
Runtime.buffer = 12345
Runtime.size = 2048
Runtime.count = Add(Runtime.count, 1)

PrintMessage("Runtime.buffer after assignment (should be 12345):")
PrintNumber(Runtime.buffer)
PrintMessage("Runtime.size after assignment (should be 2048):")
PrintNumber(Runtime.size)
PrintMessage("Runtime.count after increment (should be 1):")
PrintNumber(Runtime.count)

// ==========================================
// TEST 4: Mixed Pool Types
// ==========================================
PrintMessage("")
PrintMessage("TEST 4: Mixed Pool Types")
PrintMessage("------------------------")

FixedPool.Constants {
    "pi": Initialize=31415
    "e": Initialize=27182
}

DynamicPool.Variables {
    "x": Initialize=0
    "y": Initialize=0
    "result": Initialize=0
}

// Use fixed pool value in calculation
Variables.x = Constants.pi
Variables.y = Constants.e
Variables.result = Add(Variables.x, Variables.y)

PrintMessage("Constants.pi (should be 31415):")
PrintNumber(Constants.pi)
PrintMessage("Variables.result (pi + e = 58597):")
PrintNumber(Variables.result)

// ==========================================
// TEST 5: Stress Test Many Pool Variables
// ==========================================
PrintMessage("")
PrintMessage("TEST 5: Stress Test")
PrintMessage("-------------------")

FixedPool.Stress {
    "a": Initialize=1
    "b": Initialize=2
    "c": Initialize=3
    "d": Initialize=4
    "e": Initialize=5
    "f": Initialize=6
    "g": Initialize=7
    "h": Initialize=8
    "i": Initialize=9
    "j": Initialize=10
}

total = Add(Stress.a, Stress.b)
total = Add(total, Stress.c)
total = Add(total, Stress.d)
total = Add(total, Stress.e)
total = Add(total, Stress.f)
total = Add(total, Stress.g)
total = Add(total, Stress.h)
total = Add(total, Stress.i)
total = Add(total, Stress.j)

PrintMessage("Sum of 1+2+3+4+5+6+7+8+9+10 (should be 55):")
PrintNumber(total)

// ==========================================
// FINAL RESULTS
// ==========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TEST SUITE COMPLETE")
PrintMessage("========================================")
PrintMessage("")
PrintMessage("If all values match expected:")
PrintMessage("- FixedPool Initialize bug is FIXED")
PrintMessage("- DynamicPool compilation bug is FIXED")
PrintMessage("")
PrintMessage("If values are 0 or compilation failed:")
PrintMessage("- Bugs still present, check implementation")