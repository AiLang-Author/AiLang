// message_passing_demo.ailang
// Demonstrates actual message passing between send and receive

PrintMessage("=== MESSAGE PASSING DEMO ===")
PrintMessage("")

// Initialize a shared value
shared_data = 0

// Sender routine
SubRoutine.Sender {
    PrintMessage("Sender: Preparing message...")
    message_value = 42
    
    // Send message with parameter using arrow syntax
    SendMessage.DataChannel(data=>message_value, priority=>1)
    
    PrintMessage("Sender: Message sent with value 42")
}

// Receiver routine  
SubRoutine.Receiver {
    PrintMessage("Receiver: Waiting for message...")
    
    // This will only execute if a message exists
    ReceiveMessage.DataChannel {
        PrintMessage("Receiver: Message received!")
        // In a real system, we'd extract the message data
        // For now, we simulate by setting the shared value
        shared_data = 42
    }
    
    PrintMessage("Receiver: Check complete")
}

// Test 1: Receive before send (should not execute body)
PrintMessage("Test 1: Receive with no message")
RunTask(Receiver)
PrintMessage("Shared data after empty receive: ")
PrintNumber(shared_data)
PrintMessage("")

// Test 2: Send then receive (should execute body)
PrintMessage("Test 2: Send then receive")
RunTask(Sender)
RunTask(Receiver)
PrintMessage("Shared data after send/receive: ")
PrintNumber(shared_data)
PrintMessage("")

// Test 3: Multiple sends
PrintMessage("Test 3: Multiple messages")
counter = 0

SubRoutine.MultiSend {
    i = 0
    WhileLoop LessThan(i, 3) {
        SendMessage.CounterChannel(count=>i)
        PrintMessage("Sent message ")
        PrintNumber(i)
        i = Add(i, 1)
    }
}

SubRoutine.MultiReceive {
    // Each receive processes one message
    ReceiveMessage.CounterChannel {
        counter = Add(counter, 1)
        PrintMessage("Processing message ")
        PrintNumber(counter)
    }
}

RunTask(MultiSend)

// Receive multiple times
RunTask(MultiReceive)
RunTask(MultiReceive)  
RunTask(MultiReceive)

PrintMessage("Total messages processed: ")
PrintNumber(counter)

PrintMessage("")
PrintMessage("=== DEMO COMPLETE ===")