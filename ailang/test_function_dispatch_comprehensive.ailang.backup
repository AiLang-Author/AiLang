Function.AddOne {
    Input: x: Integer
    Output: Integer
    Body: {
        result = Add(x, 1)
        ReturnValue(result)
    }
}

Function.Double {
    Input: x: Integer
    Output: Integer
    Body: {
        result = Multiply(x, 2)
        ReturnValue(result)
    }
}

Function.GetTen {
    Output: Integer
    Body: {
        ReturnValue(10)
    }
}

PrintMessage("Test 1: Basic CallIndirect")
ptr = AddressOf(AddOne)
result = CallIndirect(ptr, 5)
PrintNumber(result)

PrintMessage("Test 2: Different function")
ptr2 = AddressOf(Double)
result2 = CallIndirect(ptr2, 7)
PrintNumber(result2)

PrintMessage("Test 3: Zero args")
ptr3 = AddressOf(GetTen)
result3 = CallIndirect(ptr3)
PrintNumber(result3)

PrintMessage("Test 4: Loop with CallIndirect")
counter = 0
loop_cond = LessThan(counter, 5)
inc_ptr = AddressOf(AddOne)

WhileLoop loop_cond {
    Body: {
        counter = CallIndirect(inc_ptr, counter)
        PrintNumber(counter)
        loop_cond = LessThan(counter, 5)
    }
}

PrintMessage("Test 4b: IfCondition inside WhileLoop")
counter2 = 0
loop_cond2 = LessThan(counter2, 5)

WhileLoop loop_cond2 {
    Body: {
        is_even = EqualTo(Modulo(counter2, 2), 0)
        
        IfCondition is_even {
            ThenBlock: {
                PrintMessage("Even")
            }
            ElseBlock: {
                PrintMessage("Odd")
            }
        }
        
        counter2 = Add(counter2, 1)
        loop_cond2 = LessThan(counter2, 5)
    }
}

PrintMessage("Test 5: Sequential calls")
val = 1
p1 = AddressOf(AddOne)
p2 = AddressOf(Double)

val = CallIndirect(p1, val)
val = CallIndirect(p2, val)
val = CallIndirect(p1, val)
PrintNumber(val)

PrintMessage("Tests complete")