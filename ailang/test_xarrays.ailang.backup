// test_xarrays.ailang
// Comprehensive test suite for XArrays library

// Import the library
LibraryImport.Library.XArrays

PrintMessage("========================================")
PrintMessage("XArrays Library Test Suite")
PrintMessage("========================================")
PrintMessage("")

// Test tracking
total_tests = 0
passed_tests = 0
failed_tests = 0
test_name = ""
expected = 0
actual = 0

// Test helper
SubRoutine.TestResult {
    total_tests = Add(total_tests, 1)
    
    PrintMessage("TEST: ")
    PrintMessage(test_name)
    PrintMessage("  Expected: ")
    PrintNumber(expected)
    PrintMessage("  Actual: ")
    PrintNumber(actual)
    
    IfCondition EqualTo(expected, actual) ThenBlock {
        PrintMessage("  PASS")
        passed_tests = Add(passed_tests, 1)
    } ElseBlock {
        PrintMessage("  FAIL")
        failed_tests = Add(failed_tests, 1)
    }
    PrintMessage("")
}

// ====================
// Test Dynamic Arrays
// ====================
PrintMessage("========================================")
PrintMessage("TESTING: Dynamic Arrays")
PrintMessage("========================================")

// Create array
arr = XArray.XCreate(4)
test_name = "XArray create (capacity check)"
expected = 4
actual = XArray.XCapacity(arr)
RunTask(TestResult)

test_name = "XArray initial size"
expected = 0
actual = XArray.XSize(arr)
RunTask(TestResult)

// Push elements
XArray.XPush(arr, 10)
XArray.XPush(arr, 20)
XArray.XPush(arr, 30)

test_name = "XArray size after 3 pushes"
expected = 3
actual = XArray.XSize(arr)
RunTask(TestResult)

test_name = "XArray get element at index 1"
expected = 20
actual = XArray.XGet(arr, 1)
RunTask(TestResult)

// Test auto-resize
XArray.XPush(arr, 40)
XArray.XPush(arr, 50)

test_name = "XArray size after resize"
expected = 5
actual = XArray.XSize(arr)
RunTask(TestResult)

test_name = "XArray capacity after resize"
expected = 8
actual = XArray.XCapacity(arr)
RunTask(TestResult)

// Pop element
popped = XArray.XPop(arr)
test_name = "XArray pop value"
expected = 50
actual = popped
RunTask(TestResult)

test_name = "XArray size after pop"
expected = 4
actual = XArray.XSize(arr)
RunTask(TestResult)

// Set element
XArray.XSet(arr, 2, 99)
test_name = "XArray set element"
expected = 99
actual = XArray.XGet(arr, 2)
RunTask(TestResult)

// Clear array
XArray.XClear(arr)
test_name = "XArray clear"
expected = 0
actual = XArray.XSize(arr)
RunTask(TestResult)

// ====================
// Test Stack
// ====================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TESTING: Stack")
PrintMessage("========================================")

stack = XStack.XCreate(10)

test_name = "Stack initially empty"
expected = 1
actual = XStack.XIsEmpty(stack)
RunTask(TestResult)

// Push elements
XStack.XPush(stack, 100)
XStack.XPush(stack, 200)
XStack.XPush(stack, 300)

test_name = "Stack not empty after push"
expected = 0
actual = XStack.XIsEmpty(stack)
RunTask(TestResult)

test_name = "Stack peek top"
expected = 300
actual = XStack.XPeek(stack)
RunTask(TestResult)

test_name = "Stack pop"
expected = 300
actual = XStack.XPop(stack)
RunTask(TestResult)

test_name = "Stack peek after pop"
expected = 200
actual = XStack.XPeek(stack)
RunTask(TestResult)

// ====================
// Test Queue
// ====================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TESTING: Queue")
PrintMessage("========================================")

queue = XQueue.XCreate(5)

// Enqueue elements
XQueue.XEnqueue(queue, 11)
XQueue.XEnqueue(queue, 22)
XQueue.XEnqueue(queue, 33)

test_name = "Queue dequeue first"
expected = 11
actual = XQueue.XDequeue(queue)
RunTask(TestResult)

test_name = "Queue dequeue second"
expected = 22
actual = XQueue.XDequeue(queue)
RunTask(TestResult)

// Add more
XQueue.XEnqueue(queue, 44)
XQueue.XEnqueue(queue, 55)

test_name = "Queue dequeue after wrap"
expected = 33
actual = XQueue.XDequeue(queue)
RunTask(TestResult)

// ====================
// Test Hash Table
// ====================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TESTING: Hash Table")
PrintMessage("========================================")

hash = XHash.XCreate(7)

// Insert key-value pairs
XHash.XInsert(hash, 42, 420)
XHash.XInsert(hash, 17, 170)
XHash.XInsert(hash, 99, 990)
XHash.XInsert(hash, 23, 230)

test_name = "Hash lookup key 42"
expected = 420
actual = XHash.XLookup(hash, 42)
RunTask(TestResult)

test_name = "Hash lookup key 17"
expected = 170
actual = XHash.XLookup(hash, 17)
RunTask(TestResult)

test_name = "Hash lookup key 99"
expected = 990
actual = XHash.XLookup(hash, 99)
RunTask(TestResult)

// Test collision handling
XHash.XInsert(hash, 49, 490)
test_name = "Hash collision handling (49 collides with 42)"
expected = 490
actual = XHash.XLookup(hash, 49)
RunTask(TestResult)

test_name = "Hash original still accessible after collision"
expected = 420
actual = XHash.XLookup(hash, 42)
RunTask(TestResult)

test_name = "Hash lookup missing key"
expected = XArrays.XERROR
actual = XHash.XLookup(hash, 999)
RunTask(TestResult)

// ====================
// Test Linked List
// ====================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TESTING: Linked List")
PrintMessage("========================================")

list = XList.XCreate()

test_name = "List initial size"
expected = 0
actual = XList.XSize(list)
RunTask(TestResult)

// Append elements
XList.XAppend(list, 5)
XList.XAppend(list, 10)
XList.XAppend(list, 15)

test_name = "List size after appends"
expected = 3
actual = XList.XSize(list)
RunTask(TestResult)

// Prepend element
XList.XPrepend(list, 1)

test_name = "List size after prepend"
expected = 4
actual = XList.XSize(list)
RunTask(TestResult)

// ====================
// Test Utility Functions
// ====================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TESTING: Utility Functions")
PrintMessage("========================================")

// Create array for testing
util_arr = XArray.XCreate(10)
XArray.XPush(util_arr, 3)
XArray.XPush(util_arr, 7)
XArray.XPush(util_arr, 1)
XArray.XPush(util_arr, 9)
XArray.XPush(util_arr, 5)

test_name = "Find max"
expected = 9
actual = XUtil.XFindMax(util_arr)
RunTask(TestResult)

test_name = "Find min"
expected = 1
actual = XUtil.XFindMin(util_arr)
RunTask(TestResult)

// Test reverse
XUtil.XReverse(util_arr)
test_name = "Reverse array first element"
expected = 5
actual = XArray.XGet(util_arr, 0)
RunTask(TestResult)

test_name = "Reverse array last element"
expected = 3
actual = XArray.XGet(util_arr, 4)
RunTask(TestResult)

// Test sort
sort_arr = XArray.XCreate(6)
XArray.XPush(sort_arr, 64)
XArray.XPush(sort_arr, 34)
XArray.XPush(sort_arr, 25)
XArray.XPush(sort_arr, 12)
XArray.XPush(sort_arr, 22)
XArray.XPush(sort_arr, 11)

XUtil.XQuickSort(sort_arr, 0, 5)

test_name = "QuickSort first element"
expected = 11
actual = XArray.XGet(sort_arr, 0)
RunTask(TestResult)

test_name = "QuickSort last element"
expected = 64
actual = XArray.XGet(sort_arr, 5)
RunTask(TestResult)

test_name = "QuickSort middle element"
expected = 22
actual = XArray.XGet(sort_arr, 2)
RunTask(TestResult)

// Test binary search on sorted array
test_name = "Binary search for 25"
expected = 3
actual = XUtil.XBinarySearch(sort_arr, 25)
RunTask(TestResult)

test_name = "Binary search for missing element"
expected = XArrays.XNULL
actual = XUtil.XBinarySearch(sort_arr, 99)
RunTask(TestResult)

// ====================
// Edge Cases
// ====================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TESTING: Edge Cases")
PrintMessage("========================================")

// Empty array operations
empty_arr = XArray.XCreate(5)

test_name = "Pop from empty array"
expected = XArrays.XERROR
actual = XArray.XPop(empty_arr)
RunTask(TestResult)

test_name = "Get from invalid index"
expected = XArrays.XERROR
actual = XArray.XGet(empty_arr, 10)
RunTask(TestResult)

// Empty stack
empty_stack = XStack.XCreate(5)
test_name = "Pop from empty stack"
expected = XArrays.XERROR
actual = XStack.XPop(empty_stack)
RunTask(TestResult)

test_name = "Peek empty stack"
expected = XArrays.XERROR
actual = XStack.XPeek(empty_stack)
RunTask(TestResult)

// Empty queue
empty_queue = XQueue.XCreate(5)
test_name = "Dequeue from empty queue"
expected = XArrays.XERROR
actual = XQueue.XDequeue(empty_queue)
RunTask(TestResult)

// ====================
// Final Summary
// ====================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("TEST SUMMARY")
PrintMessage("========================================")
PrintMessage("Total Tests: ")
PrintNumber(total_tests)
PrintMessage("Passed: ")
PrintNumber(passed_tests)
PrintMessage("Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")
PrintMessage("")

IfCondition EqualTo(failed_tests, 0) ThenBlock {
    PrintMessage("ALL TESTS PASSED!")
} ElseBlock {
    PrintMessage("SOME TESTS FAILED - Review failures above")
}

PrintMessage("========================================")
PrintMessage("XArrays Library Test Complete")