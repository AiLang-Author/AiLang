// Test harness for the Library.FixedPointTrig library

// Import the library we want to test
LibraryImport.FixedPointTrig

PrintMessage("================================================")
PrintMessage("AILANG Fixed-Point Trigonometry Test Suite")
PrintMessage("================================================")
PrintMessage("")

// --- Test Harness Setup ---

// Global test tracking variables
total_tests = 0
passed_tests = 0
failed_tests = 0
section_tests = 0
section_passed = 0
test_name = ""
expected = 0
actual = 0
section_name = ""

// Helper subroutine for printing test results
SubRoutine.TestResult {
    total_tests = Add(total_tests, 1)
    section_tests = Add(section_tests, 1)
    
    PrintMessage("  TEST: ")
    PrintMessage(test_name)
    PrintMessage("    Expected: ")
    PrintNumber(expected)
    PrintMessage("    Actual: ")
    PrintNumber(actual)
    
    // Allow for a small tolerance in fixed-point results
    diff = Subtract(expected, actual)
    is_neg = LessThan(diff, 0)
    IfCondition is_neg ThenBlock: {
        diff = Subtract(0, diff)
    }
    
    IfCondition LessEqual(diff, 2) ThenBlock: { // Allow tolerance of +/- 2
        PrintMessage("    PASS")
        passed_tests = Add(passed_tests, 1)
        section_passed = Add(section_passed, 1)
    } ElseBlock: {
        PrintMessage("    FAIL")
        failed_tests = Add(failed_tests, 1)
        Debug("TestFailDetail", level=2) {
            PrintMessage("      >> DEBUG: Test failed. Difference was: ")
            PrintNumber(diff)
        }
    }
    PrintMessage("")
}

// Section summary helper
SubRoutine.SectionSummary {
    PrintMessage("Section ")
    PrintMessage(section_name)
    PrintMessage(" Results: ")
    PrintNumber(section_passed)
    PrintMessage("/")
    PrintNumber(section_tests)
    PrintMessage(" passed")
    PrintMessage("")
    
    section_tests = 0
    section_passed = 0
}

// --- SECTION 1: CONVERSION & CONSTANTS ---

PrintMessage("================================================")
PrintMessage("SECTION 1: CONVERSION & CONSTANTS")
PrintMessage("================================================")

Debug("TestHarness", level=1) { PrintMessage("  [DEBUG] Starting Section 1: Conversions") }

test_name = "Access PI constant"
expected = 31416
actual = FixedPointTrig.pi
RunTask(TestResult)

test_name = "Convert 5 to fixed-point"
expected = 50000
actual = FixedPoint.FromInt(5)
RunTask(TestResult)

test_name = "Convert fixed-point 75000 to integer (7.5 -> 8)"
expected = 8 // Rounding up
actual = FixedPoint.ToInt(75000)
RunTask(TestResult)

test_name = "Convert fixed-point 74999 to integer (7.4999 -> 7)"
expected = 7 // Rounding down
actual = FixedPoint.ToInt(74999)
RunTask(TestResult)

section_name = "1 (Conversion)"
RunTask(SectionSummary)

// --- SECTION 2: FIXED-POINT ARITHMETIC ---

PrintMessage("================================================")
PrintMessage("SECTION 2: FIXED-POINT ARITHMETIC")
PrintMessage("================================================")

Debug("TestHarness", level=1) { PrintMessage("  [DEBUG] Starting Section 2: Arithmetic") }

// 2.5 * 3.0 = 7.5
fp_a = 25000
fp_b = 30000
test_name = "FixedPoint.Multiply(2.5, 3.0)"
expected = 75000
actual = FixedPoint.Multiply(fp_a, fp_b)
RunTask(TestResult)

// 10.0 / 4.0 = 2.5
fp_c = 100000
fp_d = 40000
test_name = "FixedPoint.Divide(10.0, 4.0)"
expected = 25000
actual = FixedPoint.Divide(fp_c, fp_d)
RunTask(TestResult)

// 1.0 / 3.0 = 0.3333...
fp_one = 10000
fp_three = 30000
test_name = "FixedPoint.Divide(1.0, 3.0)"
expected = 3333
actual = FixedPoint.Divide(fp_one, fp_three)
RunTask(TestResult)

section_name = "2 (Arithmetic)"
RunTask(SectionSummary)

// --- SECTION 3: TRIGONOMETRIC FUNCTIONS ---

PrintMessage("================================================")
PrintMessage("SECTION 3: TRIGONOMETRIC FUNCTIONS")
PrintMessage("================================================")

Debug("TestHarness", level=1) { PrintMessage("  [DEBUG] Starting Section 3: Trigonometry") }

test_name = "Trig.NormalizeDegrees(400)"
expected = 40
actual = Trig.NormalizeDegrees(400)
RunTask(TestResult)

test_name = "Trig.NormalizeDegrees(-90)"
expected = 270
actual = Trig.NormalizeDegrees(-90)
RunTask(TestResult)

test_name = "Trig.Sin(30)"
expected = 5000 // sin(30) = 0.5
actual = Trig.Sin(30)
RunTask(TestResult)

test_name = "Trig.Sin(90)"
expected = 10000 // sin(90) = 1.0
actual = Trig.Sin(90)
RunTask(TestResult)

test_name = "Trig.Sin(270)"
expected = -10000 // sin(270) = -1.0
actual = Trig.Sin(270)
RunTask(TestResult)

test_name = "Trig.Cos(60)"
expected = 5000 // cos(60) = 0.5
actual = Trig.Cos(60)
RunTask(TestResult)

test_name = "Trig.Cos(90)"
expected = 0 // cos(90) = 0
actual = Trig.Cos(90)
RunTask(TestResult)

test_name = "Trig.Tan(45)"
expected = 10000 // tan(45) = 1.0
actual = Trig.Tan(45)
RunTask(TestResult)

section_name = "3 (Trigonometry)"
RunTask(SectionSummary)

// --- FINAL SUMMARY ---
PrintMessage("================================================")
PrintMessage("FINAL TEST SUMMARY")
PrintMessage("================================================")

PrintMessage("Total Tests: ")
PrintNumber(total_tests)
PrintMessage("Passed: ")
PrintNumber(passed_tests)
PrintMessage(" Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock: {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")

IfCondition EqualTo(failed_tests, 0) ThenBlock: {
    PrintMessage("")
    PrintMessage("=== ALL FIXED-POINT TESTS PASSED! ===")
} ElseBlock: {
    PrintMessage("")
    PrintMessage("=== SOME TESTS FAILED ===")
}

PrintMessage("")
PrintMessage("Fixed-Point Test Complete")