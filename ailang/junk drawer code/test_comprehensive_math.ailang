// test_comprehensive_math.ailang
// Comprehensive math test harness with performance tracking

PrintMessage("=== COMPREHENSIVE MATH TEST SUITE ===")
PrintMessage("")

// Enable performance tracking
DebugPerf_Start()

// ========== SECTION 1: BASIC ARITHMETIC ==========
PrintMessage("[1] Basic Arithmetic")
DebugPerf_Mark("section1_start")

// Positive operations (these should work)
result = Add(10, 5)
PrintMessage("10 + 5 = ")
PrintNumber(result)
PrintMessage("Expected: 15")

result = Subtract(10, 5)
PrintMessage("10 - 5 = ")
PrintNumber(result)
PrintMessage("Expected: 5")

result = Multiply(10, 5)
PrintMessage("10 * 5 = ")
PrintNumber(result)
PrintMessage("Expected: 50")

result = Divide(10, 5)
PrintMessage("10 / 5 = ")
PrintNumber(result)
PrintMessage("Expected: 2")

DebugPerf_Mark("section1_end")

// ========== SECTION 2: NEGATIVE NUMBERS ==========
PrintMessage("")
PrintMessage("[2] Negative Number Operations")

// Negative addition/subtraction
result = Add(-10, 5)
PrintMessage("-10 + 5 = ")
PrintNumber(result)
PrintMessage("Expected: -5")

result = Subtract(-10, 5)
PrintMessage("-10 - 5 = ")
PrintNumber(result)
PrintMessage("Expected: -15")

result = Add(-10, -5)
PrintMessage("-10 + (-5) = ")
PrintNumber(result)
PrintMessage("Expected: -15")

// Negative multiplication
result = Multiply(-10, 5)
PrintMessage("-10 * 5 = ")
PrintNumber(result)
PrintMessage("Expected: -50")

result = Multiply(-10, -5)
PrintMessage("-10 * (-5) = ")
PrintNumber(result)
PrintMessage("Expected: 50")

result = Multiply(10, -5)
PrintMessage("10 * (-5) = ")
PrintNumber(result)
PrintMessage("Expected: -50")

// ========== SECTION 3: DIVISION EDGE CASES ==========
PrintMessage("")
PrintMessage("[3] Division Edge Cases")

// Positive divisions (should work)
result = Divide(20, 4)
PrintMessage("20 / 4 = ")
PrintNumber(result)
PrintMessage("Expected: 5")

// Negative dividend
result = Divide(-20, 4)
PrintMessage("-20 / 4 = ")
PrintNumber(result)
PrintMessage("Expected: -5")

// Negative divisor
result = Divide(20, -4)
PrintMessage("20 / (-4) = ")
PrintNumber(result)
PrintMessage("Expected: -5")

// Both negative
result = Divide(-20, -4)
PrintMessage("-20 / (-4) = ")
PrintNumber(result)
PrintMessage("Expected: 5")

// Integer division with remainder
result = Divide(21, 4)
PrintMessage("21 / 4 = ")
PrintNumber(result)
PrintMessage("Expected: 5 (integer division)")

// Negative with remainder
result = Divide(-21, 4)
PrintMessage("-21 / 4 = ")
PrintNumber(result)
PrintMessage("Expected: -5 (integer division)")

result = Divide(21, -4)
PrintMessage("21 / (-4) = ")
PrintNumber(result)
PrintMessage("Expected: -5 (integer division)")

result = Divide(-21, -4)
PrintMessage("-21 / (-4) = ")
PrintNumber(result)
PrintMessage("Expected: 5 (integer division)")

// Division by 1 and -1
result = Divide(42, 1)
PrintMessage("42 / 1 = ")
PrintNumber(result)
PrintMessage("Expected: 42")

result = Divide(42, -1)
PrintMessage("42 / (-1) = ")
PrintNumber(result)
PrintMessage("Expected: -42")

result = Divide(-42, 1)
PrintMessage("-42 / 1 = ")
PrintNumber(result)
PrintMessage("Expected: -42")

result = Divide(-42, -1)
PrintMessage("-42 / (-1) = ")
PrintNumber(result)
PrintMessage("Expected: 42")

// ========== SECTION 4: MODULO OPERATIONS ==========
PrintMessage("")
PrintMessage("[4] Modulo Operations")

result = Modulo(17, 5)
PrintMessage("17 % 5 = ")
PrintNumber(result)
PrintMessage("Expected: 2")

result = Modulo(-17, 5)
PrintMessage("-17 % 5 = ")
PrintNumber(result)
PrintMessage("Expected: -2 (truncated division)")

result = Modulo(17, -5)
PrintMessage("17 % (-5) = ")
PrintNumber(result)
PrintMessage("Expected: 2 (truncated division)")

result = Modulo(-17, -5)
PrintMessage("-17 % (-5) = ")
PrintNumber(result)
PrintMessage("Expected: -2")

// ========== SECTION 5: ZERO EDGE CASES ==========
PrintMessage("")
PrintMessage("[5] Zero Edge Cases")

result = Add(0, 5)
PrintMessage("0 + 5 = ")
PrintNumber(result)
PrintMessage("Expected: 5")

result = Multiply(0, 5)
PrintMessage("0 * 5 = ")
PrintNumber(result)
PrintMessage("Expected: 0")

result = Multiply(0, -5)
PrintMessage("0 * (-5) = ")
PrintNumber(result)
PrintMessage("Expected: 0")

result = Divide(0, 5)
PrintMessage("0 / 5 = ")
PrintNumber(result)
PrintMessage("Expected: 0")

result = Divide(0, -5)
PrintMessage("0 / (-5) = ")
PrintNumber(result)
PrintMessage("Expected: 0")

// ========== SECTION 6: LARGE NUMBERS ==========
PrintMessage("")
PrintMessage("[6] Large Number Operations")

result = Multiply(1000000, 1000)
PrintMessage("1000000 * 1000 = ")
PrintNumber(result)
PrintMessage("Expected: 1000000000")

result = Divide(1000000000, 1000)
PrintMessage("1000000000 / 1000 = ")
PrintNumber(result)
PrintMessage("Expected: 1000000")

// ========== SECTION 7: CHAINED OPERATIONS ==========
PrintMessage("")
PrintMessage("[7] Chained Operations")

// Order of operations test
result = Add(Multiply(3, 4), 5)
PrintMessage("(3 * 4) + 5 = ")
PrintNumber(result)
PrintMessage("Expected: 17")

result = Multiply(Add(3, 4), 5)
PrintMessage("(3 + 4) * 5 = ")
PrintNumber(result)
PrintMessage("Expected: 35")

// Complex chain with negatives
result = Divide(Multiply(-6, 4), -3)
PrintMessage("((-6) * 4) / (-3) = ")
PrintNumber(result)
PrintMessage("Expected: 8")

// ========== SECTION 8: SYMBOL OPERATIONS ==========
PrintMessage("")
PrintMessage("[8] Symbol Operations (Infix)")

result = (20 / 4)
PrintMessage("(20 / 4) = ")
PrintNumber(result)
PrintMessage("Expected: 5")

result = (-20 / 4)
PrintMessage("(-20 / 4) = ")
PrintNumber(result)
PrintMessage("Expected: -5")

result = (20 / -4)
PrintMessage("(20 / -4) = ")
PrintNumber(result)
PrintMessage("Expected: -5")

result = (-20 / -4)
PrintMessage("(-20 / -4) = ")
PrintNumber(result)
PrintMessage("Expected: 5")

// ========== SECTION 9: POWERS OF 2 ==========
PrintMessage("")
PrintMessage("[9] Powers of 2 and Bit Patterns")
DebugPerf_Mark("bit_ops_start")

// Generate powers of 2
pow2_0 = 1
PrintMessage("2^0 = ")
PrintNumber(pow2_0)

pow2_1 = (1 << 1)
PrintMessage("2^1 = ")
PrintNumber(pow2_1)

pow2_2 = (1 << 2)
PrintMessage("2^2 = ")
PrintNumber(pow2_2)

pow2_8 = (1 << 8)
PrintMessage("2^8 = ")
PrintNumber(pow2_8)
PrintMessage("Expected: 256")

pow2_16 = (1 << 16)
PrintMessage("2^16 = ")
PrintNumber(pow2_16)
PrintMessage("Expected: 65536")

pow2_20 = (1 << 20)
PrintMessage("2^20 = ")
PrintNumber(pow2_20)
PrintMessage("Expected: 1048576")

// Test if number is power of 2: n & (n-1) == 0
test_16 = 16
is_pow2 = ((test_16 & (test_16 - 1)) == 0)
PrintMessage("Is 16 a power of 2? ")
PrintNumber(is_pow2)
PrintMessage("Expected: 1 (true)")

test_15 = 15
is_pow2 = ((test_15 & (test_15 - 1)) == 0)
PrintMessage("Is 15 a power of 2? ")
PrintNumber(is_pow2)
PrintMessage("Expected: 0 (false)")

// ========== SECTION 10: BIT MANIPULATION TRICKS ==========
PrintMessage("")
PrintMessage("[10] Bit Manipulation Tricks")

// Set nth bit
n = 5
value = 0
set_bit = (value | (1 << n))
PrintMessage("Set bit 5 of 0: ")
PrintNumber(set_bit)
PrintMessage("Expected: 32")

// Clear nth bit
value = 255
clear_bit = (value & (~(1 << 3)))
PrintMessage("Clear bit 3 of 255: ")
PrintNumber(clear_bit)
PrintMessage("Expected: 247")

// Toggle nth bit - FIXED: Use BitwiseXor function
value = 170  // 10101010
toggle_bit = BitwiseXor(value, (1 << 4))
PrintMessage("Toggle bit 4 of 170: ")
PrintNumber(toggle_bit)
PrintMessage("Expected: 186")

// Check if bit is set
value = 42
bit_pos = 3
is_set = ((value & (1 << bit_pos)) != 0)
PrintMessage("Is bit 3 set in 42? ")
PrintNumber(is_set)
PrintMessage("Expected: 1 (true)")

DebugPerf_Mark("bit_ops_end")

// ========== SECTION 11: XOR PROPERTIES ==========
PrintMessage("")
PrintMessage("[11] XOR Properties and Tricks")

// XOR with self = 0
a = 42
result = BitwiseXor(a, a)
PrintMessage("42 XOR 42 = ")
PrintNumber(result)
PrintMessage("Expected: 0")

// XOR with 0 = identity
result = BitwiseXor(42, 0)
PrintMessage("42 XOR 0 = ")
PrintNumber(result)
PrintMessage("Expected: 42")

// XOR is commutative
result1 = BitwiseXor(12, 25)
result2 = BitwiseXor(25, 12)
PrintMessage("12 XOR 25 = ")
PrintNumber(result1)
PrintMessage("25 XOR 12 = ")
PrintNumber(result2)
PrintMessage("Should be equal")

// XOR swap without temp variable
x = 5
y = 7
PrintMessage("Before swap: x=")
PrintNumber(x)
PrintMessage(" y=")
PrintNumber(y)

x = BitwiseXor(x, y)
y = BitwiseXor(x, y)
x = BitwiseXor(x, y)

PrintMessage("After XOR swap: x=")
PrintNumber(x)
PrintMessage(" y=")
PrintNumber(y)

// Find single number (all others appear twice)
result = BitwiseXor(BitwiseXor(BitwiseXor(BitwiseXor(3, 5), 3), 7), 5)
PrintMessage("Find unique in [3,5,3,7,5]: ")
PrintNumber(result)
PrintMessage("Expected: 7")

// ========== SECTION 12: OVERFLOW TESTS ==========
PrintMessage("")
PrintMessage("[12] Overflow and Large Number Edge Cases")

// Max signed 32-bit: 2147483647
max_32 = 2147483647
result = Add(max_32, 0)
PrintMessage("Max 32-bit + 0 = ")
PrintNumber(result)

// What happens with overflow?
result = Add(max_32, 1)
PrintMessage("Max 32-bit + 1 = ")
PrintNumber(result)
PrintMessage("(overflow to 2147483648 - OK in 64-bit)")

// Large multiplication
result = Multiply(65536, 65536)
PrintMessage("65536 * 65536 = ")
PrintNumber(result)
PrintMessage("Expected: 4294967296")

// ========== SECTION 13: SHIFT OPERATIONS ==========
PrintMessage("")
PrintMessage("[13] Shift Operation Edge Cases")

// Shift by 0
result = (42 << 0)
PrintMessage("42 << 0 = ")
PrintNumber(result)
PrintMessage("Expected: 42")

// Left shift as multiplication
result = (5 << 1)
PrintMessage("5 << 1 (5*2) = ")
PrintNumber(result)
PrintMessage("Expected: 10")

result = (5 << 2)
PrintMessage("5 << 2 (5*4) = ")
PrintNumber(result)
PrintMessage("Expected: 20")

result = (5 << 3)
PrintMessage("5 << 3 (5*8) = ")
PrintNumber(result)
PrintMessage("Expected: 40")

// Right shift as division
result = (40 >> 1)
PrintMessage("40 >> 1 (40/2) = ")
PrintNumber(result)
PrintMessage("Expected: 20")

result = (40 >> 2)
PrintMessage("40 >> 2 (40/4) = ")
PrintNumber(result)
PrintMessage("Expected: 10")

result = (40 >> 3)
PrintMessage("40 >> 3 (40/8) = ")
PrintNumber(result)
PrintMessage("Expected: 5")

// Arithmetic vs logical shift on negative
// NOTE: Currently using logical shift, shows large positive number
result = (-16 >> 2)
PrintMessage("-16 >> 2 = ")
PrintNumber(result)
PrintMessage("(currently logical shift, should be -4 with arithmetic)")

// ========== SECTION 14: COMPLEX MATH ==========
PrintMessage("")
PrintMessage("[14] Complex Mathematical Expressions")

// Factorial-like calculation
result = Multiply(Multiply(Multiply(Multiply(5, 4), 3), 2), 1)
PrintMessage("5! = ")
PrintNumber(result)
PrintMessage("Expected: 120")

// Sum of arithmetic sequence: n*(n+1)/2
n = 10
sum_n = Divide(Multiply(n, Add(n, 1)), 2)
PrintMessage("Sum 1..10 = ")
PrintNumber(sum_n)
PrintMessage("Expected: 55")

// Pythagorean triple check: 3² + 4² = 5²
three_sq = Multiply(3, 3)
four_sq = Multiply(4, 4)
five_sq = Multiply(5, 5)
sum_sq = Add(three_sq, four_sq)
PrintMessage("3² + 4² = ")
PrintNumber(sum_sq)
PrintMessage("5² = ")
PrintNumber(five_sq)
PrintMessage("Should be equal (25)")

// ========== SECTION 15: BIT ROTATION (SIMPLIFIED) ==========
PrintMessage("")
PrintMessage("[15] Bit Rotation (Simplified)")

// Simplified test - just check individual operations
value = 179  // 10110011
shift_left = (value << 1)
PrintMessage("179 << 1 = ")
PrintNumber(shift_left)
PrintMessage("Expected: 358")

// ========== SECTION 16: MATHEMATICAL CONSTANTS ==========
PrintMessage("")
PrintMessage("[16] Special Mathematical Constants")

// Approximations using integer math
pi_scaled = 31416  // π * 10000
e_scaled = 27183   // e * 10000

// Circle circumference: 2πr for r=5
radius = 5
circ_scaled = Multiply(Multiply(2, pi_scaled), radius)
circ = Divide(circ_scaled, 10000)
PrintMessage("Circumference of r=5 circle: ")
PrintNumber(circ)
PrintMessage("Expected: ~31")

// ========== SECTION 17: NEGATIVE BIT PATTERNS ==========
PrintMessage("")
PrintMessage("[17] Negative Number Bit Patterns")

// Two's complement representation
neg_one = -1
result = (neg_one & 255)  // Look at low byte
PrintMessage("-1 & 0xFF = ")
PrintNumber(result)
PrintMessage("Expected: 255")

neg_128 = -128
result = (neg_128 & 255)
PrintMessage("-128 & 0xFF = ")
PrintNumber(result)
PrintMessage("Expected: 128")

// ========== SECTION 18: DIVISION VS SHIFT ==========
PrintMessage("")
PrintMessage("[18] Division by Powers of 2")

// Compare division vs shift
result1 = Divide(64, 8)
result2 = (64 >> 3)
PrintMessage("64 / 8 = ")
PrintNumber(result1)
PrintMessage("64 >> 3 = ")
PrintNumber(result2)
PrintMessage("Should be equal: 8")

// With negative numbers (currently differs due to logical shift)
result1 = Divide(-64, 8)
result2 = (-64 >> 3)
PrintMessage("-64 / 8 = ")
PrintNumber(result1)
PrintMessage("-64 >> 3 = ")
PrintNumber(result2)
PrintMessage("(shift differs - using logical not arithmetic)")

// ========== SECTION 19: LOGICAL CHAINS ==========
PrintMessage("")
PrintMessage("[19] Logical Operation Chains")

// Complex boolean expression
a = 1
b = 0
c = 1
d = 0

result = ((a && b) || (c && (!d)))
PrintMessage("(1 && 0) || (1 && (!0)) = ")
PrintNumber(result)
PrintMessage("Expected: 1")

// All combinations of 2 bits
result = ((!a) && (!b))
PrintMessage("!1 && !0 = ")
PrintNumber(result)
PrintMessage("Expected: 0")

// ========== SECTION 20: EXTREME VALUES ==========
PrintMessage("")
PrintMessage("[20] Extreme Value Tests")

// Very large power
result = (2 ^ 16)
PrintMessage("2^16 = ")
PrintNumber(result)
PrintMessage("Expected: 65536")

result = (2 ^ 20)
PrintMessage("2^20 = ")
PrintNumber(result)
PrintMessage("Expected: 1048576")

// Chain of operations approaching limits
result = Multiply(Multiply(Multiply(256, 256), 16), 4)
PrintMessage("256*256*16*4 = ")
PrintNumber(result)
PrintMessage("Expected: 4194304")

// ========== SECTION 21: COMPUTATIONALLY INTENSIVE ==========
PrintMessage("")
PrintMessage("[21] Computationally Intensive Tests")

// Calculate prime check using trial division (inefficient on purpose)
// Check if 97 is prime
n = 97
is_prime = 1
divisor = 2

// Check all divisors up to n/2 (inefficient but good stress test)
WhileLoop (divisor <= (n / 2)) {
    
        remainder = Modulo(n, divisor)
        IfCondition (remainder == 0) ThenBlock: {
            is_prime = 0
            BreakLoop
        }
        divisor = Add(divisor, 1)
    }

PrintMessage("Is 97 prime? ")
PrintNumber(is_prime)
PrintMessage("Expected: 1 (true)")

// Fibonacci calculation (iterative)
// Calculate 20th Fibonacci number
fib_n = 20
fib_prev = 0
fib_curr = 1
counter = 2

WhileLoop (counter <= fib_n) {
    
        fib_next = Add(fib_prev, fib_curr)
        fib_prev = fib_curr
        fib_curr = fib_next
        counter = Add(counter, 1)
    }

PrintMessage("Fibonacci(20) = ")
PrintNumber(fib_curr)
PrintMessage("Expected: 6765")

// Collatz sequence length for 27
// Count steps to reach 1
start_val = 27
steps = 0
current = start_val

WhileLoop (current != 1) {
    
        is_even = (Modulo(current, 2) == 0)
        IfCondition is_even ThenBlock: {
            current = Divide(current, 2)
        } ElseBlock: {
            current = Add(Multiply(current, 3), 1)
        }
        steps = Add(steps, 1)
    
        // Safety check to prevent infinite loop
        IfCondition (steps > 1000) ThenBlock: {
            PrintMessage("ERROR: Too many steps!")
            BreakLoop
    }

PrintMessage("Collatz(27) steps: ")
PrintNumber(steps)
PrintMessage("Expected: 111")

// GCD using Euclidean algorithm
a_gcd = 48
b_gcd = 18

WhileLoop (b_gcd != 0) {
    
        temp = b_gcd
        b_gcd = Modulo(a_gcd, b_gcd)
        a_gcd = temp
    }

PrintMessage("GCD(48, 18) = ")
PrintNumber(a_gcd)
PrintMessage("Expected: 6")

// ========== SECTION 22: ARITHMETIC RIGHT SHIFT BUG ==========
PrintMessage("")
PrintMessage("[22] Arithmetic Right Shift Bug")

// Test on small negative
neg_small = -8
result = (neg_small >> 1)
PrintMessage("-8 >> 1 = ")
PrintNumber(result)
PrintMessage("Expected: -4 (arithmetic) but getting huge positive (logical)")

// Multiple shifts on -64
neg_64 = -64
result1 = (neg_64 >> 1)
result2 = (neg_64 >> 2)
result3 = (neg_64 >> 3)
PrintMessage("-64 >> 1 = ")
PrintNumber(result1)
PrintMessage("Expected: -32")
PrintMessage("-64 >> 2 = ")
PrintNumber(result2)
PrintMessage("Expected: -16")
PrintMessage("-64 >> 3 = ")
PrintNumber(result3)
PrintMessage("Expected: -8")

// ========== PERFORMANCE SUMMARY ==========
PrintMessage("")
PrintMessage("=== PERFORMANCE SUMMARY ===")
DebugPerf_Report()

PrintMessage("")
PrintMessage("=== END COMPREHENSIVE TEST ===")
PrintMessage("Known issues:")
PrintMessage("- Right shift on negatives uses logical shift (not arithmetic)")
PrintMessage("- XOR with symbols (^) means Power, not XOR")
PrintMessage("- Use BitwiseXor() function for XOR operations")