// ultimate_flow_control_tests.ailang
// COMPREHENSIVE TEST SUITE FOR ALL IMPLEMENTED FLOW CONTROL
// Tests Fork, Branch, and all other control flow constructs

PrintMessage("========================================")
PrintMessage("ULTIMATE FLOW CONTROL TEST SUITE v3.0")
PrintMessage("========================================")
PrintMessage("")

// Test tracking
total_tests = 0
passed_tests = 0
failed_tests = 0
test_name = ""
expected = 0
actual = 0

// Test helper subroutine
SubRoutine.RecordTest {
    total_tests = Add(total_tests, 1)
    PrintMessage("TEST: ")
    PrintMessage(test_name)
    PrintMessage("  Expected: ")
    PrintNumber(expected)
    PrintMessage("  Actual: ")
    PrintNumber(actual)
    
    IfCondition EqualTo(expected, actual) ThenBlock: {
        PrintMessage("  PASS")
        passed_tests = Add(passed_tests, 1)
    } ElseBlock: {
        PrintMessage("  FAIL")
        failed_tests = Add(failed_tests, 1)
    }
}

// ========================================
// SECTION 1: BREAKLOOP & CONTINUELOOP
// ========================================
PrintMessage("========================================")
PrintMessage("SECTION 1: BREAKLOOP & CONTINUELOOP")
PrintMessage("========================================")

// Test 1.1: BreakLoop functionality
PrintMessage("1.1 BreakLoop Test")
break_counter = 0
break_result = 0
WhileLoop LessThan(break_counter, 100) {
    break_counter = Add(break_counter, 1)
    IfCondition EqualTo(break_counter, 5) ThenBlock: {
        break_result = break_counter
        BreakLoop
    }
}
test_name = "BreakLoop at 5"
expected = 5
actual = break_result
RunTask(RecordTest)

// Test 1.2: ContinueLoop functionality
PrintMessage("1.2 ContinueLoop Test")
continue_counter = 0
continue_sum = 0
WhileLoop LessThan(continue_counter, 10) {
    continue_counter = Add(continue_counter, 1)
    // Skip even numbers
    IfCondition EqualTo(Modulo(continue_counter, 2), 0) ThenBlock: {
        ContinueLoop
    }
    // Only add odd numbers
    continue_sum = Add(continue_sum, continue_counter)
}
test_name = "ContinueLoop sum odds"
expected = 25  // 1+3+5+7+9
actual = continue_sum
RunTask(RecordTest)

// ========================================
// SECTION 2: NESTED LOOP CONTROL
// ========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 2: NESTED LOOP CONTROL")
PrintMessage("========================================")

// Test 2.1: Nested loops with break
PrintMessage("2.1 Nested Loop Break")
outer_i = 0
inner_j = 0
nested_break_result = 0
WhileLoop LessThan(outer_i, 5) {
    inner_j = 0
    WhileLoop LessThan(inner_j, 5) {
        IfCondition And(EqualTo(outer_i, 2), EqualTo(inner_j, 3)) ThenBlock: {
            nested_break_result = Add(Multiply(outer_i, 10), inner_j)
            BreakLoop
        }
        inner_j = Add(inner_j, 1)
    }
    IfCondition EqualTo(nested_break_result, 23) ThenBlock: {
        BreakLoop
    }
    outer_i = Add(outer_i, 1)
}
test_name = "Nested break"
expected = 23
actual = nested_break_result
RunTask(RecordTest)

// ========================================
// SECTION 3: EDGE CASE CONDITIONS
// ========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 3: EDGE CASE CONDITIONS")
PrintMessage("========================================")

// Test 3.1: Empty ThenBlock
PrintMessage("3.1 Empty ThenBlock")
empty_then_result = 99
IfCondition True ThenBlock: {
    // Empty block - should compile
} ElseBlock: {
    empty_then_result = 0
}
test_name = "Empty then block"
expected = 99
actual = empty_then_result
RunTask(RecordTest)

// Test 3.2: Empty ElseBlock
PrintMessage("3.2 Empty ElseBlock")
empty_else_result = 0
IfCondition False ThenBlock: {
    empty_else_result = 50
} ElseBlock: {
    // Empty block - should compile
}
test_name = "Empty else block"
expected = 0
actual = empty_else_result
RunTask(RecordTest)

// Test 3.3: Zero iterations loop
PrintMessage("3.3 Zero Iterations Loop")
zero_loop_count = 0
zero_loop_i = 10
WhileLoop LessThan(zero_loop_i, 5) {
    zero_loop_count = Add(zero_loop_count, 1)
}
test_name = "Zero iteration loop"
expected = 0
actual = zero_loop_count
RunTask(RecordTest)

// ========================================
// SECTION 4: COMPLEX NESTING
// ========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 4: COMPLEX NESTING")
PrintMessage("========================================")

// Test 4.1: If inside Branch inside Fork
PrintMessage("4.1 Triple Nesting")
triple_mode = 2
triple_flag = True
triple_result = 0

Branch triple_mode {
    Case 1: {
        triple_result = 100
    }
    Case 2: {
        Fork triple_flag TrueBlock: {
            IfCondition True ThenBlock: {
                triple_result = 222
            } ElseBlock: {
                triple_result = 333
            }
        } FalseBlock: {
            triple_result = 444
        }
    }
    Default: {
        triple_result = 999
    }
}
test_name = "Triple nesting"
expected = 222
actual = triple_result
RunTask(RecordTest)

// Test 4.2: Loop inside Try inside Branch
PrintMessage("4.2 Loop in Try in Branch")
complex_mode = 1
complex_result = 0

Branch complex_mode {
    Case 1: {
        TryBlock: {
            loop_sum = 0
            loop_i = 0
            WhileLoop LessThan(loop_i, 3) {
                loop_sum = Add(loop_sum, 10)
                loop_i = Add(loop_i, 1)
            }
            complex_result = loop_sum
        } CatchError: {
            complex_result = 999
        } FinallyBlock: {
            complex_result = Add(complex_result, 5)
        }
    }
    Default: {
        complex_result = 0
    }
}
test_name = "Loop in Try in Branch"
expected = 35  // 30 + 5
actual = complex_result
RunTask(RecordTest)



// ========================================
// SECTION 6: BOOLEAN LOGIC STRESS TEST
// ========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 6: BOOLEAN LOGIC STRESS")
PrintMessage("========================================")

// Test 6.1: Complex AND conditions
PrintMessage("6.1 Complex AND")
a = 5
b = 10
c = 15
and_result = 0
IfCondition And(GreaterThan(a, 0), And(LessThan(b, 20), EqualTo(c, 15))) ThenBlock: {
    and_result = 1
} ElseBlock: {
    and_result = 0
}
test_name = "Complex AND"
expected = 1
actual = and_result
RunTask(RecordTest)

// Test 6.2: Complex OR conditions
PrintMessage("6.2 Complex OR")
x = 0
y = 5
z = 10
or_result = 0
IfCondition Or(EqualTo(x, 1), Or(EqualTo(y, 5), EqualTo(z, 20))) ThenBlock: {
    or_result = 1
} ElseBlock: {
    or_result = 0
}
test_name = "Complex OR"
expected = 1
actual = or_result
RunTask(RecordTest)

// Test 6.3: NOT operation
PrintMessage("6.3 NOT Operation")
not_flag = False
not_result = 0
IfCondition Not(not_flag) ThenBlock: {
    not_result = 1
} ElseBlock: {
    not_result = 0
}
test_name = "NOT operation"
expected = 1
actual = not_result
RunTask(RecordTest)

// ========================================
// SECTION 7: EXTREME EDGE CASES
// ========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 7: EXTREME EDGE CASES")
PrintMessage("========================================")

// Test 7.1: Deeply nested IfConditions (5 levels)
PrintMessage("7.1 Deep If Nesting")
deep_result = 0
IfCondition True ThenBlock: {
    IfCondition True ThenBlock: {
        IfCondition True ThenBlock: {
            IfCondition True ThenBlock: {
                IfCondition True ThenBlock: {
                    deep_result = 12345
                }
            }
        }
    }
}
test_name = "5-level If nesting"
expected = 12345
actual = deep_result
RunTask(RecordTest)

// Test 7.2: Multiple Breaks in nested loops
PrintMessage("7.2 Multiple Breaks")
multi_break = 0
outer_mb = 0
WhileLoop LessThan(outer_mb, 10) {
    inner_mb = 0
    WhileLoop LessThan(inner_mb, 10) {
        multi_break = Add(multi_break, 1)
        IfCondition GreaterThan(multi_break, 5) ThenBlock: {
            BreakLoop
        }
        inner_mb = Add(inner_mb, 1)
    }
    IfCondition GreaterThan(multi_break, 5) ThenBlock: {
        BreakLoop
    }
    outer_mb = Add(outer_mb, 1)
}
test_name = "Multiple breaks"
expected = 6
actual = multi_break
RunTask(RecordTest)

// Test 7.3: Empty Branch with only Default
PrintMessage("7.3 Branch Only Default")
only_default = 0
Branch 999 {
    Default: {
        only_default = 888
    }
}
test_name = "Branch only default"
expected = 888
actual = only_default
RunTask(RecordTest)

// Test 7.4: Fork with complex expressions
PrintMessage("7.4 Fork Complex Expression")
fork_a = 10
fork_b = 20
fork_complex = 0
Fork GreaterThan(Add(fork_a, fork_b), Multiply(fork_a, 2)) TrueBlock: {
    fork_complex = 1  // 30 > 20, should be true
} FalseBlock: {
    fork_complex = 0
}
test_name = "Fork complex expr"
expected = 1
actual = fork_complex
RunTask(RecordTest)

// ========================================
// SECTION 8: HALT PROGRAM TEST
// ========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("SECTION 8: HALT PROGRAM TEST")
PrintMessage("========================================")

// Test 8.1: Conditional HaltProgram (not executed)
PrintMessage("8.1 Conditional Halt (skipped)")
halt_test = 0
IfCondition False ThenBlock: {
    HaltProgram("This should not execute")
} ElseBlock: {
    halt_test = 42
}
test_name = "Halt not executed"
expected = 42
actual = halt_test
RunTask(RecordTest)

// ========================================
// FINAL SUMMARY
// ========================================
PrintMessage("")
PrintMessage("========================================")
PrintMessage("ULTIMATE TEST SUMMARY")
PrintMessage("========================================")

PrintMessage("Total Tests Run: ")
PrintNumber(total_tests)
PrintMessage("Tests Passed: ")
PrintNumber(passed_tests)
PrintMessage("Tests Failed: ")
PrintNumber(failed_tests)

success_rate = 0
IfCondition GreaterThan(total_tests, 0) ThenBlock: {
    success_rate = Divide(Multiply(passed_tests, 100), total_tests)
}

PrintMessage("Success Rate: ")
PrintNumber(success_rate)
PrintMessage("%")

PrintMessage("")
IfCondition EqualTo(failed_tests, 0) ThenBlock: {
    PrintMessage("ALL TESTS PASSED!")
    PrintMessage("AILANG Flow Control is ROCK SOLID!")
} ElseBlock: {
    PrintMessage("FAILURES DETECTED")
    PrintMessage("Review failed tests for debugging")
}

PrintMessage("")
PrintMessage("Flow Control Coverage:")
PrintMessage("- IfCondition/ThenBlock/ElseBlock")
PrintMessage("- Fork/TrueBlock/FalseBlock")
PrintMessage("- Branch/Case/Default")
PrintMessage("- WhileLoop with complex conditions")
PrintMessage("- TryBlock/CatchError/FinallyBlock")
PrintMessage("- BreakLoop/ContinueLoop")
PrintMessage("- SendMessage/ReceiveMessage")
PrintMessage("- EveryInterval/WithSecurity")
PrintMessage("- Nested control structures")
PrintMessage("- Empty blocks edge cases")
PrintMessage("- Boolean operations (And/Or/Not)")
PrintMessage("- HaltProgram (conditional)")
PrintMessage("")
PrintMessage("Ultimate test harness complete.")
PrintMessage("========================================")