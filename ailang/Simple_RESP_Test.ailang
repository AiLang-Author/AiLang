// Test_RESP_Library.ailang
// Simple test for RESP library functions - just call and print

LibraryImport.Library.RESP
LibraryImport.Library.XArrays

// Variables
result = 0
arr = 0
str_result = 0
i = 0

// Test function to isolate array issues
Function.Test.TestEmptyArray {
    Output: Integer
    Body: {
        PrintMessage("Creating empty array...\n")
        arr = ArrayCreate(0)
        PrintMessage("Array created\n")
        
        PrintMessage("Calling RESP.Array...\n")
        result = RESP.Array(arr)
        PrintMessage("RESP.Array returned\n")
        
        PrintMessage("Result: ")
        PrintMessage(result)
        PrintMessage("\n")
        
        ArrayDestroy(arr)
        Deallocate(result, 0)
        
        ReturnValue(1)
    }
}

Function.Test.TestSingleElement {
    Output: Integer
    Body: {
        PrintMessage("Creating single element array...\n")
        arr = ArrayCreate(1)
        ArraySet(arr, 0, "PING")
        
        PrintMessage("Calling RESP.Array...\n")
        result = RESP.Array(arr)
        PrintMessage("RESP.Array returned\n")
        
        PrintMessage("Result: ")
        PrintMessage(result)
        PrintMessage("\n")
        
        ArrayDestroy(arr)
        Deallocate(result, 0)
        
        ReturnValue(1)
    }
}

Function.Test.TestMultipleElements {
    Output: Integer
    Body: {
        PrintMessage("Creating 3 element array...\n")
        arr = ArrayCreate(3)
        ArraySet(arr, 0, "SET")
        ArraySet(arr, 1, "key")
        ArraySet(arr, 2, "value")
        
        PrintMessage("Calling RESP.Array...\n")
        result = RESP.Array(arr)
        PrintMessage("RESP.Array returned\n")
        
        PrintMessage("Result: ")
        PrintMessage(result)
        PrintMessage("\n")
        
        ArrayDestroy(arr)
        Deallocate(result, 0)
        
        ReturnValue(1)
    }
}

SubRoutine.Main {
    PrintMessage("=== Testing RESP Library ===\n")
    
    // Test SimpleString
    PrintMessage("\nTesting SimpleString('OK'):\n")
    result = RESP.SimpleString("OK")
    PrintMessage(result)
    PrintMessage("\n")
    Deallocate(result, 0)
    
    // Test BulkString
    PrintMessage("\nTesting BulkString('hello'):\n")
    result = RESP.BulkString("hello")
    PrintMessage(result)
    PrintMessage("\n")
    Deallocate(result, 0)
    
    // Test BulkString null
    PrintMessage("\nTesting BulkString(null):\n")
    result = RESP.BulkString(0)
    PrintMessage(result)
    PrintMessage("\n")
    Deallocate(result, 0)
    
    // Test Integer
    PrintMessage("\nTesting Integer(42):\n")
    result = RESP.Integer(42)
    PrintMessage(result)
    PrintMessage("\n")
    Deallocate(result, 0)
    
    // Test Integer negative
    PrintMessage("\nTesting Integer(-123):\n")
    result = RESP.Integer(-123)
    PrintMessage(result)
    PrintMessage("\n")
    Deallocate(result, 0)
    
    // Test Error
    PrintMessage("\nTesting Error('unknown command'):\n")
    result = RESP.Error("unknown command")
    PrintMessage(result)
    PrintMessage("\n")
    Deallocate(result, 0)
    
    // Test IntToString
    PrintMessage("\nTesting IntToString(12345):\n")
    str_result = RESP.IntToString(12345)
    PrintMessage(str_result)
    PrintMessage("\n")
    Deallocate(str_result, 0)
    
    PrintMessage("\nTesting IntToString(-999):\n")
    str_result = RESP.IntToString(-999)
    PrintMessage(str_result)
    PrintMessage("\n")
    Deallocate(str_result, 0)
    
    // Test arrays separately with functions
    PrintMessage("\n=== Testing Arrays ===\n")
    
    PrintMessage("\n--- Test 1: Empty Array ---\n")
    i = Test.TestEmptyArray()
    
    PrintMessage("\n--- Test 2: Single Element ---\n")
    i = Test.TestSingleElement()
    
    PrintMessage("\n--- Test 3: Multiple Elements ---\n")
    i = Test.TestMultipleElements()
    
    PrintMessage("\n=== Test Complete ===\n")
}

RunTask(Main)