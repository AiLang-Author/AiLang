// test_mmap_overhead.ailang
// Demonstrate mmap syscall overhead

PrintMessage("Memory Allocation Overhead Test")
PrintMessage("================================")

// Test 1: Time just the loop overhead (baseline)
PrintMessage("")
PrintMessage("Test 1: Empty loop (baseline)")
DebugPerf.Start("empty_loop")
i = 0
WhileLoop LessThan(i, 10) {
    
        i = Add(i, 1)
    }
    }
DebugPerf.End("empty_loop")

// Test 2: Loop with string concatenation (mmap each time)
PrintMessage("")
PrintMessage("Test 2: String concatenation (10x mmap)")
DebugPerf.Start("concat_loop")
j = 0
str = "A"
WhileLoop LessThan(j, 10) {
    
        str = StringConcat(str, "B")
        j = Add(j, 1)
    }
    }
DebugPerf.End("concat_loop")
PrintMessage("Result:")
PrintMessage(str)

// Test 3: Arithmetic operations for comparison
PrintMessage("")
PrintMessage("Test 3: Arithmetic operations (no syscalls)")
DebugPerf.Start("arithmetic_loop")
k = 0
sum = 0
WhileLoop LessThan(k, 10) {
    
        sum = Add(sum, k)
        k = Add(k, 1)
    }
    }
DebugPerf.End("arithmetic_loop")
PrintMessage("Sum:")
PrintNumber(sum)

// Analysis
PrintMessage("")
PrintMessage("Analysis:")
PrintMessage("- Empty loop: baseline overhead")
PrintMessage("- Concat loop: includes 10 mmap syscalls")
PrintMessage("- Arithmetic: pure computation, no syscalls")
PrintMessage("")
PrintMessage("The concat loop should be ~100x slower due to mmap!")

PrintMessage("")
PrintMessage("Test complete!")