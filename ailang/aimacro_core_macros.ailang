// aimacro_core_macros.ailang
// The 20 most common macros that every Python developer expects
// These provide zero-import functionality for AIMacro programs

// ============================================================================
// MACRO CATEGORY 1: BASIC I/O (Most critical for adoption)
// ============================================================================

// 1. @print - Universal output (replaces print())
MacroBlock.IO {
    Macro.print(value) = {
        // Auto-detect type and call appropriate AILANG function
        IfCondition IsString(value) ThenBlock {
            PrintMessage(value)
        } ElseIfCondition IsNumber(value) ThenBlock {
            PrintNumber(value)
        } ElseBlock {
            PrintMessage(ToString(value))
        }
    }
    
    // Enhanced print with formatting
    Macro.printf(format, ...args) = {
        formatted = FormatString(format, args)
        PrintMessage(formatted)
    }
}

// 2. @input - Get user input (replaces input())
MacroBlock.IO {
    Macro.input(prompt) = {
        IfCondition NotEqual(prompt, 0) ThenBlock {
            PrintMessage(prompt)
        }
        buffer = Allocate(1024)
        InputRead(buffer, 1024)
        result = ToString(buffer)
        Deallocate(buffer, 1024)
        ReturnValue(result)
    }
}

// 3. @open - File operations (replaces open())
MacroBlock.File {
    Macro.open(filename, mode) = {
        IfCondition StringEqual(mode, "r") ThenBlock {
            ReturnValue(FileOpen(filename, 0))  // Read mode
        } ElseIfCondition StringEqual(mode, "w") ThenBlock {
            ReturnValue(FileOpen(filename, 1))  // Write mode
        } ElseIfCondition StringEqual(mode, "a") ThenBlock {
            ReturnValue(FileOpen(filename, 2))  // Append mode
        } ElseBlock {
            ReturnValue(FileOpen(filename, 0))  // Default to read
        }
    }
    
    Macro.read(file_handle) = {
        ReturnValue(FileReadAll(file_handle))
    }
    
    Macro.write(file_handle, content) = {
        ReturnValue(FileWrite(file_handle, content))
    }
    
    Macro.close(file_handle) = {
        FileClose(file_handle)
    }
}

// ============================================================================
// MACRO CATEGORY 2: COLLECTIONS & DATA (Python core functionality)
// ============================================================================

// 4. @len - Universal length function (replaces len())
MacroBlock.Collections {
    Macro.len(collection) = {
        IfCondition IsArray(collection) ThenBlock {
            ReturnValue(ArrayLength(collection))
        } ElseIfCondition IsString(collection) ThenBlock {
            ReturnValue(StringLength(collection))
        } ElseIfCondition IsHash(collection) ThenBlock {
            ReturnValue(HashSize(collection))
        } ElseBlock {
            ReturnValue(0)
        }
    }
}

// 5. @range - Create sequences (replaces range())
MacroBlock.Collections {
    Macro.range(start, stop, step) = {
        IfCondition EqualTo(stop, 0) ThenBlock {
            // range(n) -> 0 to n-1
            stop = start
            start = 0
            step = 1
        }
        IfCondition EqualTo(step, 0) ThenBlock {
            step = 1
        }
        
        result = ArrayCreate()
        current = start
        WhileLoop LessThan(current, stop) {
            ArrayAppend(result, current)
            current = Add(current, step)
        }
        ReturnValue(result)
    }
}

// 6. @enumerate - Index-value pairs (replaces enumerate())
MacroBlock.Collections {
    Macro.enumerate(iterable) = {
        result = ArrayCreate()
        i = 0
        WhileLoop LessThan(i, ArrayLength(iterable)) {
            pair = ArrayCreate()
            ArrayAppend(pair, i)
            ArrayAppend(pair, ArrayGet(iterable, i))
            ArrayAppend(result, pair)
            i = Add(i, 1)
        }
        ReturnValue(result)
    }
}

// 7. @zip - Combine iterables (replaces zip())
MacroBlock.Collections {
    Macro.zip(array1, array2) = {
        result = ArrayCreate()
        min_len = Min(ArrayLength(array1), ArrayLength(array2))
        i = 0
        WhileLoop LessThan(i, min_len) {
            pair = ArrayCreate()
            ArrayAppend(pair, ArrayGet(array1, i))
            ArrayAppend(pair, ArrayGet(array2, i))
            ArrayAppend(result, pair)
            i = Add(i, 1)
        }
        ReturnValue(result)
    }
}

// ============================================================================
// MACRO CATEGORY 3: STRING OPERATIONS (Critical for text processing)
// ============================================================================

// 8. @str - String conversion (replaces str())
MacroBlock.String {
    Macro.str(value) = {
        IfCondition IsNumber(value) ThenBlock {
            ReturnValue(NumberToString(value))
        } ElseIfCondition IsString(value) ThenBlock {
            ReturnValue(value)
        } ElseBlock {
            ReturnValue(ToString(value))
        }
    }
    
    // String manipulation shortcuts
    Macro.split(string, delimiter) = {
        ReturnValue(StringSplit(string, delimiter))
    }
    
    Macro.join(delimiter, array) = {
        ReturnValue(StringJoin(array, delimiter))
    }
    
    Macro.strip(string) = {
        ReturnValue(StringTrim(string))
    }
    
    Macro.upper(string) = {
        ReturnValue(StringToUpper(string))
    }
    
    Macro.lower(string) = {
        ReturnValue(StringToLower(string))
    }
}

// ============================================================================
// MACRO CATEGORY 4: MATH & NUMBERS (Essential calculations)
// ============================================================================

// 9. @int - Integer conversion (replaces int())
MacroBlock.Math {
    Macro.int(value) = {
        IfCondition IsString(value) ThenBlock {
            ReturnValue(StringToNumber(value))
        } ElseIfCondition IsNumber(value) ThenBlock {
            ReturnValue(Floor(value))
        } ElseBlock {
            ReturnValue(0)
        }
    }
    
    Macro.float(value) = {
        IfCondition IsString(value) ThenBlock {
            ReturnValue(StringToFloat(value))
        } ElseBlock {
            ReturnValue(ToFloat(value))
        }
    }
    
    // Common math functions
    Macro.abs(value) = {
        IfCondition LessThan(value, 0) ThenBlock {
            ReturnValue(Multiply(value, -1))
        } ElseBlock {
            ReturnValue(value)
        }
    }
    
    Macro.max(array) = {
        IfCondition EqualTo(ArrayLength(array), 0) ThenBlock {
            ReturnValue(0)
        }
        
        max_val = ArrayGet(array, 0)
        i = 1
        WhileLoop LessThan(i, ArrayLength(array)) {
            current = ArrayGet(array, i)
            IfCondition GreaterThan(current, max_val) ThenBlock {
                max_val = current
            }
            i = Add(i, 1)
        }
        ReturnValue(max_val)
    }
    
    Macro.min(array) = {
        IfCondition EqualTo(ArrayLength(array), 0) ThenBlock {
            ReturnValue(0)
        }
        
        min_val = ArrayGet(array, 0)
        i = 1
        WhileLoop LessThan(i, ArrayLength(array)) {
            current = ArrayGet(array, i)
            IfCondition LessThan(current, min_val) ThenBlock {
                min_val = current
            }
            i = Add(i, 1)
        }
        ReturnValue(min_val)
    }
    
    Macro.sum(array) = {
        total = 0
        i = 0
        WhileLoop LessThan(i, ArrayLength(array)) {
            total = Add(total, ArrayGet(array, i))
            i = Add(i, 1)
        }
        ReturnValue(total)
    }
}

// ============================================================================
// MACRO CATEGORY 5: SYSTEM & TIME (OS interaction)
// ============================================================================

// 10. @sleep - Pause execution (replaces time.sleep())
MacroBlock.Time {
    Macro.sleep(milliseconds) = {
        TimeSleep(milliseconds)
    }
    
    Macro.time() = {
        ReturnValue(TimeNow())
    }
    
    Macro.timestamp() = {
        ReturnValue(TimeStamp())
    }
}

// 11. @exit - Program termination (replaces sys.exit())
MacroBlock.System {
    Macro.exit(code) = {
        IfCondition EqualTo(code, 0) ThenBlock {
            Exit(0)
        } ElseBlock {
            Exit(code)
        }
    }
    
    // System information
    Macro.argv() = {
        ReturnValue(GetCommandLineArgs())
    }
    
    Macro.env(var_name) = {
        ReturnValue(GetEnvironmentVariable(var_name))
    }
}

// ============================================================================
// MACRO CATEGORY 6: TYPE CHECKING (Python duck typing support)
// ============================================================================

// 12. Type checking macros (replaces isinstance(), type())
MacroBlock.Types {
    Macro.isinstance(value, type_name) = {
        IfCondition StringEqual(type_name, "str") ThenBlock {
            ReturnValue(IsString(value))
        } ElseIfCondition StringEqual(type_name, "int") ThenBlock {
            ReturnValue(IsNumber(value))
        } ElseIfCondition StringEqual(type_name, "list") ThenBlock {
            ReturnValue(IsArray(value))
        } ElseIfCondition StringEqual(type_name, "dict") ThenBlock {
            ReturnValue(IsHash(value))
        } ElseBlock {
            ReturnValue(0)
        }
    }
    
    Macro.type(value) = {
        IfCondition IsString(value) ThenBlock {
            ReturnValue("str")
        } ElseIfCondition IsNumber(value) ThenBlock {
            ReturnValue("int")
        } ElseIfCondition IsArray(value) ThenBlock {
            ReturnValue("list")
        } ElseIfCondition IsHash(value) ThenBlock {
            ReturnValue("dict")
        } ElseBlock {
            ReturnValue("unknown")
        }
    }
}

// ============================================================================
// MACRO CATEGORY 7: SORTING & FILTERING (Data processing)
// ============================================================================

// 13. @sorted - Sort arrays (replaces sorted())
MacroBlock.Collections {
    Macro.sorted(array) = {
        // Simple bubble sort for now - can optimize later
        result = ArrayCopy(array)
        n = ArrayLength(result)
        
        i = 0
        WhileLoop LessThan(i, n) {
            j = 0
            WhileLoop LessThan(j, Subtract(n, 1)) {
                IfCondition GreaterThan(ArrayGet(result, j), ArrayGet(result, Add(j, 1))) ThenBlock {
                    // Swap elements
                    temp = ArrayGet(result, j)
                    ArraySet(result, j, ArrayGet(result, Add(j, 1)))
                    ArraySet(result, Add(j, 1), temp)
                }
                j = Add(j, 1)
            }
            i = Add(i, 1)
        }
        
        ReturnValue(result)
    }
    
    // 14. @filter - Filter elements (replaces filter())
    Macro.filter(predicate_func, array) = {
        result = ArrayCreate()
        i = 0
        WhileLoop LessThan(i, ArrayLength(array)) {
            element = ArrayGet(array, i)
            IfCondition Apply(predicate_func, element) ThenBlock {
                ArrayAppend(result, element)
            }
            i = Add(i, 1)
        }
        ReturnValue(result)
    }
    
    // 15. @map - Transform elements (replaces map())
    Macro.map(transform_func, array) = {
        result = ArrayCreate()
        i = 0
        WhileLoop LessThan(i, ArrayLength(array)) {
            element = ArrayGet(array, i)
            transformed = Apply(transform_func, element)
            ArrayAppend(result, transformed)
            i = Add(i, 1)
        }
        ReturnValue(result)
    }
}

// ============================================================================
// MACRO CATEGORY 8: NETWORK & HTTP (Modern app essentials)
// ============================================================================

// 16. @http - HTTP requests (replaces requests library)
MacroBlock.HTTP {
    Macro.get(url) = {
        socket = SocketCreate()
        host = ExtractHost(url)
        path = ExtractPath(url)
        
        SocketConnect(socket, host, 80)
        
        request = StringConcat("GET ", path)
        request = StringConcat(request, " HTTP/1.1\r\nHost: ")
        request = StringConcat(request, host)
        request = StringConcat(request, "\r\nConnection: close\r\n\r\n")
        
        SocketWrite(socket, request, StringLength(request))
        
        buffer = Allocate(4096)
        response = SocketRead(socket, buffer, 4096)
        result = ToString(buffer)
        
        SocketClose(socket)
        Deallocate(buffer, 4096)
        
        ReturnValue(result)
    }
    
    Macro.post(url, data) = {
        // Similar to GET but with POST method and data
        socket = SocketCreate()
        host = ExtractHost(url)
        path = ExtractPath(url)
        
        SocketConnect(socket, host, 80)
        
        request = StringConcat("POST ", path)
        request = StringConcat(request, " HTTP/1.1\r\nHost: ")
        request = StringConcat(request, host)
        request = StringConcat(request, "\r\nContent-Length: ")
        request = StringConcat(request, StringLength(data))
        request = StringConcat(request, "\r\n\r\n")
        request = StringConcat(request, data)
        
        SocketWrite(socket, request, StringLength(request))
        
        buffer = Allocate(4096)
        response = SocketRead(socket, buffer, 4096)
        result = ToString(buffer)
        
        SocketClose(socket)
        Deallocate(buffer, 4096)
        
        ReturnValue(result)
    }
}

// ============================================================================
// MACRO CATEGORY 9: JSON & DATA FORMATS (API integration)
// ============================================================================

// 17. @json - JSON operations (replaces json library)
MacroBlock.JSON {
    Macro.loads(json_string) = {
        ReturnValue(JsonParse(json_string))
    }
    
    Macro.dumps(data) = {
        ReturnValue(JsonStringify(data))
    }
    
    Macro.load(file_handle) = {
        content = FileReadAll(file_handle)
        ReturnValue(JsonParse(content))
    }
    
    Macro.dump(data, file_handle) = {
        json_string = JsonStringify(data)
        FileWrite(file_handle, json_string)
    }
}

// ============================================================================
// MACRO CATEGORY 10: RANDOM & CRYPTO (Security & games)
// ============================================================================

// 18. @random - Random number generation (replaces random library)
MacroBlock.Random {
    Macro.randint(min_val, max_val) = {
        range_size = Subtract(max_val, min_val)
        random_val = Modulo(RandomNumber(), Add(range_size, 1))
        ReturnValue(Add(min_val, random_val))
    }
    
    Macro.choice(array) = {
        IfCondition EqualTo(ArrayLength(array), 0) ThenBlock {
            ReturnValue(0)
        }
        
        index = Modulo(RandomNumber(), ArrayLength(array))
        ReturnValue(ArrayGet(array, index))
    }
    
    Macro.shuffle(array) = {
        n = ArrayLength(array)
        i = 0
        WhileLoop LessThan(i, n) {
            j = Modulo(RandomNumber(), n)
            // Swap elements
            temp = ArrayGet(array, i)
            ArraySet(array, i, ArrayGet(array, j))
            ArraySet(array, j, temp)
            i = Add(i, 1)
        }
        ReturnValue(array)
    }
}

// 19. @hash - Hashing functions (replaces hashlib)
MacroBlock.Crypto {
    Macro.md5(data) = {
        ReturnValue(HashMD5(data))
    }
    
    Macro.sha256(data) = {
        ReturnValue(HashSHA256(data))
    }
    
    Macro.hash(data) = {
        // Simple hash function for basic use
        ReturnValue(SimpleHash(data))
    }
}

// ============================================================================
// MACRO CATEGORY 11: ADVANCED COLLECTIONS (Power user features)
// ============================================================================

// 20. @dict - Dictionary operations (replaces dict methods)
MacroBlock.Dict {
    Macro.keys(dictionary) = {
        ReturnValue(HashKeys(dictionary))
    }
    
    Macro.values(dictionary) = {
        ReturnValue(HashValues(dictionary))
    }
    
    Macro.items(dictionary) = {
        keys = HashKeys(dictionary)
        result = ArrayCreate()
        i = 0
        WhileLoop LessThan(i, ArrayLength(keys)) {
            key = ArrayGet(keys, i)
            value = HashGet(dictionary, key)
            pair = ArrayCreate()
            ArrayAppend(pair, key)
            ArrayAppend(pair, value)
            ArrayAppend(result, pair)
            i = Add(i, 1)
        }
        ReturnValue(result)
    }
    
    Macro.get(dictionary, key, default_value) = {
        IfCondition HashExists(dictionary, key) ThenBlock {
            ReturnValue(HashGet(dictionary, key))
        } ElseBlock {
            ReturnValue(default_value)
        }
    }
}

// ============================================================================
// USAGE EXAMPLES
// ============================================================================

SubRoutine.MacroExamples {
    PrintMessage("AIMacro Core Macros - Usage Examples")
    PrintMessage("====================================")
    
    // Basic I/O
    name = @input("Enter your name: ")
    @print(f"Hello, {name}!")
    
    // Collections
    numbers = @range(1, 10)
    @print(f"Numbers: {numbers}")
    @print(f"Length: {@len(numbers)}")
    @print(f"Sum: {@sum(numbers)}")
    
    // String operations
    text = "Hello World"
    @print(@upper(text))
    @print(@split(text, " "))
    
    // File I/O
    file = @open("test.txt", "w")
    @write(file, "Hello from AIMacro!")
    @close(file)
    
    // HTTP request
    response = @http.get("http://httpbin.org/get")
    @print(response)
    
    // JSON
    data = {"name": "AIMacro", "version": "1.0"}
    json_str = @json.dumps(data)
    @print(json_str)
    
    // Random
    random_num = @random.randint(1, 100)
    @print(f"Random number: {random_num}")
    
    // Time
    @print("Sleeping for 1 second...")
    @sleep(1000)
    @print("Done!")
}