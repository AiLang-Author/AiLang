// redis_server_v2.ailang
// Tests memory operations with various data types and patterns
// Expected failures will help identify the exact nature of bugs

PrintMessage("==============================================")
PrintMessage("StoreValue/Dereference Test Suite")
PrintMessage("==============================================")

// Test tracking
test_number = 0
passed = 0
failed = 0

// Helper to report results
SubRoutine.ReportTest {
    // Uses: test_name, expected, actual
    test_number = Add(test_number, 1)
    PrintMessage("")
    PrintMessage("Test ")
    PrintNumber(test_number)
    PrintMessage(": ")
    PrintMessage(test_name)
    
    IfCondition EqualTo(expected, actual) ThenBlock: {
        PrintMessage("  ✓ PASS")
        passed = Add(passed, 1)
    } ElseBlock: {
        PrintMessage("  ✗ FAIL")
        PrintMessage("    Expected: ")
        PrintNumber(expected)
        PrintMessage("    Got: ")
        PrintNumber(actual)
        failed = Add(failed, 1)
    }
}

// ============================================
// SECTION 1: Basic Store and Dereference
// ============================================
PrintMessage("")
PrintMessage("SECTION 1: Basic Store/Dereference")
PrintMessage("--------------------------------------------")

// Test 1.1: Single value store and retrieve
buffer1 = Allocate(8)
StoreValue(buffer1, 42)
value1 = Dereference(buffer1)

test_name = "Single 8-byte value"
expected = 42
actual = value1
RunTask(ReportTest)

Deallocate(buffer1, 8)

// Test 1.2: Zero value
buffer2 = Allocate(8)
StoreValue(buffer2, 0)
value2 = Dereference(buffer2)

test_name = "Zero value"
expected = 0
actual = value2
RunTask(ReportTest)

Deallocate(buffer2, 8)

// Test 1.3: Large value
buffer3 = Allocate(8)
StoreValue(buffer3, 1234567890)
value3 = Dereference(buffer3)

test_name = "Large value"
expected = 1234567890
actual = value3
RunTask(ReportTest)

Deallocate(buffer3, 8)

// ============================================
// SECTION 2: Byte Values (String Operations)
// This is where bugs likely occur
// ============================================
PrintMessage("")
PrintMessage("SECTION 2: Byte Values for Strings")
PrintMessage("--------------------------------------------")

// Test 2.1: Store single byte values
buffer4 = Allocate(16)
StoreByte(buffer4, 72)  // 'H'
byte1 = LoadByte(buffer4)

test_name = "Single byte 'H' (72)"
expected = 72
actual = byte1
RunTask(ReportTest)

// Test 2.2: Store adjacent bytes
StoreByte(Add(buffer4, 1), 101)  // 'e'
byte2 = LoadByte(Add(buffer4, 1))

test_name = "Adjacent byte 'e' (101)"
expected = 101
actual = byte2
RunTask(ReportTest)

// Test 2.3: Verify first byte unchanged
byte1_check = LoadByte(buffer4)

test_name = "First byte still 'H' (72)"
expected = 72
actual = byte1_check
RunTask(ReportTest)

Deallocate(buffer4, 16)

// ============================================
// SECTION 3: Offset Addressing
// Critical for array/string operations
// ============================================
PrintMessage("")
PrintMessage("SECTION 3: Offset Addressing")
PrintMessage("--------------------------------------------")

// Test 3.1: Store at different offsets
buffer5 = Allocate(64)

// Store values at 8-byte intervals
StoreValue(buffer5, 100)
StoreValue(Add(buffer5, 8), 200)
StoreValue(Add(buffer5, 16), 300)
StoreValue(Add(buffer5, 24), 400)

// Read back
v1 = Dereference(buffer5)
test_name = "Offset 0 value"
expected = 100
actual = v1
RunTask(ReportTest)

v2 = Dereference(Add(buffer5, 8))
test_name = "Offset 8 value"
expected = 200
actual = v2
RunTask(ReportTest)

v3 = Dereference(Add(buffer5, 16))
test_name = "Offset 16 value"
expected = 300
actual = v3
RunTask(ReportTest)

v4 = Dereference(Add(buffer5, 24))
test_name = "Offset 24 value"
expected = 400
actual = v4
RunTask(ReportTest)

Deallocate(buffer5, 64)

// ============================================
// SECTION 4: Mixed Byte and Word Operations
// Tests if byte/qword confusion exists
// ============================================
PrintMessage("")
PrintMessage("SECTION 4: Mixed Byte/Word Operations")
PrintMessage("--------------------------------------------")

buffer6 = Allocate(32)

// Store bytes for "Hi" then a large number
StoreByte(buffer6, 72)         // 'H'
StoreByte(Add(buffer6, 1), 105) // 'i'
StoreValue(Add(buffer6, 8), 999999) // Large number at offset 8

// Check if byte values survived
check1 = LoadByte(buffer6)
test_name = "Byte after mixed ops"
expected = 72
actual = check1
RunTask(ReportTest)

check2 = Dereference(Add(buffer6, 8))
test_name = "Large value at offset 8"
expected = 999999
actual = check2
RunTask(ReportTest)

Deallocate(buffer6, 32)

// ============================================
// SECTION 5: Array Simulation
// Common pattern that may fail
// ============================================
PrintMessage("")
PrintMessage("SECTION 5: Array Pattern")
PrintMessage("--------------------------------------------")

array_size = 10
array = Allocate(Multiply(array_size, 8))

// Store array values
i = 0
WhileLoop LessThan(i, 5) {
    offset = Multiply(i, 8)
    value = Multiply(i, 100)
    StoreValue(Add(array, offset), value)
    i = Add(i, 1)
}

// Read back specific elements
elem0 = Dereference(array)
test_name = "Array[0]"
expected = 0
actual = elem0
RunTask(ReportTest)

elem2 = Dereference(Add(array, 16))
test_name = "Array[2]"
expected = 200
actual = elem2
RunTask(ReportTest)

elem4 = Dereference(Add(array, 32))
test_name = "Array[4]"
expected = 400
actual = elem4
RunTask(ReportTest)

Deallocate(array, Multiply(array_size, 8))

// ============================================
// SECTION 6: String Buffer Pattern
// The most likely failure case
// ============================================
PrintMessage("")
PrintMessage("SECTION 6: String Buffer Simulation")
PrintMessage("--------------------------------------------")

// Try to store "Hello" byte by byte
str_buffer = Allocate(16)
StoreByte(str_buffer, 72)        // H
StoreByte(Add(str_buffer, 1), 101) // e
StoreByte(Add(str_buffer, 2), 108) // l
StoreByte(Add(str_buffer, 3), 108) // l
StoreByte(Add(str_buffer, 4), 111) // o
StoreByte(Add(str_buffer, 5), 0)   // null terminator

// Read back each character
c1 = LoadByte(str_buffer)
c2 = LoadByte(Add(str_buffer, 1))
c3 = LoadByte(Add(str_buffer, 2))
c4 = LoadByte(Add(str_buffer, 3))
c5 = LoadByte(Add(str_buffer, 4))
c6 = LoadByte(Add(str_buffer, 5))

test_name = "String char 'H'"
expected = 72
actual = c1
RunTask(ReportTest)

test_name = "String char 'e'"
expected = 101
actual = c2
RunTask(ReportTest)

test_name = "String char 'o'"
expected = 111
actual = c5
RunTask(ReportTest)

test_name = "String null terminator"
expected = 0
actual = c6
RunTask(ReportTest)

Deallocate(str_buffer, 16)





// ============================================
// SECTION 7: Overwrite Test
// Tests if values properly overwrite
// ============================================
PrintMessage("")
PrintMessage("SECTION 7: Overwrite Test")
PrintMessage("--------------------------------------------")

buffer7 = Allocate(8)
StoreValue(buffer7, 111)
first_val = Dereference(buffer7)

test_name = "Initial value"
expected = 111
actual = first_val
RunTask(ReportTest)

// Overwrite with new value
StoreValue(buffer7, 222)
second_val = Dereference(buffer7)

test_name = "Overwritten value"
expected = 222
actual = second_val
RunTask(ReportTest)

Deallocate(buffer7, 8)

// ============================================
// SUMMARY
// ============================================
PrintMessage("")
PrintMessage("==============================================")
PrintMessage("TEST SUMMARY")
PrintMessage("==============================================")
PrintMessage("Total Tests: ")
PrintNumber(test_number)
PrintMessage("Passed: ")
PrintNumber(passed)
PrintMessage("Failed: ")
PrintNumber(failed)

IfCondition EqualTo(failed, 0) ThenBlock: {
    PrintMessage("")
    PrintMessage("✅ ALL TESTS PASSED!")
    PrintMessage("StoreValue/Dereference working correctly")
} ElseBlock: {
    PrintMessage("")
    PrintMessage("❌ FAILURES DETECTED")
    PrintMessage("Check sections with failures above")
    PrintMessage("")
    PrintMessage("Common issues to check:")
    PrintMessage("1. Byte vs QWord storage confusion")
    PrintMessage("2. Offset calculation errors")
    PrintMessage("3. Adjacent byte corruption")
    PrintMessage("4. Register preservation issues")
}