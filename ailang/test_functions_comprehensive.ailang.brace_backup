// test_functions_comprehensive.ailang
// Comprehensive test of user-defined functions

PrintMessage("Comprehensive Function Test")
PrintMessage("===========================")

// Test 1: Simple function with no parameters
Function.Basic.GetMagicNumber {
    Output: Integer
    Body: {
        ReturnValue(1337)
    }
}

PrintMessage("Test 1: No params function")
magic = Basic.GetMagicNumber()
PrintMessage("Magic number:")
PrintNumber(magic)

// Test 2: Function with single parameter
Function.Math.Square {
    Input: x: Integer
    Output: Integer
    Body: {
        result = Multiply(x, x)
        ReturnValue(result)
    }
}

PrintMessage("Test 2: Single param")
squared = Math.Square(7)
PrintMessage("7 squared:")
PrintNumber(squared)

// Test 3: Function with multiple parameters
Function.Math.Add3 {
    Input: a: Integer
    Input: b: Integer
    Input: c: Integer
    Output: Integer
    Body: {
        sum1 = Add(a, b)
        sum2 = Add(sum1, c)
        ReturnValue(sum2)
    }
}

PrintMessage("Test 3: Multiple params")
sum3 = Math.Add3(10, 20, 30)
PrintMessage("10 + 20 + 30 =")
PrintNumber(sum3)

// Helper function for doubling
Function.Math.Double {
    Input: x: Integer
    Output: Integer
    Body: {
        result = Multiply(x, 2)
        ReturnValue(result)
    }
}


// Test 4: Function calling another function
Function.Math.DoubleSquare {
    Input: n: Integer
    Output: Integer
    Body: {
        // First square it
        sq = Math.Square(n)
        // Then double it
        result = Math.Double(sq)
        ReturnValue(result)
    }
}

PrintMessage("Test 4: Function composition")
ds = Math.DoubleSquare(5)
PrintMessage("DoubleSquare(5) = Square(5) * 2 =")
PrintNumber(ds)

   
Function.Logic.Max {
    Input: a: Integer
    Input: b: Integer
    Output: Integer
    Body: {
        is_greater = GreaterThan(a, b)
        IfCondition is_greater ThenBlock: {
            ReturnValue(a)
        }
        ReturnValue(b)
    }
}

PrintMessage("Test 5: Conditional logic")
max1 = Logic.Max(15, 25)
PrintMessage("Max(15, 25) =")
PrintNumber(max1)
max2 = Logic.Max(42, 17)
PrintMessage("Max(42, 17) =")
PrintNumber(max2)



// Test 6: Function returning array
Function.Arrays.Make5 {
    Output: Address
    Body: {
        arr = ArrayCreate(5)
        ArraySet(arr, 0, 10)
        ArraySet(arr, 1, 20)
        ArraySet(arr, 2, 30)
        ArraySet(arr, 3, 40)
        ArraySet(arr, 4, 50)
        ReturnValue(arr)
    }
}

PrintMessage("Test 6: Array return")
my_array = Arrays.Make5()  // Also update the call

// Test 7: Function with local variables and complex math
Function.Math.Fibonacci {
    Input: n: Integer
    Output: Integer
    Body: {
        // For simplicity, just calculate a few terms
        is_zero = EqualTo(n, 0)
        IfCondition is_zero ThenBlock: {
            ReturnValue(0)
        }
        
        is_one = EqualTo(n, 1)
        IfCondition is_one ThenBlock: {
            ReturnValue(1)
        }
        
        // For n >= 2, return a calculated value
        // This is simplified - not true recursion
        a = 1
        b = 1
        counter = 2
        
        loop_cond = LessThan(counter, n)
        WhileLoop loop_cond {
            temp = Add(a, b)
            a = b
            b = temp
            counter = Add(counter, 1)
            loop_cond = LessThan(counter, n)
        }
        
        ReturnValue(b)
    }
}

PrintMessage("Test 7: Complex function (Fibonacci)")
fib5 = Math.Fibonacci(5)
PrintMessage("Fibonacci(5):")
PrintNumber(fib5)
    


// Test 8: Function using bitwise operations
Function.Bits.SetBit {
    Input: value: Integer
    Input: bit_pos: Integer
    Output: Integer
    Body: {
        mask = LeftShift(1, bit_pos)
        result = BitwiseOr(value, mask)
        ReturnValue(result)
    }
}

PrintMessage("Test 8: Bitwise operations")
bit_result = Bits.SetBit(8, 2)  // Set bit 2 of value 8
PrintMessage("SetBit(8, 2) = 8 | (1 << 2) =")
PrintNumber(bit_result)

// Test 9: Nested function calls
Function.Utils.ProcessValue {
    Input: x: Integer
    Output: Integer
    Body: {
        // Square it, double it, add 10
        sq = Math.Square(x)
        dbl = Math.Double(sq)
        result = Add(dbl, 10)
        ReturnValue(result)
    }
}

PrintMessage("Test 9: Nested operations")
processed = Utils.ProcessValue(3)
PrintMessage("ProcessValue(3) = ((3^2) * 2) + 10 =")
PrintNumber(processed)
 

// Test 10: Function with early returns
Function.Logic.CheckRange {
    Input: val: Integer
    Input: min: Integer
    Input: max: Integer
    Output: Integer
    Body: {
        too_small = LessThan(val, min)
        IfCondition too_small ThenBlock: {
            ReturnValue(0)  // Return 0 for below range
        }
        
        too_big = GreaterThan(val, max)
        IfCondition too_big ThenBlock: {
            ReturnValue(2)  // Return 2 for above range
        }
        
        ReturnValue(1)  // Return 1 for in range
    }
}

PrintMessage("Test 10: Early returns")
range1 = Logic.CheckRange(5, 10, 20)
PrintMessage("CheckRange(5, 10, 20) =")
PrintNumber(range1)
range2 = Logic.CheckRange(15, 10, 20)
PrintMessage("CheckRange(15, 10, 20) =")
PrintNumber(range2)
range3 = Logic.CheckRange(25, 10, 20)
PrintMessage("CheckRange(25, 10, 20) =")
PrintNumber(range3)

PrintMessage("All tests complete!")