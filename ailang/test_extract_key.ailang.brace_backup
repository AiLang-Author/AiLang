// test_extract_key.ailang
// Test the Extract.Key function in isolation

Function.Extract.Key {
    Input: buffer: Address
    Input: size: Integer
    Output: Address
    Body: {
        PrintMessage("Extract.Key called")
        
        // Skip to the key part (after command)
        offset = 0
        newlines = 0
        target_newlines = 4  // Skip *2\r\n, $3\r\n, CMD\r\n, $N\r\n
        
        PrintMessage("  Counting newlines...")
        WhileLoop And(LessThan(offset, size), LessThan(newlines, target_newlines)) {
            byte = GetByte(buffer, offset)
            IfCondition EqualTo(byte, 10) ThenBlock: {  // LF
                newlines = Add(newlines, 1)
                PrintMessage("  Found newline ")
                PrintNumber(newlines)
                PrintMessage(" at offset ")
                PrintNumber(offset)
                PrintMessage("")
            }
            offset = Add(offset, 1)
        }
        
        PrintMessage("  Key starts at offset ")
        PrintNumber(offset)
        PrintMessage("")
        
        // Now at start of key
        key_start = offset
        key_end = offset
        
        // Find end of key (CR or end of buffer)
        WhileLoop And(LessThan(key_end, size), NotEqual(GetByte(buffer, key_end), 13)) {
            key_end = Add(key_end, 1)
        }
        
        PrintMessage("  Key ends at offset ")
        PrintNumber(key_end)
        PrintMessage("")
        
        // Allocate and copy key
        key_len = Subtract(key_end, key_start)
        PrintMessage("  Key length: ")
        PrintNumber(key_len)
        PrintMessage("")
        
        key = Allocate(Add(key_len, 1))
        
        i = 0
        WhileLoop LessThan(i, key_len) {
            SetByte(key, i, GetByte(buffer, Add(key_start, i)))
            i = Add(i, 1)
        }
        SetByte(key, key_len, 0)  // Null terminate
        
        PrintMessage("  Extracted key: ")
        PrintString(key)
        PrintMessage("")
        
        ReturnValue(key)
    }
}

SubRoutine.Main {
    PrintMessage("Testing Key Extraction")
    PrintMessage("======================")
    
    // Create a mock RESP GET command: *2\r\n$3\r\nGET\r\n$5\r\nhello\r\n
    buffer = Allocate(100)
    pos = 0
    
    // *2\r\n
    SetByte(buffer, pos, 42)   // *
    pos = Add(pos, 1)
    SetByte(buffer, pos, 50)   // 2
    pos = Add(pos, 1)
    SetByte(buffer, pos, 13)   // \r
    pos = Add(pos, 1)
    SetByte(buffer, pos, 10)   // \n
    pos = Add(pos, 1)
    
    // $3\r\n
    SetByte(buffer, pos, 36)   // $
    pos = Add(pos, 1)
    SetByte(buffer, pos, 51)   // 3
    pos = Add(pos, 1)
    SetByte(buffer, pos, 13)   // \r
    pos = Add(pos, 1)
    SetByte(buffer, pos, 10)   // \n
    pos = Add(pos, 1)
    
    // GET\r\n
    SetByte(buffer, pos, 71)   // G
    pos = Add(pos, 1)
    SetByte(buffer, pos, 69)   // E
    pos = Add(pos, 1)
    SetByte(buffer, pos, 84)   // T
    pos = Add(pos, 1)
    SetByte(buffer, pos, 13)   // \r
    pos = Add(pos, 1)
    SetByte(buffer, pos, 10)   // \n
    pos = Add(pos, 1)
    
    // $5\r\n
    SetByte(buffer, pos, 36)   // $
    pos = Add(pos, 1)
    SetByte(buffer, pos, 53)   // 5
    pos = Add(pos, 1)
    SetByte(buffer, pos, 13)   // \r
    pos = Add(pos, 1)
    SetByte(buffer, pos, 10)   // \n
    pos = Add(pos, 1)
    
    // hello\r\n
    SetByte(buffer, pos, 104)  // h
    pos = Add(pos, 1)
    SetByte(buffer, pos, 101)  // e
    pos = Add(pos, 1)
    SetByte(buffer, pos, 108)  // l
    pos = Add(pos, 1)
    SetByte(buffer, pos, 108)  // l
    pos = Add(pos, 1)
    SetByte(buffer, pos, 111)  // o
    pos = Add(pos, 1)
    SetByte(buffer, pos, 13)   // \r
    pos = Add(pos, 1)
    SetByte(buffer, pos, 10)   // \n
    pos = Add(pos, 1)
    
    PrintMessage("\nBuffer created with ")
    PrintNumber(pos)
    PrintMessage(" bytes")
    
    PrintMessage("\nCalling Extract.Key...")
    key = Extract.Key(buffer, pos)
    
    PrintMessage("\nFinal result: ")
    PrintString(key)
    PrintMessage("")
    
    PrintMessage("\nExpected: hello")
    PrintMessage("Test complete!")
    
    Deallocate(buffer, 100)
    Deallocate(key, 0)
}

RunTask(Main)