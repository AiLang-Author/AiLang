LibraryImport.Cobol

// Generated from COBOL source

FixedPool.COBOL_EXEC85_VARS {
    "SOURCE_IN_2400": Initialize=""
    "SOURCE_IN": Initialize=""
    "CONTROL_RECORD": Initialize=""
    "PRINT_REC": Initialize=""
    "FILLER": Initialize=""
    "PRINT_DATA": Initialize=""
    "CT_OUT": Initialize=""
    "UPDATED_SOURCE_OUT_2400": Initialize=""
    "UD_SOURCE_OUT": Initialize=""
    "BLOCK_TYPE": Initialize=""
    "SUB1": Initialize=0
    "SUB2": Initialize=0
    "SUB3": Initialize=0
    "SUB4": Initialize=0
    "SUB5": Initialize=0
    "SUB6": Initialize=0
    "SUB7": Initialize=0
    "WA_ERR_IND": Initialize=0
    "WA_FIRST_IND": Initialize=0
    "WA_ZCARD_TABLE": Initialize=""
    "WA_ZCARD": Initialize=""
    "WA_TOP_OF_PAGE_LINE": Initialize=""
    "WA_VERSION": Initialize=""
    "WA_VERSION_TEXT": Initialize="CCVS85 VERSION NUMBER"
    "WA_VERSION_NUM": Initialize=" "
    "WA_RELEASE": Initialize=""
    "WA_RELEASE_TEXT": Initialize=", RELEASED ON"
    "WA_VERSION_DATE": Initialize=" "
    "WA_COMPANY_AND_COMPILER": Initialize=" "
    "WA_DATE": Initialize=""
    "WA_PAGE_CT": Initialize=""
    "WA_ACCT_LINE_1": Initialize=""
    "WA_CURRENT_PROG": Initialize=""
    "WA_LINES_COBOL": Initialize=""
    "WA_ACCT_LINE_2": Initialize=""
    "WA_LINES_INSERTED": Initialize=""
    "WA_LINES_REPLACED": Initialize=""
    "WA_LINES_DELETED": Initialize=""
    "WA_ACCT_LINE_3": Initialize=""
    "WA_OPTIONAL_CODE": Initialize=""
    "WA_CODE_REMOVED": Initialize=""
    "WA_CODE_KILLED": Initialize="** COMMENTS DELETED"
    "WA_COMMENTS_DEL": Initialize=""
    "WA_FINAL_LINE_1": Initialize=""
    "WA_PROGS_FOUND": Initialize=""
    "WA_FINAL_LINE_2": Initialize=""
    "WA_SOURCE_PROGS": Initialize=""
    "WA_FINAL_LINE_3": Initialize=""
    "WA_NEWPOP_PROGS": Initialize=""
    "WB_CONTROL_DATA": Initialize=""
    "WB_FILL": Initialize=""
    "WB_3": Initialize=""
    "WB_4": Initialize=""
    "WB_NN": Initialize=0
    "WB_X": Initialize=""
    "WB_6": Initialize=""
    "WB_7": Initialize=""
    "WB_8": Initialize=""
    "WB_9": Initialize=""
    "WB_10": Initialize=""
    "WB_11": Initialize=""
    "WB_12": Initialize=""
    "WB_PROG": Initialize=""
    "WB_13": Initialize=""
    "WB_14": Initialize=""
    "WB_MODULE": Initialize=""
    "WB_LEVEL": Initialize=""
    "WB_15": Initialize=""
    "WB_16": Initialize=""
    "WB_X_CARD": Initialize=""
    "WB_X_HYPHEN": Initialize=""
    "WB_X_CARD_NUM": Initialize=0
    "WB_PROG_POS": Initialize=""
    "WB_PROG_POS_NUM": Initialize=0
    "WB_SUBS_TEXT": Initialize=""
    "WB_START_CARD": Initialize=""
    "WB_STAR_START": Initialize=""
    "WB_UPDATE_PROG": Initialize=""
    "WB_RENUMBER": Initialize=""
    "WB_LINE_UPDATE": Initialize=""
    "WB_SEQ_1": Initialize=""
    "WB_COBOL_LINE": Initialize=""
    "WB_COL_7": Initialize=""
    "WB_CHAR": Initialize=""
    "WB_SEQ_2": Initialize=""
    "WC_CURRENT_POP_RECORD": Initialize=""
    "WC_1": Initialize=""
    "WC_END_OF_POPFILE": Initialize=""
    "WC_HEADER": Initialize=""
    "WC_STAR_HEADER": Initialize=""
    "WC_COBOL": Initialize=""
    "WC_PROG_ID": Initialize=""
    "WC_PROG_ID_1_5": Initialize=""
    "WC_PROG_ID_1_4": Initialize=""
    "WC_MODULE": Initialize=""
    "WC_LEVEL": Initialize=""
    "WC_PROG_ID_6": Initialize=""
    "WC_SUBPRG": Initialize=""
    "WC_PROG2ID": Initialize=""
    "WC_PROG2ID_1_5": Initialize=""
    "WC_1_72": Initialize=""
    "WC_6": Initialize=""
    "WC_STAR": Initialize=""
    "WC_1_5": Initialize=""
    "WC_COL_7": Initialize=""
    "WC_COL_8": Initialize=""
    "WC_SUB_DATA": Initialize=""
    "WC_12_15": Initialize=""
    "WC_17_19": Initialize=0
    "WC_20": Initialize=""
    "WC_73_80": Initialize=""
    "WD_SOURCE_REC": Initialize=""
    "WD_1": Initialize=""
    "WD_HEADER": Initialize=""
    "WE_PRINT_DATA": Initialize=""
    "WE_COBOL_LINE": Initialize=""
    "WE_X_CARD": Initialize=""
    "WE_CHANGE_TYPE": Initialize=""
    "WF_PROGRAM_SELECTED_TABLE": Initialize=""
    "WF_PROGRAM_SELECTED": Initialize=""
    "WG_MODULE_SELECTED_TABLE": Initialize=""
    "WG_MODULE_SELECTED": Initialize=""
    "WG_MODULE_LEVEL": Initialize=""
    "WV_PRINT_MISCELLANEOUS": Initialize=""
    "WV_OPTION_HEADING": Initialize="OPTION SWITCH SETTINGS -"
    "WV_OPT_1": Initialize="0                 1                   2"
    "WV_OPT_2": Initialize="1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6"
    "WV_OPT_SWITCHES": Initialize=""
    "WV_OPT": Initialize=""
    "WX_X_CARD_TABLE": Initialize=""
    "WX_X_CARD": Initialize=0
    "WX_X_CHAR": Initialize=""
    "WX_PROG_POS_TABLE": Initialize=""
    "WX_PROG_POS": Initialize=0
    "WY_SWITCHES": Initialize=""
    "WY_OPTION_SWITCHES": Initialize=""
    "WY_OPT_SW_1": Initialize=""
    "WY_OPT_SW_2": Initialize=""
    "WY_OPT_SW_3": Initialize=""
    "WY_OPT_SW_4": Initialize=""
    "WY_OPT_SW_5": Initialize=""
    "WY_OPT_SW_6": Initialize=""
    "WY_OPT_SW_7": Initialize=""
    "WY_OPT_SW_8": Initialize=""
    "WY_OPT_SW_9": Initialize=""
    "WY_OPT_SW_10": Initialize=""
    "WY_OPT_SW_11": Initialize=""
    "WY_OPT_SW_12": Initialize=""
    "WY_OPT_SW_13": Initialize=""
    "WY_OPT_SW_14": Initialize=""
    "WY_OPT_SW_15": Initialize=""
    "WY_OPT_SW_16": Initialize=""
    "WY_OPT_SW_17": Initialize=""
    "WY_OPT_SW_18": Initialize=""
    "WY_OPT_SW_19": Initialize=""
    "WY_OPT_SW_20": Initialize=""
    "WY_OPT_SW_21": Initialize=""
    "WY_OPT_SW_22": Initialize=""
    "WY_OPT_SW_23": Initialize=""
    "WY_OPT_SW_24": Initialize=""
    "WY_OPT_SW_25": Initialize=""
    "WY_OPT_SW_26": Initialize=""
    "WY_OPT_SW": Initialize=""
    "WY_PRINT_SWITCHES": Initialize=""
    "WY_EXTRACT_ALL": Initialize=""
    "WY_EXTRACT_AUTO": Initialize=""
    "WY_EXTRACT_MAN": Initialize=""
    "WY_KILL_DELETIONS": Initialize=""
    "WY_LIST_NO_UPDATES": Initialize=""
    "WY_LIST_X_CARDS": Initialize=""
    "WY_LIST_PROGRAMS": Initialize=""
    "WY_LIST_COMPACT": Initialize=""
    "WY_NO_DATA": Initialize=""
    "WY_NO_LIBRARY": Initialize=""
    "WY_NO_SOURCE": Initialize=""
    "WY_REMOVE_COMMENTS": Initialize=""
    "WY_NEW_POP": Initialize=""
    "WY_SELECT_PROG": Initialize=""
    "WY_SELECT_MODULE": Initialize=""
    "WY_SELECT_LEVEL": Initialize=""
    "WZ_MISCELLANEOUS": Initialize=""
    "WZ_PROGRAM_SELECTED": Initialize=""
    "WZ_END_OF_POPFILE": Initialize=""
    "WZ_FULL_STOP": Initialize=""
    "WZ_DONT_READ_POPFILE": Initialize=""
    "WZ_UPDATE_THIS_PROG": Initialize=""
    "WZ_REPLACE_FLAG": Initialize=""
    "WZ_LINE_UPDATE": Initialize=""
    "WZ_RESEQUENCE_THIS": Initialize=""
    "WZ_RESEQUENCE_NEXT": Initialize=""
    "WZ_END_OF_UPDATES": Initialize=""
    "WZ_OPTIONAL_SELECTED": Initialize=""
    "WZ_DELETE_FLAG": Initialize=""
    "WZ_NOT_THIS_COMMENT": Initialize=""
    "WZ_CURRENT_HEADER": Initialize=""
    "WZ_INVALID_DATA": Initialize=""
    "WZ_ERROR_MESSAGE": Initialize=""
    "WZ_CURRENT_UPD_PROG": Initialize=""
    "WZ_UPD_PROG_CHAR": Initialize=""
    "WZ_CURRENT_MAIN_PROG": Initialize=""
    "WZ_MAIN_PROG_CHAR": Initialize=""
    "WZ_PROG_BREAK": Initialize=""
    "WZ_1CHAR": Initialize=""
    "WZ_CURRENT_POP_PROG": Initialize=""
    "WZ_PROG_ID_6": Initialize=""
    "WZ_MAIN_PROG_FLAG": Initialize=""
    "WZ_LINES_COBOL": Initialize=0
    "WZ_LINES_INSERTED": Initialize=0
    "WZ_LINES_REPLACED": Initialize=0
    "WZ_LINES_DELETED": Initialize=0
    "WZ_COMMENTS_DELETED": Initialize=0
    "WZ_CODE_REMOVED": Initialize=0
    "WZ_SOURCE_PROGS": Initialize=0
    "WZ_NEWPOP_PROGS": Initialize=0
    "WZ_PROGS_FOUND": Initialize=0
    "WZ_COMMENTS_DEL": Initialize=0
    "WZ_SEQ_NO": Initialize=0
    "WZ_SAVE_POP_RECORD": Initialize=""
    "WZ_SAVE_SEQ": Initialize=""
    "WZ_SAVE_12_20": Initialize=""
    "WZ_SAVE_12_15": Initialize=""
    "WZ_PAGE_CT": Initialize=0
    "WZ_LINE_CT": Initialize=0
    "WZ_MODULE": Initialize=""
    "WZ_LEVEL": Initialize=""
    "WZ_PRINT_HOLD": Initialize=""
    "WZ_X_CARD": Initialize=""
    "WZ_X_CHAR": Initialize=""
    "WZ_WITHIN_DELETE_SERIES_FLAG": Initialize=""
    "WZ_VERSION_CARD": Initialize=""
    "WZ_VERSION_CONTROL": Initialize=""
    "WZ_VERSION_NUM": Initialize=""
    "WZ_VERSION_DATE": Initialize=""
}

FixedPool.COBOL_CM101M_VARS {
    "PRINT_REC": Initialize=""
    "DUMMY_RECORD": Initialize=""
    "PASSWORD1": Initialize="XXXXX031"
    "DISABLE_STATUS": Initialize="99"
    "POLL_COUNT": Initialize=0
    "INIT_TIME": Initialize=0
    "COMP_TIME": Initialize=0
    "SYSTEM_TIME": Initialize=""
    "SYS_HRS": Initialize=0
    "SYS_MINS": Initialize=0
    "SYS_SECS": Initialize=0
    "MSG_TIME": Initialize=""
    "HOURS": Initialize=0
    "MINUTES": Initialize=0
    "SECONDS": Initialize=0
    "SPEC_LINE_1": Initialize=""
    "FILLER": Initialize="************************    ******************************"
    "INIT_ENABLE_STATUS": Initialize=""
    "INCOMING_MSG": Initialize=""
    "KILL_FIELD": Initialize=""
    "LOG_HDR_1": Initialize=""
    "LOG_HDR_2": Initialize=""
    "SYM_SOURCE": Initialize=""
    "MSG_DATE": Initialize=0
    "LOG_HDR_3": Initialize=""
    "LOG_HDR_4": Initialize=""
    "LOG_LINE": Initialize=""
    "RECEIPT_TIME": Initialize=""
    "LAG_TIME": Initialize=""
    "MESSAGE_LENGTH": Initialize=""
    "SENTINEL": Initialize=""
    "QUEUE_DEPTH": Initialize=0
    "IDLE_COUNT": Initialize=""
    "IDLE_OVERFLOW": Initialize=""
    "MSG": Initialize=""
    "TEST_RESULTS": Initialize=""
    "FEATURE": Initialize=""
    "P_OR_F": Initialize=""
    "PAR_NAME": Initialize=""
    "COMPUTED_A": Initialize=""
    "COMPUTED_STATUS": Initialize=""
    "CORRECT_A": Initialize=""
    "CORRECT_STATUS": Initialize=""
    "RE_MARK": Initialize=""
    "COLUMNS_LINE_1": Initialize=""
    "COLUMNS_LINE_2": Initialize=""
    "REC_SKL_SUB": Initialize=0
    "REC_CT": Initialize=0
    "DELETE_CNT": Initialize=0
    "ERROR_COUNTER": Initialize=0
    "INSPECT_COUNTER": Initialize=0
    "PASS_COUNTER": Initialize=0
    "TOTAL_ERROR": Initialize=0
    "ERROR_HOLD": Initialize=0
    "DUMMY_HOLD": Initialize=" "
    "RECORD_COUNT": Initialize=0
    "CCVS_H_1": Initialize=""
    "CCVS_H_2": Initialize=""
    "TEST_ID": Initialize=""
    "CCVS_H_3": Initialize=""
    "CCVS_E_1": Initialize=""
    "ID_AGAIN": Initialize=""
    "CCVS_E_2": Initialize=""
    "CCVS_E_2_2": Initialize=""
    "ERROR_TOTAL": Initialize=" "
    "ENDER_DESC": Initialize="ERRORS ENCOUNTERED"
    "CCVS_E_3": Initialize=""
    "CCVS_E_4": Initialize=""
    "CCVS_E_4_1": Initialize=" "
    "CCVS_E_4_2": Initialize=" "
    "XXINFO": Initialize=""
    "INFO_TEXT": Initialize=""
    "XXCOMPUTED": Initialize=""
    "XXCORRECT": Initialize=""
    "HYPHEN_LINE": Initialize=""
    "CCVS_PGM_ID": Initialize="CM101M"
}

FixedPool.COBOL_CM102M_VARS {
    "PRINT_REC": Initialize=""
    "DUMMY_RECORD": Initialize=""
    "COMP_TWO": Initialize=2
    "TWO": Initialize=2
    "COMP_THREE": Initialize=3
    "THREE": Initialize=3
    "SEND_SWITCH": Initialize=0
    "MSG_NUM": Initialize=0
    "MSG_70": Initialize=""
    "PASSWORD1": Initialize="XXXXX033"
    "ERR_MSG": Initialize=""
    "FILLER": Initialize="-"
    "TEST_IND": Initialize=""
    "LOG_HDR_1": Initialize=""
    "LOG_HDR_2": Initialize=""
    "LOG_HDR_3": Initialize=""
    "LOG_LINE": Initialize=""
    "START_TIME": Initialize=""
    "HOURS": Initialize=0
    "MINUTES": Initialize=0
    "SECONDS": Initialize=0
    "ELAPSED": Initialize=""
    "STAT": Initialize=0
    "ERR": Initialize=0
    "LNTH": Initialize=""
    "MSG_OUT": Initialize=""
    "LOG_LINE_1": Initialize=""
    "MSG_FLD": Initialize=""
    "SUPERIMPOSITION": Initialize=""
    "S_ALL": Initialize=""
    "S_WORDS": Initialize=""
    "S_IN": Initialize=""
    "S_THIS": Initialize=""
    "S_MESSAGE": Initialize=""
    "S_SHOULD": Initialize=""
    "S_COME": Initialize=""
    "S_OUT": Initialize=""
    "S_ON": Initialize=""
    "S_THE": Initialize=""
    "S_SAME": Initialize=""
    "S_LINE": Initialize=""
    "MSG_A": Initialize=""
    "MSG_B": Initialize=""
    "MSG_C": Initialize=""
    "MSG_D": Initialize=""
    "MSG_E": Initialize=""
    "MSG_NO": Initialize=""
    "SYSTEM_TIME": Initialize=""
    "COMP_TIME": Initialize=""
    "COMP_HRS": Initialize=0
    "COMP_MINS": Initialize=0
    "COMP_SECS": Initialize=0
    "MSG_F": Initialize=""
    "MSG_F_NO": Initialize=""
    "MSG_G": Initialize=""
    "MSG_G_NO": Initialize=""
    "MSG_H": Initialize=""
    "MSG_H_NO": Initialize=""
    "LONG_MSG": Initialize=""
    "LONG_MSG_S1": Initialize="ON PAGE XIII-21, PARAGRAPH 3        .5.4(1)C, THE COBOL STANDARD STATES, "EXCESS"
    "LONG_MSG_S2": Initialize="CHARACTERS OF A MESSAGE OR M        ESSAGE SEGMENT WILL NOT BE TRUNCATED."
    "LONG_MSG_S3": Initialize="CHARACTERS WILL BE PACKED TO         A SIZE EQUAL TO THAT OF THE PHYSICAL LINE"
    "LONG_MSG_S4": Initialize="AND THEN OUTPUTTED TO THE DE        VICE.  THE PROCESS CONTINUES ON THE NEXT"
    "LONG_MSG_S5": Initialize="LINE WITH THE EXCESS CHARACT        ERS."  IF THIS ENTIRE PARAGRAPH WAS RECEIVED"
    "LONG_MSG_S6": Initialize="BY THE DESIGNATED DEVICE, TH        EN THE FOREGOING RULE IS SUPPORTED BY THIS"
    "LONG_MSG_S7": Initialize="COMPILER."
    "REC_SKL_SUB": Initialize=0
    "REC_CT": Initialize=0
    "DELETE_CNT": Initialize=0
    "ERROR_COUNTER": Initialize=0
    "INSPECT_COUNTER": Initialize=0
    "PASS_COUNTER": Initialize=0
    "TOTAL_ERROR": Initialize=0
    "ERROR_HOLD": Initialize=0
    "DUMMY_HOLD": Initialize=" "
    "RECORD_COUNT": Initialize=0
    "CCVS_H_1": Initialize=""
    "CCVS_H_2": Initialize=""
    "TEST_ID": Initialize=""
    "CCVS_H_3": Initialize=""
    "CCVS_E_1": Initialize=""
    "ID_AGAIN": Initialize=""
    "CCVS_E_2": Initialize=""
    "CCVS_E_2_2": Initialize=""
    "ERROR_TOTAL": Initialize=" "
    "ENDER_DESC": Initialize="ERRORS ENCOUNTERED"
    "CCVS_E_3": Initialize=""
    "CCVS_E_4": Initialize=""
    "CCVS_E_4_1": Initialize=" "
    "CCVS_E_4_2": Initialize=" "
    "XXINFO": Initialize=""
    "INFO_TEXT": Initialize=""
    "XXCOMPUTED": Initialize=""
    "XXCORRECT": Initialize=""
    "HYPHEN_LINE": Initialize=""
    "CCVS_PGM_ID": Initialize="CM102M"
    "TEST_RESULTS": Initialize=""
    "FEATURE": Initialize=""
    "P_OR_F": Initialize=""
    "PAR_NAME": Initialize=""
    "COMPUTED_A": Initialize=""
    "COMPUTED_SLASH_SET": Initialize=""
    "COMPUTED_STATUS": Initialize=""
    "SLASH": Initialize=""
    "COMPUTED_ERR_KEY": Initialize=""
    "CORRECT_A": Initialize=""
    "CORRECT_SLASH_SET": Initialize=""
    "CORRECT_2SLASH1": Initialize=0
    "RE_MARK": Initialize=""
    "COLUMNS_LINE_1": Initialize=""
    "COLUMNS_LINE_2": Initialize=""
}

FixedPool.COBOL_CM103M_VARS {
    "PRINT_REC": Initialize=""
    "DUMMY_RECORD": Initialize=""
    "REC_SKL_SUB": Initialize=0
    "REC_CT": Initialize=0
    "DELETE_CNT": Initialize=0
    "ERROR_COUNTER": Initialize=0
    "INSPECT_COUNTER": Initialize=0
    "PASS_COUNTER": Initialize=0
    "TOTAL_ERROR": Initialize=0
    "ERROR_HOLD": Initialize=0
    "DUMMY_HOLD": Initialize=" "
    "RECORD_COUNT": Initialize=0
    "CCVS_H_1": Initialize=""
    "FILLER": Initialize=""
    "CCVS_H_2": Initialize=""
    "TEST_ID": Initialize=""
    "CCVS_H_3": Initialize=""
    "CCVS_E_1": Initialize=""
    "ID_AGAIN": Initialize=""
    "CCVS_E_2": Initialize=""
    "CCVS_E_2_2": Initialize=""
    "ERROR_TOTAL": Initialize=" "
    "ENDER_DESC": Initialize="ERRORS ENCOUNTERED"
    "CCVS_E_3": Initialize=""
    "CCVS_E_4": Initialize=""
    "CCVS_E_4_1": Initialize=" "
    "CCVS_E_4_2": Initialize=" "
    "XXINFO": Initialize=""
    "INFO_TEXT": Initialize=""
    "XXCOMPUTED": Initialize=""
    "XXCORRECT": Initialize=""
    "HYPHEN_LINE": Initialize=""
    "CCVS_PGM_ID": Initialize="CM103M"
    "MCS_TIME": Initialize=""
    "HRS": Initialize=0
    "MINS": Initialize=0
    "SECS": Initialize=0
    "IN_TIME": Initialize=""
    "IN_HRS": Initialize=0
    "IN_MINS": Initialize=0
    "IN_SECS": Initialize=0
    "OUT_TIME": Initialize=""
    "OUT_HRS": Initialize=0
    "OUT_MINS": Initialize=0
    "OUT_SECS": Initialize=0
    "LOG_HDR_1": Initialize=""
    "LOG_HDR_2": Initialize=""
    "LOG_HDR_3": Initialize=""
    "LOG_HDR_4": Initialize=""
    "LOG_LINE": Initialize=""
    "TIME_REC": Initialize=""
    "PROG_TIME": Initialize=""
    "TIME_SENT": Initialize=""
    "RECV_STATUS": Initialize=""
    "SEND_STATUS": Initialize=""
    "SEND_ERR": Initialize=""
    "MSG_LNGTH": Initialize=""
    "MSG": Initialize=""
    "KILL_FIELD": Initialize=""
}

FixedPool.COBOL_CM104M_VARS {
    "PRINT_REC": Initialize=""
    "DUMMY_RECORD": Initialize=""
    "REC_SKL_SUB": Initialize=0
    "REC_CT": Initialize=0
    "DELETE_CNT": Initialize=0
    "ERROR_COUNTER": Initialize=0
    "INSPECT_COUNTER": Initialize=0
    "PASS_COUNTER": Initialize=0
    "TOTAL_ERROR": Initialize=0
    "ERROR_HOLD": Initialize=0
    "DUMMY_HOLD": Initialize=" "
    "RECORD_COUNT": Initialize=0
    "CCVS_H_1": Initialize=""
    "FILLER": Initialize=""
    "CCVS_H_2": Initialize=""
    "TEST_ID": Initialize=""
    "CCVS_H_3": Initialize=""
    "CCVS_E_1": Initialize=""
    "ID_AGAIN": Initialize=""
    "CCVS_E_2": Initialize=""
    "CCVS_E_2_2": Initialize=""
    "ERROR_TOTAL": Initialize=" "
    "ENDER_DESC": Initialize="ERRORS ENCOUNTERED"
    "CCVS_E_3": Initialize=""
    "CCVS_E_4": Initialize=""
    "CCVS_E_4_1": Initialize=" "
    "CCVS_E_4_2": Initialize=" "
    "XXINFO": Initialize=""
    "INFO_TEXT": Initialize=""
    "XXCOMPUTED": Initialize=""
    "XXCORRECT": Initialize=""
    "HYPHEN_LINE": Initialize=""
    "CCVS_PGM_ID": Initialize="CM104M"
    "LOG_HDR_1": Initialize=""
    "LOG_HDR_2": Initialize=""
    "LOG_HDR_3": Initialize=""
    "LOG_HDR_4": Initialize=""
    "LOG_LINE": Initialize=""
    "SYM_SOURCE": Initialize=""
    "LOG_TIME": Initialize=""
    "HRS": Initialize=0
    "MINS": Initialize=0
    "SECS": Initialize=0
    "QUEUE_DEPTH": Initialize=""
    "OUT_TIME": Initialize=""
    "MSG_LENGTH": Initialize=""
    "IN_STATUS": Initialize=""
    "OUT_STATUS": Initialize=""
    "OUT_ERR_KEY": Initialize=""
    "MSG": Initialize=""
    "KILL_FIELD": Initialize=""
    "SEND_TIME": Initialize=""
    "S_HRS": Initialize=0
    "S_MINS": Initialize=0
    "S_SECS": Initialize=0
}

FixedPool.COBOL_CM105M_VARS {
    "PRINT_REC": Initialize=""
    "DUMMY_RECORD": Initialize=""
    "P": Initialize=""
    "PP": Initialize=""
    "PPP": Initialize=""
    "PS": Initialize=""
    "PSP": Initialize=""
    "PPS": Initialize=""
    "QUEUE_NAMES": Initialize=""
    "PPPP": Initialize="XXXXX038"
    "PPPS": Initialize="XXXXX039"
    "PPSP": Initialize="XXXXX040"
    "PSPP": Initialize="XXXXX041"
    "QUEUE_NAMES_TABLE": Initialize=""
    "NAME_SET": Initialize=""
    "I1": Initialize=1
    "TEST_RESULTS": Initialize=""
    "FILLER": Initialize=" "
    "FEATURE": Initialize=""
    "P_OR_F": Initialize=""
    "PAR_NAME": Initialize=""
    "COMPUTED_A": Initialize=""
    "STAT": Initialize=""
    "CORRECT_A": Initialize=""
    "CORRECT_QUEUE": Initialize=""
    "RE_MARK": Initialize=""
    "QUEUE_KEY": Initialize=""
    "COLUMNS_LINE_1": Initialize=""
    "COLUMNS_LINE_2": Initialize=""
    "REC_SKL_SUB": Initialize=0
    "REC_CT": Initialize=0
    "DELETE_CNT": Initialize=0
    "ERROR_COUNTER": Initialize=0
    "INSPECT_COUNTER": Initialize=0
    "PASS_COUNTER": Initialize=0
    "TOTAL_ERROR": Initialize=0
    "ERROR_HOLD": Initialize=0
    "DUMMY_HOLD": Initialize=" "
    "RECORD_COUNT": Initialize=0
    "CCVS_H_1": Initialize=""
    "CCVS_H_2": Initialize=""
    "TEST_ID": Initialize=""
    "CCVS_H_3": Initialize=""
    "CCVS_E_1": Initialize=""
    "ID_AGAIN": Initialize=""
    "CCVS_E_2": Initialize=""
    "CCVS_E_2_2": Initialize=""
    "ERROR_TOTAL": Initialize=" "
    "ENDER_DESC": Initialize="ERRORS ENCOUNTERED"
    "CCVS_E_3": Initialize=""
    "CCVS_E_4": Initialize=""
    "CCVS_E_4_1": Initialize=" "
    "CCVS_E_4_2": Initialize=" "
    "XXINFO": Initialize=""
    "INFO_TEXT": Initialize=""
    "XXCOMPUTED": Initialize=""
    "XXCORRECT": Initialize=""
    "HYPHEN_LINE": Initialize=""
    "CCVS_PGM_ID": Initialize="CM105M"
    "MAIN_QUEUE_NAME": Initialize=""
    "MAIN_QUEUE": Initialize=""
}

FixedPool.COBOL_CM201M_VARS {
    "MSG_72": Initialize=""
    "RECOGNITION_MSG_1": Initialize=""
    "FILLER": Initialize=""."
    "DEVICE_NAME": Initialize=""
    "RECOGNITION_MSG_2": Initialize=""
    "QUEUE_INVOLVED": Initialize=""
    "RECOGNITION_MSG_3": Initialize="CM201M INVOKED BUT NO DATA WAS AVAILABLE."
}

FixedPool.COBOL_CM202M_VARS {
    "PRINT_REC": Initialize=""
    "DUMMY_RECORD": Initialize=""
    "END_FLAG": Initialize=0
    "FAIL_SAFE": Initialize=0
    "ELAPSED_TIME": Initialize=0
    "ENABLE_ALL_MSG": Initialize="ATTEMPT TO ENTER MESSAGES.  BOTH SOURCES ARE NOW ENABLED."
    "INIT_TIME": Initialize=""
    "I_HRS": Initialize=0
    "I_MINS": Initialize=0
    "I_SECS": Initialize=0
    "TEST_TIME": Initialize=""
    "T_HRS": Initialize=0
    "T_MINS": Initialize=0
    "T_SECS": Initialize=0
    "SKIP_MSG_1": Initialize="SEGMENTED-MSG-TEST-05: THERE SHOU    LD BE NO BLANK LINES BETWEEN THIS LINE"
    "SKIP_MSG_2": Initialize="AND THIS ONE."
    "INCOMP_MSG": Initialize=""
    "FILLER": Initialize="************************    ******************************"
    "INC_MSG_NO": Initialize=0
    "ENABLE_MSG": Initialize=""
    "SELECTED_SOURCE": Initialize=""
    "DISABLE_MSG": Initialize=""
    "TERMINAL_1": Initialize="XXXXX042"
    "TERMINAL_2": Initialize="XXXXX043"
    "SEND_MSG": Initialize=""
    "TEST_NUMB": Initialize=1
    "ONE_TERMINAL_MSG": Initialize=""
    "SELECTED_DEST": Initialize="XXXXX032"
    "SEG_INIT": Initialize=""
    "SEG_TEST_NO": Initialize=0
    "SEG_CONT": Initialize="-CONTINUED"
    "MSG_COMP": Initialize="-MSG COMPLETE."
    "GROUP_COMP": Initialize="-GROUP COMPLETE."
    "TEST_RESULTS": Initialize=""
    "FEATURE": Initialize=""
    "P_OR_F": Initialize=""
    "PAR_NAME": Initialize=""
    "COMPUTED_A": Initialize=""
    "COMPUTED_STATUS": Initialize=""
    "CORRECT_A": Initialize=""
    "CORRECT_STATUS": Initialize=""
    "RE_MARK": Initialize=""
    "MSG_1": Initialize=""
    "COLUMNS_LINE_1": Initialize=""
    "COLUMNS_LINE_2": Initialize=""
    "REC_SKL_SUB": Initialize=0
    "REC_CT": Initialize=0
    "DELETE_CNT": Initialize=0
    "ERROR_COUNTER": Initialize=0
    "INSPECT_COUNTER": Initialize=0
    "PASS_COUNTER": Initialize=0
    "TOTAL_ERROR": Initialize=0
    "ERROR_HOLD": Initialize=0
    "DUMMY_HOLD": Initialize=" "
    "RECORD_COUNT": Initialize=0
    "CCVS_H_1": Initialize=""
    "CCVS_H_2": Initialize=""
    "TEST_ID": Initialize=""
    "CCVS_H_3": Initialize=""
    "CCVS_E_1": Initialize=""
    "ID_AGAIN": Initialize=""
    "CCVS_E_2": Initialize=""
    "CCVS_E_2_2": Initialize=""
    "ERROR_TOTAL": Initialize=" "
    "ENDER_DESC": Initialize="ERRORS ENCOUNTERED"
    "CCVS_E_3": Initialize=""
    "CCVS_E_4": Initialize=""
    "CCVS_E_4_1": Initialize=" "
    "CCVS_E_4_2": Initialize=" "
    "XXINFO": Initialize=""
    "INFO_TEXT": Initialize=""
    "XXCOMPUTED": Initialize=""
    "XXCORRECT": Initialize=""
    "HYPHEN_LINE": Initialize=""
    "CCVS_PGM_ID": Initialize="CM202M"
}

FixedPool.COBOL_DB101A_VARS {
    "PRINT_REC": Initialize=""
    "DUMMY_RECORD": Initialize=""
    "A": Initialize=1
    "B": Initialize=5
    "C": Initialize=9
    "D": Initialize=0
    "RESULT_FLAG": Initialize=0
    "DBLINE_HOLD": Initialize=""
    "DBNAME_HOLD": Initialize=""
    "DBCONT_HOLD": Initialize=""
    "FIVE": Initialize=5
    "SIZE_19": Initialize=""
    "FILLER": Initialize="************************    ******************************"
    "SIZE_18": Initialize=""
    "SIZE_17": Initialize=""
    "SIZE_16": Initialize=""
    "SIZE_15": Initialize=""
    "SIZE_14": Initialize=""
    "SIZE_13": Initialize=""
    "SIZE_12": Initialize=""
    "SIZE_10": Initialize=""
    "SIZE_5": Initialize=""
    "TEST_RESULTS": Initialize=""
    "FEATURE": Initialize=" "
    "P_OR_F": Initialize=" "
    "PAR_NAME": Initialize=""
    "PARDOT_X": Initialize=" "
    "DOTVALUE": Initialize=0
    "RE_MARK": Initialize=""
    "TEST_COMPUTED": Initialize=""
    "COMPUTED_X": Initialize=""
    "COMPUTED_A": Initialize=" "
    "COMPUTED_N": Initialize=""
    "COMPUTED_0V18": Initialize=""
    "COMPUTED_4V14": Initialize=""
    "COMPUTED_14V4": Initialize=""
    "CM_18V0": Initialize=""
    "COMPUTED_18V0": Initialize=""
    "TEST_CORRECT": Initialize=""
    "CORRECT_X": Initialize=""
    "CORRECT_A": Initialize=" "
    "CORRECT_N": Initialize=""
    "CORRECT_0V18": Initialize=""
    "CORRECT_4V14": Initialize=""
    "CORRECT_14V4": Initialize=""
    "CR_18V0": Initialize=""
    "CORRECT_18V0": Initialize=""
    "CCVS_C_1": Initialize=""
    "CCVS_C_2": Initialize=""
    "REC_SKL_SUB": Initialize=0
    "REC_CT": Initialize=0
    "DELETE_CNT": Initialize=0
    "ERROR_COUNTER": Initialize=0
    "INSPECT_COUNTER": Initialize=0
    "PASS_COUNTER": Initialize=0
    "TOTAL_ERROR": Initialize=0
    "ERROR_HOLD": Initialize=0
    "DUMMY_HOLD": Initialize=" "
    "RECORD_COUNT": Initialize=0
    "CCVS_H_1": Initialize=""
    "CCVS_H_2": Initialize=""
    "TEST_ID": Initialize=""
    "CCVS_H_3": Initialize=""
    "CCVS_E_1": Initialize=""
    "ID_AGAIN": Initialize=""
    "CCVS_E_2": Initialize=""
    "CCVS_E_2_2": Initialize=""
    "ERROR_TOTAL": Initialize=" "
    "ENDER_DESC": Initialize="ERRORS ENCOUNTERED"
    "CCVS_E_3": Initialize=""
    "CCVS_E_4": Initialize=""
    "CCVS_E_4_1": Initialize=" "
    "CCVS_E_4_2": Initialize=" "
    "XXINFO": Initialize=""
    "INFO_TEXT": Initialize=""
    "XXCOMPUTED": Initialize=""
    "XXCORRECT": Initialize=""
    "HYPHEN_LINE": Initialize=""
    "CCVS_PGM_ID": Initialize="DB101A"
    "DEBUG_CONTENTS": Initialize=""
    "DEBUG_LINE": Initialize=""
    "DEBUG_NAME": Initialize=""
    "SPACE": Initialize=""
    "ZERO": Initialize=""
}

SubRoutine.DB101A {
    RunTask(DB101A_CCVS1)
    ReturnValue(0)
}

SubRoutine.DB101A_START_UP {
    RunTask(DB101A_CCVS1)
    ReturnValue(0)
}

SubRoutine.DB101A_CCVS1 {
    ReturnValue(0)
}

SubRoutine.DB101A_BEGIN_START_UP {
    COBOL_DB101A_VARS.RESULT_FLAG = 1
    ReturnValue(0)
}

SubRoutine.DB101A_DB_COMMON {
    COBOL_DB101A_VARS.DBLINE_HOLD = COBOL_DB101A_VARS.DEBUG_LINE
    COBOL_DB101A_VARS.DBNAME_HOLD = COBOL_DB101A_VARS.DEBUG_NAME
    COBOL_DB101A_VARS.DBCONT_HOLD = COBOL_DB101A_VARS.DEBUG_CONTENTS
    ReturnValue(0)
}

SubRoutine.DB101A_FALL_THROUGH_AND_SERIES {
    RunTask(DB101A_PROC_SERIES_TEST)
    ReturnValue(0)
}

SubRoutine.DB101A_PROC_SERIES_TEST {
    ReturnValue(0)
}

SubRoutine.DB101A_BEGIN_FALL_THROUGH_AND_SERIES {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DB-COMMON")
        }
    RunTask(DB101A_DB_COMMON)
    COBOL_DB101A_VARS.RESULT_FLAG = 2
    ReturnValue(0)
}

SubRoutine.DB101A_GO_TO {
    RunTask(DB101A_GO_TO_TEST)
    ReturnValue(0)
}

SubRoutine.DB101A_GO_TO_TEST {
    ReturnValue(0)
}

SubRoutine.DB101A_BEGIN_GO_TO {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DB-COMMON")
        }
    RunTask(DB101A_DB_COMMON)
    COBOL_DB101A_VARS.RESULT_FLAG = 3
    ReturnValue(0)
}

SubRoutine.DB101A_ALTER_PARAGRAPH {
    RunTask(DB101A_ALTERABLE_PARAGRAPH)
    ReturnValue(0)
}

SubRoutine.DB101A_ALTERABLE_PARAGRAPH {
    ReturnValue(0)
}

SubRoutine.DB101A_BEGIN_ALTER_PARAGRAPH {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DB-COMMON")
        }
    RunTask(DB101A_DB_COMMON)
    COBOL_DB101A_VARS.RESULT_FLAG = 4
    ReturnValue(0)
}

SubRoutine.DB101A_LOOP_ITERATION {
    RunTask(DB101A_LOOP_ROUTINE)
    ReturnValue(0)
}

SubRoutine.DB101A_LOOP_ROUTINE {
    ReturnValue(0)
}

SubRoutine.DB101A_BEGIN_LOOP_ITERATION {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DB-COMMON")
        }
    RunTask(DB101A_DB_COMMON)
    COBOL_DB101A_VARS.RESULT_FLAG = Add(COBOL_DB101A_VARS.RESULT_FLAG, 1)
    ReturnValue(0)
}

SubRoutine.DB101A_PERFORM_THRU {
    RunTask(DB101A_DO_NOTHING_1)
    ReturnValue(0)
}

SubRoutine.DB101A_DO_NOTHING_1 {
    ReturnValue(0)
}

SubRoutine.DB101A_BEGIN_PERFORM_THRU {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DB-COMMON")
        }
    RunTask(DB101A_DB_COMMON)
    COBOL_DB101A_VARS.RESULT_FLAG = Add(COBOL_DB101A_VARS.RESULT_FLAG, 1)
    ReturnValue(0)
}

SubRoutine.DB101A_CCVS1 {
    RunTask(DB101A_OPEN_FILES)
    ReturnValue(0)
}

SubRoutine.DB101A_OPEN_FILES {
    ReturnValue(0)
}

SubRoutine.DB101A_PRINT_FILE {
    COBOL_DB101A_VARS.TEST_ID = COBOL_DB101A_VARS.CCVS_PGM_ID
    COBOL_DB101A_VARS.ID_AGAIN = COBOL_DB101A_VARS.CCVS_PGM_ID
    COBOL_DB101A_VARS.TEST_RESULTS = " "
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM HEAD-ROUTINE")
        }
    RunTask(DB101A_HEAD_ROUTINE)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM CCVS1-EXIT")
        }
    RunTask(DB101A_CCVS1_EXIT)
    ReturnValue(0)
}

SubRoutine.DB101A_CLOSE_FILES {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM END-ROUTINE")
        }
    RunTask(DB101A_END_ROUTINE)
    ReturnValue(0)
}

SubRoutine.DB101A_TERMINATE_CCVS {
    ReturnValue(0)
}

SubRoutine.DB101A_STERMINATE_CALL {
    ReturnValue(0)
}

SubRoutine.DB101A_INSPT {
    COBOL_DB101A_VARS.P_OR_F = "INSPT"
    COBOL_DB101A_VARS.INSPECT_COUNTER = Add(COBOL_DB101A_VARS.INSPECT_COUNTER, 1)
    ReturnValue(0)
}

SubRoutine.DB101A_PASS {
    COBOL_DB101A_VARS.P_OR_F = "PASS "
    COBOL_DB101A_VARS.PASS_COUNTER = Add(COBOL_DB101A_VARS.PASS_COUNTER, 1)
    ReturnValue(0)
}

SubRoutine.DB101A_FAIL {
    COBOL_DB101A_VARS.P_OR_F = "FAIL*"
    COBOL_DB101A_VARS.ERROR_COUNTER = Add(COBOL_DB101A_VARS.ERROR_COUNTER, 1)
    ReturnValue(0)
}

SubRoutine.DB101A_DE_LETE {
    COBOL_DB101A_VARS.P_OR_F = "*****"
    COBOL_DB101A_VARS.DELETE_CNT = Add(COBOL_DB101A_VARS.DELETE_CNT, 1)
    COBOL_DB101A_VARS.RE_MARK = "****TEST DELETED****"
    ReturnValue(0)
}

SubRoutine.DB101A_PRINT_DETAIL {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.REC_CT, 0) ThenBlock: {
            COBOL_DB101A_VARS.PARDOT_X = "."
            COBOL_DB101A_VARS.DOTVALUE = COBOL_DB101A_VARS.REC_CT
            COBOL_DB101A_VARS.PRINT_REC = COBOL_DB101A_VARS.TEST_RESULTS
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM WRITE-LINE")
                    }
            RunTask(DB101A_WRITE_LINE)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.P_OR_F, "FAIL*") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM WRITE-LINE")
                                    }
                        RunTask(DB101A_WRITE_LINE)
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL-ROUTINE")
                                    }
                        RunTask(DB101A_FAIL_ROUTINE)
                    } ElseBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM BAIL-OUT")
                                    }
                        RunTask(DB101A_BAIL_OUT)
                        COBOL_DB101A_VARS.P_OR_F = " "
                        COBOL_DB101A_VARS.COMPUTED_X = " "
                        COBOL_DB101A_VARS.CORRECT_X = " "
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.REC_CT, 0) ThenBlock: {
                                        COBOL_DB101A_VARS.PAR_NAME = " "
                                        COBOL_DB101A_VARS.RE_MARK = " "
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_HEAD_ROUTINE {
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_H_1
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_H_2
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_H_3
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    ReturnValue(0)
}

SubRoutine.DB101A_COLUMN_NAMES_ROUTINE {
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_C_1
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_C_2
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.HYPHEN_LINE
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    ReturnValue(0)
}

SubRoutine.DB101A_END_ROUTINE {
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.HYPHEN_LINE
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    ReturnValue(0)
}

SubRoutine.DB101A_END_RTN_EXIT {
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_E_1
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    ReturnValue(0)
}

SubRoutine.DB101A_END_ROUTINE_1 {
    COBOL_DB101A_VARS.ERROR_HOLD = Add(COBOL_DB101A_VARS.ERROR_HOLD, COBOL_DB101A_VARS.ERROR_COUNTER)
    COBOL_DB101A_VARS.ERROR_HOLD = Add(COBOL_DB101A_VARS.ERROR_HOLD, COBOL_DB101A_VARS.INSPECT_COUNTER)
    COBOL_DB101A_VARS.ERROR_HOLD = Add(COBOL_DB101A_VARS.ERROR_HOLD, COBOL_DB101A_VARS.DELETE_CNT)
    COBOL_DB101A_VARS.ERROR_HOLD = Add(COBOL_DB101A_VARS.ERROR_HOLD, COBOL_DB101A_VARS.PASS_COUNTER)
    COBOL_DB101A_VARS.CCVS_E_4_1 = COBOL_DB101A_VARS.PASS_COUNTER
    COBOL_DB101A_VARS.CCVS_E_4_2 = COBOL_DB101A_VARS.ERROR_HOLD
    COBOL_DB101A_VARS.CCVS_E_2_2 = COBOL_DB101A_VARS.CCVS_E_4
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_E_2
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    ReturnValue(0)
}

SubRoutine.DB101A_END_ROUTINE_12 {
    COBOL_DB101A_VARS.ENDER_DESC = "TEST(S) FAILED"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.ERROR_COUNTER, 0) ThenBlock: {
            COBOL_DB101A_VARS.ERROR_TOTAL = "NO "
        } ElseBlock: {
            COBOL_DB101A_VARS.ERROR_TOTAL = COBOL_DB101A_VARS.ERROR_COUNTER
            COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_E_2
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM WRITE-LINE")
                    }
            RunTask(DB101A_WRITE_LINE)
        }
    ReturnValue(0)
}

SubRoutine.DB101A_END_ROUTINE_13 {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.DELETE_CNT, 0) ThenBlock: {
            COBOL_DB101A_VARS.ERROR_TOTAL = "NO "
        } ElseBlock: {
            COBOL_DB101A_VARS.ERROR_TOTAL = COBOL_DB101A_VARS.DELETE_CNT
            COBOL_DB101A_VARS.ENDER_DESC = "TEST(S) DELETED     "
            COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_E_2
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM WRITE-LINE")
                    }
            RunTask(DB101A_WRITE_LINE)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.INSPECT_COUNTER, 0) ThenBlock: {
                        COBOL_DB101A_VARS.ERROR_TOTAL = "NO "
                    } ElseBlock: {
                        COBOL_DB101A_VARS.ERROR_TOTAL = COBOL_DB101A_VARS.INSPECT_COUNTER
                        COBOL_DB101A_VARS.ENDER_DESC = "TEST(S) REQUIRE INSPECTION"
                        COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_E_2
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM WRITE-LINE")
                                    }
                        RunTask(DB101A_WRITE_LINE)
                        COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_E_3
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM WRITE-LINE")
                                    }
                        RunTask(DB101A_WRITE_LINE)
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_WRITE_LINE {
    COBOL_DB101A_VARS.RECORD_COUNT = Add(COBOL_DB101A_VARS.RECORD_COUNT, 1)
    COBOL_DB101A_VARS.DUMMY_HOLD = COBOL_DB101A_VARS.DUMMY_RECORD
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.CCVS_C_1
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRT-LN")
        }
    RunTask(DB101A_WRT_LN)
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.HYPHEN_LINE
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRT-LN")
        }
    RunTask(DB101A_WRT_LN)
    COBOL_DB101A_VARS.RECORD_COUNT = 0
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRT-LN")
        }
    RunTask(DB101A_WRT_LN)
    ReturnValue(0)
}

SubRoutine.DB101A_WRT_LN {
    COBOL_DB101A_VARS.DUMMY_RECORD = " "
    ReturnValue(0)
}

SubRoutine.DB101A_BLANK_LINE_PRINT {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRT-LN")
        }
    RunTask(DB101A_WRT_LN)
    ReturnValue(0)
}

SubRoutine.DB101A_FAIL_ROUTINE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.COMPUTED_X, " ") ThenBlock: {
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL-ROUTINE-WRITE")
                    }
            RunTask(DB101A_FAIL_ROUTINE_WRITE)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.CORRECT_X, " ") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL-ROUTINE-WRITE")
                                    }
                        RunTask(DB101A_FAIL_ROUTINE_WRITE)
                        COBOL_DB101A_VARS.INFO_TEXT = "NO FURTHER INFORMATION, SEE PROGRAM."
                        COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.XXINFO
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM WRITE-LINE")
                                    }
                        RunTask(DB101A_WRITE_LINE)
                    }
        }
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM FAIL-ROUTINE-EX")
        }
    RunTask(DB101A_FAIL_ROUTINE_EX)
    ReturnValue(0)
}

SubRoutine.DB101A_FAIL_ROUTINE_WRITE {
    COBOL_DB101A_VARS.PRINT_REC = COBOL_DB101A_VARS.TEST_COMPUTED
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    COBOL_DB101A_VARS.PRINT_REC = COBOL_DB101A_VARS.TEST_CORRECT
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    ReturnValue(0)
}

SubRoutine.DB101A_FAIL_ROUTINE_EX {
    ReturnValue(0)
}

SubRoutine.DB101A_BAIL_OUT {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.COMPUTED_A, " ") ThenBlock: {
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM BAIL-OUT-WRITE")
                    }
            RunTask(DB101A_BAIL_OUT_WRITE)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.CORRECT_A, " ") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM BAIL-OUT-EX")
                                    }
                        RunTask(DB101A_BAIL_OUT_EX)
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_BAIL_OUT_WRITE {
    COBOL_DB101A_VARS.XXCORRECT = COBOL_DB101A_VARS.CORRECT_A
    COBOL_DB101A_VARS.XXCOMPUTED = COBOL_DB101A_VARS.COMPUTED_A
    COBOL_DB101A_VARS.DUMMY_RECORD = COBOL_DB101A_VARS.XXINFO
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM WRITE-LINE")
        }
    RunTask(DB101A_WRITE_LINE)
    ReturnValue(0)
}

SubRoutine.DB101A_BAIL_OUT_EX {
    ReturnValue(0)
}

SubRoutine.DB101A_CCVS1_EXIT {
    ReturnValue(0)
}

SubRoutine.DB101A_START_PROGRAM_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 1) ThenBlock: {
            COBOL_DB101A_VARS.RE_MARK = "USE PROCEDURE NOT EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM START-PROGRAM-WRITE")
                    }
            RunTask(DB101A_START_PROGRAM_WRITE)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
            COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM INSPT")
                    }
            RunTask(DB101A_INSPT)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM START-PROGRAM-WRITE")
                    }
            RunTask(DB101A_START_PROGRAM_WRITE)
            COBOL_DB101A_VARS.SIZE_5 = COBOL_DB101A_VARS.DBNAME_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_5, "CCVS1") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PASS")
                                    }
                        RunTask(DB101A_PASS)
                    } ElseBlock: {
                        COBOL_DB101A_VARS.CORRECT_A = "CCVS1"
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL")
                                    }
                        RunTask(DB101A_FAIL)
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_START_PROGRAM_TEST_1 {
    COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM START-PROGRAM-WRITE")
        }
    RunTask(DB101A_START_PROGRAM_WRITE)
    COBOL_DB101A_VARS.SIZE_13 = COBOL_DB101A_VARS.DBCONT_HOLD
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_13, "START PROGRAM") ThenBlock: {
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM PASS")
                    }
            RunTask(DB101A_PASS)
        } ElseBlock: {
            COBOL_DB101A_VARS.CORRECT_A = "START PROGRAM"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM START-PROGRAM-WRITE")
                    }
            RunTask(DB101A_START_PROGRAM_WRITE)
        }
    ReturnValue(0)
}

SubRoutine.DB101A_START_PROGRAM_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_START_PROGRAM_WRITE {
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    COBOL_DB101A_VARS.PAR_NAME = "START-PROGRAM-TEST"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_FALL_THROUGH_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 2) ThenBlock: {
            COBOL_DB101A_VARS.RE_MARK = "USE PROCEDURE NOT EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FALL-THROUGH-WRITE")
                    }
            RunTask(DB101A_FALL_THROUGH_WRITE)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
            COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM INSPT")
                    }
            RunTask(DB101A_INSPT)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FALL-THROUGH-WRITE")
                    }
            RunTask(DB101A_FALL_THROUGH_WRITE)
            COBOL_DB101A_VARS.SIZE_17 = COBOL_DB101A_VARS.DBNAME_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_17, "FALL-THROUGH-TEST") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PASS")
                                    }
                        RunTask(DB101A_PASS)
                    } ElseBlock: {
                        COBOL_DB101A_VARS.CORRECT_A = "FALL-THROUGH-TEST"
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL")
                                    }
                        RunTask(DB101A_FAIL)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FALL-THROUGH-WRITE")
                                    }
                        RunTask(DB101A_FALL_THROUGH_WRITE)
                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBCONT_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "FALL THROUGH") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        COBOL_DB101A_VARS.CORRECT_A = "FALL THROUGH"
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FALL-THROUGH-WRITE")
                                                        }
                                        RunTask(DB101A_FALL_THROUGH_WRITE)
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_FALL_THROUGH_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_FALL_THROUGH_WRITE {
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    COBOL_DB101A_VARS.PAR_NAME = "FALL-THROUGH-TEST"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_PROC_SERIES_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 2) ThenBlock: {
            COBOL_DB101A_VARS.RE_MARK = "USE PROCEDURE NOT EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM PROC-SERIES-WRITE")
                    }
            RunTask(DB101A_PROC_SERIES_WRITE)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
            COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM INSPT")
                    }
            RunTask(DB101A_INSPT)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM PROC-SERIES-WRITE")
                    }
            RunTask(DB101A_PROC_SERIES_WRITE)
            COBOL_DB101A_VARS.SIZE_16 = COBOL_DB101A_VARS.DBNAME_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_16, "PROC-SERIES-TEST") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PASS")
                                    }
                        RunTask(DB101A_PASS)
                    } ElseBlock: {
                        COBOL_DB101A_VARS.CORRECT_A = "PROC-SERIES-TEST"
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL")
                                    }
                        RunTask(DB101A_FAIL)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PROC-SERIES-WRITE")
                                    }
                        RunTask(DB101A_PROC_SERIES_WRITE)
                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBCONT_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "FALL THROUGH") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        COBOL_DB101A_VARS.CORRECT_A = "FALL THROUGH"
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PROC-SERIES-WRITE")
                                                        }
                                        RunTask(DB101A_PROC_SERIES_WRITE)
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_PROC_SERIES_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_PROC_SERIES_WRITE {
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    COBOL_DB101A_VARS.PAR_NAME = "PROC-SERIES-TEST"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_ALTERABLE_PARAGRAPH {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM GO-TO-TEST")
        }
    RunTask(DB101A_GO_TO_TEST)
    ReturnValue(0)
}

SubRoutine.DB101A_FILLER_PARAGRAPH {
    PrintMessage("ALTER FAILED AT ALTER-TEST-INIT")
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM FAIL")
        }
    RunTask(DB101A_FAIL)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM ALTERED-GO-TO-TEST")
        }
    RunTask(DB101A_ALTERED_GO_TO_TEST)
    ReturnValue(0)
}

SubRoutine.DB101A_GO_TO_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 3) ThenBlock: {
            COBOL_DB101A_VARS.RE_MARK = "USE PROCEDURE NOT EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM GO-TO-WRITE")
                    }
            RunTask(DB101A_GO_TO_WRITE)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
            COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM INSPT")
                    }
            RunTask(DB101A_INSPT)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM GO-TO-WRITE")
                    }
            RunTask(DB101A_GO_TO_WRITE)
            COBOL_DB101A_VARS.SIZE_10 = COBOL_DB101A_VARS.DBNAME_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_10, "GO-TO-TEST") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PASS")
                                    }
                        RunTask(DB101A_PASS)
                    } ElseBlock: {
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                        COBOL_DB101A_VARS.CORRECT_A = "GO-TO-TEST"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL")
                                    }
                        RunTask(DB101A_FAIL)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM GO-TO-WRITE")
                                    }
                        RunTask(DB101A_GO_TO_WRITE)
                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBCONT_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, " ") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                        COBOL_DB101A_VARS.CORRECT_A = "SPACES"
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM GO-TO-WRITE")
                                                        }
                                        RunTask(DB101A_GO_TO_WRITE)
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_GO_TO_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_GO_TO_WRITE {
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    COBOL_DB101A_VARS.PAR_NAME = "GO-TO-TEST"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_ALTER_TEST_INIT {
    ReturnValue(0)
}

SubRoutine.DB101A_ALTER_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 4) ThenBlock: {
            COBOL_DB101A_VARS.RE_MARK = "USE PROCEDURE NOT EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM ALTER-WRITE")
                    }
            RunTask(DB101A_ALTER_WRITE)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
            COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM INSPT")
                    }
            RunTask(DB101A_INSPT)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM ALTER-WRITE")
                    }
            RunTask(DB101A_ALTER_WRITE)
            COBOL_DB101A_VARS.SIZE_19 = COBOL_DB101A_VARS.DBNAME_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_19, "ALTERABLE-PARAGRAPH") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PASS")
                                    }
                        RunTask(DB101A_PASS)
                    } ElseBlock: {
                        COBOL_DB101A_VARS.CORRECT_A = "ALTERABLE-PARAGRAPH"
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL")
                                    }
                        RunTask(DB101A_FAIL)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM ALTER-WRITE")
                                    }
                        RunTask(DB101A_ALTER_WRITE)
                        COBOL_DB101A_VARS.SIZE_18 = COBOL_DB101A_VARS.DBCONT_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_18, "ALTERED-GO-TO-TEST") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        COBOL_DB101A_VARS.CORRECT_A = "ALTERED-GO-TO-TEST"
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM ALTER-WRITE")
                                                        }
                                        RunTask(DB101A_ALTER_WRITE)
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_ALTER_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_ALTER_WRITE {
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    COBOL_DB101A_VARS.PAR_NAME = "ALTER-TEST"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_ALTER_WRITE_END {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM ALTERABLE-PARAGRAPH")
        }
    RunTask(DB101A_ALTERABLE_PARAGRAPH)
    ReturnValue(0)
}

SubRoutine.DB101A_ALTERED_GO_TO_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 4) ThenBlock: {
            COBOL_DB101A_VARS.RE_MARK = "USE PROCEDURE NOT EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM ALTERED-GO-TO-WRITE")
                    }
            RunTask(DB101A_ALTERED_GO_TO_WRITE)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
            COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM INSPT")
                    }
            RunTask(DB101A_INSPT)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM ALTERED-GO-TO-WRITE")
                    }
            RunTask(DB101A_ALTERED_GO_TO_WRITE)
            COBOL_DB101A_VARS.SIZE_19 = COBOL_DB101A_VARS.DBNAME_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_19, "ALTERABLE-PARAGRAPH") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PASS")
                                    }
                        RunTask(DB101A_PASS)
                    } ElseBlock: {
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                        COBOL_DB101A_VARS.CORRECT_A = "ALTERABLE-PARAGRAPH"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL")
                                    }
                        RunTask(DB101A_FAIL)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM ALTERED-GO-TO-WRITE")
                                    }
                        RunTask(DB101A_ALTERED_GO_TO_WRITE)
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.DBCONT_HOLD, " ") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                        COBOL_DB101A_VARS.CORRECT_A = "SPACES"
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM ALTERED-GO-TO-WRITE")
                                                        }
                                        RunTask(DB101A_ALTERED_GO_TO_WRITE)
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_ALTERED_GO_TO_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_ALTERED_GO_TO_WRITE {
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    COBOL_DB101A_VARS.PAR_NAME = "ALTERED-GO-TO-TEST"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_PERF_ITERATION_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM LOOP-ROUTINE")
        }
    RunTask(DB101A_LOOP_ROUTINE)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 5) ThenBlock: {
            COBOL_DB101A_VARS.CORRECT_A = "05"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.RESULT_FLAG
            COBOL_DB101A_VARS.RE_MARK = "NO. OF TIMES USE PROC EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
        } ElseBlock: {
            COBOL_DB101A_VARS.RE_MARK = "PROC EXECUTED FIVE TIMES"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM PASS")
                    }
            RunTask(DB101A_PASS)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 0) ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PERF-ITERATION-WRITE")
                                    }
                        RunTask(DB101A_PERF_ITERATION_WRITE)
                    } ElseBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PERF-ITERATION-WRITE")
                                    }
                        RunTask(DB101A_PERF_ITERATION_WRITE)
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM INSPT")
                                    }
                        RunTask(DB101A_INSPT)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
                        COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PERF-ITERATION-WRITE")
                                    }
                        RunTask(DB101A_PERF_ITERATION_WRITE)
                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBNAME_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "LOOP-ROUTINE") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        COBOL_DB101A_VARS.CORRECT_A = "LOOP-ROUTINE"
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PERF-ITERATION-WRITE")
                                                        }
                                        RunTask(DB101A_PERF_ITERATION_WRITE)
                                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBCONT_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] IF condition")
                                                        }
                                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "PERFORM LOOP") ThenBlock: {
                                                            Debug("cobol.trace", level=3) {
                                                                                    PrintMessage("[COBOL] PERFORM PASS")
                                                                                }
                                                            RunTask(DB101A_PASS)
                                                        } ElseBlock: {
                                                            COBOL_DB101A_VARS.CORRECT_A = "PERFORM LOOP"
                                                            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                                            Debug("cobol.trace", level=3) {
                                                                                    PrintMessage("[COBOL] PERFORM FAIL")
                                                                                }
                                                            RunTask(DB101A_FAIL)
                                                            COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                                            Debug("cobol.trace", level=3) {
                                                                                    PrintMessage("[COBOL] PERFORM PERF-ITERATION-WRITE")
                                                                                }
                                                            RunTask(DB101A_PERF_ITERATION_WRITE)
                                                        }
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_PERF_ITERATION_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_PERF_ITERATION_WRITE {
    COBOL_DB101A_VARS.PAR_NAME = "PERF-ITERATION-TEST"
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_PERF_ITERATION_END {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PERFORM-THRU-TEST")
        }
    RunTask(DB101A_PERFORM_THRU_TEST)
    ReturnValue(0)
}

SubRoutine.DB101A_LOOP_ROUTINE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DO-NOTHING")
        }
    RunTask(DB101A_DO_NOTHING)
    ReturnValue(0)
}

SubRoutine.DB101A_DO_NOTHING {
    COBOL_DB101A_VARS.D = Add(Add(COBOL_DB101A_VARS.A, COBOL_DB101A_VARS.B), COBOL_DB101A_VARS.C)
    ReturnValue(0)
}

SubRoutine.DB101A_DO_NOTHING_1 {
    COBOL_DB101A_VARS.B = Subtract(COBOL_DB101A_VARS.B, COBOL_DB101A_VARS.A)
    ReturnValue(0)
}

SubRoutine.DB101A_PERFORM_THRU_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DO-NOTHING")
        }
    RunTask(DB101A_DO_NOTHING)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 5) ThenBlock: {
            COBOL_DB101A_VARS.CORRECT_A = "05"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.RESULT_FLAG
            COBOL_DB101A_VARS.RE_MARK = "NO. OF TIMES USE PROC EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
        } ElseBlock: {
            COBOL_DB101A_VARS.RE_MARK = "PROC EXECUTED FIVE TIMES"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM PASS")
                    }
            RunTask(DB101A_PASS)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 0) ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PERFORM-THRU-WRITE")
                                    }
                        RunTask(DB101A_PERFORM_THRU_WRITE)
                    } ElseBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PERFORM-THRU-WRITE")
                                    }
                        RunTask(DB101A_PERFORM_THRU_WRITE)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
                        COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM INSPT")
                                    }
                        RunTask(DB101A_INSPT)
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PERFORM-THRU-WRITE")
                                    }
                        RunTask(DB101A_PERFORM_THRU_WRITE)
                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBNAME_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "DO-NOTHING-1") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        COBOL_DB101A_VARS.CORRECT_A = "DO-NOTHING-1"
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PERFORM-THRU-WRITE")
                                                        }
                                        RunTask(DB101A_PERFORM_THRU_WRITE)
                                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBCONT_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] IF condition")
                                                        }
                                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "FALL THROUGH") ThenBlock: {
                                                            Debug("cobol.trace", level=3) {
                                                                                    PrintMessage("[COBOL] PERFORM PASS")
                                                                                }
                                                            RunTask(DB101A_PASS)
                                                        } ElseBlock: {
                                                            COBOL_DB101A_VARS.CORRECT_A = "FALL THROUGH"
                                                            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                                            Debug("cobol.trace", level=3) {
                                                                                    PrintMessage("[COBOL] PERFORM FAIL")
                                                                                }
                                                            RunTask(DB101A_FAIL)
                                                            COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                                            Debug("cobol.trace", level=3) {
                                                                                    PrintMessage("[COBOL] PERFORM PERFORM-THRU-WRITE")
                                                                                }
                                                            RunTask(DB101A_PERFORM_THRU_WRITE)
                                                        }
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_PERFORM_THRU_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_PERFORM_THRU_WRITE {
    COBOL_DB101A_VARS.PAR_NAME = "PERFORM-THRU-TEST"
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_SIMPLE_PERFORM_TEST {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM LOOP-ROUTINE")
        }
    RunTask(DB101A_LOOP_ROUTINE)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] IF condition")
        }
    IfCondition EqualTo(COBOL_DB101A_VARS.RESULT_FLAG, 1) ThenBlock: {
            COBOL_DB101A_VARS.RE_MARK = "USE PROCEDURE NOT EXECUTED"
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM FAIL")
                    }
            RunTask(DB101A_FAIL)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM SIMPLE-PERFORM-WRITE")
                    }
            RunTask(DB101A_SIMPLE_PERFORM_WRITE)
            COBOL_DB101A_VARS.RE_MARK = "DEBUG-LINE; SEE NEXT LINE"
            COBOL_DB101A_VARS.CORRECT_A = "<===  DEBUG-LINE"
            COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBLINE_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM INSPT")
                    }
            RunTask(DB101A_INSPT)
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] PERFORM SIMPLE-PERFORM-WRITE")
                    }
            RunTask(DB101A_SIMPLE_PERFORM_WRITE)
            COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBNAME_HOLD
            Debug("cobol.trace", level=3) {
                        PrintMessage("[COBOL] IF condition")
                    }
            IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "LOOP-ROUTINE") ThenBlock: {
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM PASS")
                                    }
                        RunTask(DB101A_PASS)
                    } ElseBlock: {
                        COBOL_DB101A_VARS.CORRECT_A = "LOOP-ROUTINE"
                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBNAME_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM FAIL")
                                    }
                        RunTask(DB101A_FAIL)
                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-NAME"
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] PERFORM SIMPLE-PERFORM-WRITE")
                                    }
                        RunTask(DB101A_SIMPLE_PERFORM_WRITE)
                        COBOL_DB101A_VARS.SIZE_12 = COBOL_DB101A_VARS.DBCONT_HOLD
                        Debug("cobol.trace", level=3) {
                                        PrintMessage("[COBOL] IF condition")
                                    }
                        IfCondition EqualTo(COBOL_DB101A_VARS.SIZE_12, "PERFORM LOOP") ThenBlock: {
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM PASS")
                                                        }
                                        RunTask(DB101A_PASS)
                                    } ElseBlock: {
                                        COBOL_DB101A_VARS.CORRECT_A = "PERFORM LOOP"
                                        COBOL_DB101A_VARS.COMPUTED_A = COBOL_DB101A_VARS.DBCONT_HOLD
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM FAIL")
                                                        }
                                        RunTask(DB101A_FAIL)
                                        COBOL_DB101A_VARS.RE_MARK = "DEBUG-CONTENTS"
                                        Debug("cobol.trace", level=3) {
                                                            PrintMessage("[COBOL] PERFORM SIMPLE-PERFORM-WRITE")
                                                        }
                                        RunTask(DB101A_SIMPLE_PERFORM_WRITE)
                                    }
                    }
        }
    ReturnValue(0)
}

SubRoutine.DB101A_SIMPLE_PERFORM_DELETE {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_SIMPLE_PERFORM_WRITE {
    COBOL_DB101A_VARS.PAR_NAME = "SIMPLE-PERFORM-TEST"
    COBOL_DB101A_VARS.FEATURE = "DEBUG ON PROC-NAME"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    COBOL_DB101A_VARS.RESULT_FLAG = 0
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TESTS_INIT {
    COBOL_DB101A_VARS.FEATURE = "DEBUG LINE TESTS"
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TEST_01 {
    COBOL_DB101A_VARS.RE_MARK = "COMPLETE ENTITY"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM FAIL")
        }
    RunTask(DB101A_FAIL)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DEBUG-LINE-WRITE-01")
        }
    RunTask(DB101A_DEBUG_LINE_WRITE_01)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_DELETE_01 {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_WRITE_01 {
    COBOL_DB101A_VARS.PAR_NAME = "DEBUG-LINE-TEST-01"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TEST_02 {
    COBOL_DB101A_VARS.RE_MARK = "CONSECUTIVE DEBUG LINES"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM FAIL")
        }
    RunTask(DB101A_FAIL)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DEBUG-LINE-WRITE-02")
        }
    RunTask(DB101A_DEBUG_LINE_WRITE_02)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_DELETE_02 {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_WRITE_02 {
    COBOL_DB101A_VARS.PAR_NAME = "DEBUG-LINE-TEST-02"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TEST_03 {
    COBOL_DB101A_VARS.RE_MARK = "BROKEN STATEMENTS"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM FAIL")
        }
    RunTask(DB101A_FAIL)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DEBUG-LINE-WRITE-03")
        }
    RunTask(DB101A_DEBUG_LINE_WRITE_03)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_DELETE_03 {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_WRITE_03 {
    COBOL_DB101A_VARS.PAR_NAME = "DEBUG-LINE-TEST-03"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TEST_04 {
    COBOL_DB101A_VARS.RE_MARK = "NESTED COMMENTS"
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TEST_04_B {
    COBOL_DB101A_VARS.COMPUTED_A = "    FAILURE 04B"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM FAIL")
        }
    RunTask(DB101A_FAIL)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DEBUG-LINE-WRITE-04")
        }
    RunTask(DB101A_DEBUG_LINE_WRITE_04)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_DELETE_04 {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_WRITE_04 {
    COBOL_DB101A_VARS.PAR_NAME = "DEBUG-LINE-TEST-04"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TEST_05 {
    COBOL_DB101A_VARS.RE_MARK = "NESTED INSIDE COMMENTS"
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_TEST_05_C {
    COBOL_DB101A_VARS.COMPUTED_A = "    FAILURE 05C"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM FAIL")
        }
    RunTask(DB101A_FAIL)
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DEBUG-LINE-WRITE-05")
        }
    RunTask(DB101A_DEBUG_LINE_WRITE_05)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_DELETE_05 {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM DE-LETE")
        }
    RunTask(DB101A_DE_LETE)
    ReturnValue(0)
}

SubRoutine.DB101A_DEBUG_LINE_WRITE_05 {
    COBOL_DB101A_VARS.PAR_NAME = "DEBUG-LINE-TEST-05"
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM PRINT-DETAIL")
        }
    RunTask(DB101A_PRINT_DETAIL)
    ReturnValue(0)
}

SubRoutine.DB101A_CCVS_EXIT {
    RunTask(DB101A_CCVS_999999)
    ReturnValue(0)
}

SubRoutine.DB101A_CCVS_999999 {
    Debug("cobol.trace", level=3) {
            PrintMessage("[COBOL] PERFORM CLOSE-FILES")
        }
    RunTask(DB101A_CLOSE_FILES)
    ReturnValue(0)
}

SubRoutine.DB101A_DECLARATIVES {
    ReturnValue(0)
}

SubRoutine.Main {
    RunTask(DB101A)
}

RunTask(Main)
