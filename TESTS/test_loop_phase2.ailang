// test_loop_phase2.ailang - Phase 2: Multiple SubRoutines and Loop structures

PrintMessage("==================================================")
PrintMessage("      AILANG LOOP MODEL - PHASE 2 TESTING")
PrintMessage("==================================================")
PrintMessage("")

// ==========================================
// TEST 1: MULTIPLE SUBROUTINES
// ==========================================
PrintMessage("TEST 1: Multiple SubRoutines")
PrintMessage("-----------------------------")

SubRoutine.First {
    PrintMessage("  First SubRoutine called")
}

SubRoutine.Second {
    PrintMessage("  Second SubRoutine called")
}

SubRoutine.Third {
    PrintMessage("  Third SubRoutine called")
}

// Call them in order
RunTask.First()
RunTask.Second()
RunTask.Third()

// Call them in reverse order to verify independence
RunTask.Third()
RunTask.Second()
RunTask.First()

PrintMessage("")

// ==========================================
// TEST 2: NESTED SUBROUTINE CALLS
// ==========================================
PrintMessage("TEST 2: Nested SubRoutine Calls")
PrintMessage("--------------------------------")

SubRoutine.Outer {
    PrintMessage("  Outer: start")
    RunTask.Inner()
    PrintMessage("  Outer: end")
}

SubRoutine.Inner {
    PrintMessage("    Inner: executing")
    RunTask.Deepest()
}

SubRoutine.Deepest {
    PrintMessage("      Deepest: hello from the depths!")
}

// Test the nested chain
RunTask.Outer()

PrintMessage("")

// ==========================================
// TEST 3: FORWARD REFERENCES
// ==========================================
PrintMessage("TEST 3: Forward References")
PrintMessage("--------------------------")

// Call before definition
RunTask.ForwardDefined()

SubRoutine.ForwardDefined {
    PrintMessage("  Forward reference worked!")
}

// Call after definition
RunTask.ForwardDefined()

PrintMessage("")

// ==========================================
// TEST 4: SUBROUTINES WITH DATA
// ==========================================
PrintMessage("TEST 4: SubRoutines with Variables")
PrintMessage("-----------------------------------")

// Global counter
counter = 0

SubRoutine.IncrementCounter {
    counter = Add(counter, 1)
    PrintMessage("  Counter incremented:")
    PrintNumber(counter)
}

SubRoutine.ResetCounter {
    counter = 0
    PrintMessage("  Counter reset to 0")
}

SubRoutine.DoubleCounter {
    counter = Multiply(counter, 2)
    PrintMessage("  Counter doubled:")
    PrintNumber(counter)
}

// Test data manipulation
RunTask.IncrementCounter()
RunTask.IncrementCounter()
RunTask.IncrementCounter()
RunTask.DoubleCounter()
RunTask.ResetCounter()
RunTask.IncrementCounter()

PrintMessage("")

// ==========================================
// TEST 5: LOOPMAIN (Inline execution)
// ==========================================
PrintMessage("TEST 5: LoopMain")
PrintMessage("----------------")

LoopMain.Application {
    PrintMessage("  LoopMain executing")
    PrintMessage("  This runs inline in main flow")
    
    // Can call SubRoutines
    RunTask.First()
    
    PrintMessage("  LoopMain complete")
}

PrintMessage("")

// ==========================================
// TEST 6: LOOPSTART (Should run first)
// ==========================================
PrintMessage("TEST 6: LoopStart")
PrintMessage("-----------------")

LoopStart.SystemInit {
    PrintMessage("  LoopStart: This should have run before everything else")
    PrintMessage("  (Implementation pending - currently runs inline)")
}

PrintMessage("")

// ==========================================
// TEST 7: LOOPACTOR (Basic structure)
// ==========================================
PrintMessage("TEST 7: LoopActor")
PrintMessage("-----------------")

LoopActor.TestActor {
    PrintMessage("  LoopActor defined")
    PrintMessage("  (Message passing implementation pending)")
}

PrintMessage("")

// ==========================================
// TEST 8: LOOPSHADOW (Background task)
// ==========================================
PrintMessage("TEST 8: LoopShadow")
PrintMessage("------------------")

LoopShadow.BackgroundTask {
    PrintMessage("  LoopShadow defined")
    PrintMessage("  (Background execution pending)")
}

PrintMessage("")

// ==========================================
// FINAL SUMMARY
// ==========================================
PrintMessage("==================================================")
PrintMessage("           PHASE 2 TEST COMPLETE")
PrintMessage("==================================================")
PrintMessage("")
PrintMessage("Results:")
PrintMessage("✓ Multiple SubRoutines working")
PrintMessage("✓ Nested SubRoutine calls working")
PrintMessage("✓ Forward references working")
PrintMessage("✓ SubRoutines with shared data working")
PrintMessage("✓ LoopMain structure recognized")
PrintMessage("✓ LoopStart structure recognized")
PrintMessage("✓ LoopActor structure recognized")
PrintMessage("✓ LoopShadow structure recognized")
PrintMessage("")
PrintMessage("Next: Implement message passing and scheduling")