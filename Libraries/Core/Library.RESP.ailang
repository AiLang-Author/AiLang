// Library.RESP.ailang
// Redis Serialization Protocol (RESP) library
// Fixed parameter syntax - AIlang expects identifiers only

LibraryImport.Protocol.RESP {
    
    // RESP type markers
    Constant.RESP.SIMPLE_STRING = 43    // '+'
    Constant.RESP.ERROR = 45            // '-'
    Constant.RESP.INTEGER = 58          // ':'
    Constant.RESP.BULK_STRING = 36      // '$'
    Constant.RESP.ARRAY = 42            // '*'
    Constant.RESP.CR = 13               // '\r'
    Constant.RESP.LF = 10               // '\n'
    
    // Build a simple string response: +OK\r\n
    Function.RESP.SimpleString {
        Input: message
        Output: Array
        Body: {
            // Calculate length: 1 ('+') + message_len + 2 ('\r\n')
            msg_len = 2  // Hardcoded for now
            IfCondition EqualTo(message, "PONG") ThenBlock {
                msg_len = 4
            }
            
            total_len = Add(msg_len, 3)
            response = ArrayCreate(total_len)
            
            // Add '+'
            ArraySet(response, 0, RESP.SIMPLE_STRING)
            
            // Add message bytes (simplified for OK and PONG)
            IfCondition EqualTo(message, "OK") ThenBlock {
                ArraySet(response, 1, 79)  // 'O'
                ArraySet(response, 2, 75)  // 'K'
            }
            
            IfCondition EqualTo(message, "PONG") ThenBlock {
                ArraySet(response, 1, 80)  // 'P'
                ArraySet(response, 2, 79)  // 'O'
                ArraySet(response, 3, 78)  // 'N'
                ArraySet(response, 4, 71)  // 'G'
            }
            
            // Add \r\n
            ArraySet(response, Subtract(total_len, 2), RESP.CR)
            ArraySet(response, Subtract(total_len, 1), RESP.LF)
            
            ReturnValue(response)
        }
    }
    
    // Build an error response: -ERR message\r\n
    Function.RESP.Error {
        Input: message
        Output: Array
        Body: {
            // Simple error: -ERR\r\n
            response = ArrayCreate(6)
            ArraySet(response, 0, RESP.ERROR)
            ArraySet(response, 1, 69)  // 'E'
            ArraySet(response, 2, 82)  // 'R'
            ArraySet(response, 3, 82)  // 'R'
            ArraySet(response, 4, RESP.CR)
            ArraySet(response, 5, RESP.LF)
            ReturnValue(response)
        }
    }
    
    // Build a null bulk string: $-1\r\n
    Function.RESP.NullBulkString {
        Output: Array
        Body: {
            response = ArrayCreate(5)
            ArraySet(response, 0, RESP.BULK_STRING)
            ArraySet(response, 1, 45)  // '-'
            ArraySet(response, 2, 49)  // '1'
            ArraySet(response, 3, RESP.CR)
            ArraySet(response, 4, RESP.LF)
            ReturnValue(response)
        }
    }
    
    // Build an integer response: :1000\r\n
    Function.RESP.Integer {
        Input: value
        Output: Array
        Body: {
            // For simplicity, handle single digit (0-9) for now
            response = ArrayCreate(4)
            ArraySet(response, 0, RESP.INTEGER)
            
            // Convert single digit to ASCII
            digit = Add(value, 48)  // '0' = 48
            ArraySet(response, 1, digit)
            
            ArraySet(response, 2, RESP.CR)
            ArraySet(response, 3, RESP.LF)
            ReturnValue(response)
        }
    }
    
    // Parse command type from buffer (check first byte)
    Function.RESP.GetCommandType {
        Input: buffer
        Output: Text
        Body: {
            first = ArrayGet(buffer, 0)
            
            // Check for PING command (simplified)
            IfCondition EqualTo(first, 80) ThenBlock {  // 'P'
                ReturnValue("PING")
            }
            
            IfCondition EqualTo(first, 83) ThenBlock {  // 'S'
                ReturnValue("SET")
            }
            
            IfCondition EqualTo(first, 71) ThenBlock {  // 'G'
                ReturnValue("GET")
            }
            
            IfCondition EqualTo(first, RESP.ARRAY) ThenBlock {
                // It's a proper RESP command array
                cmd_byte = ArrayGet(buffer, 10)
                IfCondition EqualTo(cmd_byte, 80) ThenBlock {
                    ReturnValue("PING")
                }
            }
            
            ReturnValue("UNKNOWN")
        }
    }
    
    // Get response length (for sending)
    Function.RESP.GetResponseLength {
        Input: response
        Body: {
            // Find \n by scanning array
            len = 0
            WhileLoop LessThan(len, 100) {
                byte = ArrayGet(response, len)
                IfCondition EqualTo(byte, RESP.LF) ThenBlock {
                    ReturnValue(Add(len, 1))
                }
                len = Add(len, 1)
            }
            ReturnValue(len)
        }
    }
}