// Library.TcpServer.ailang
// TCP Server library for AILang

LibraryImport.Network.TcpServer {
    
    // Create and bind a server socket
    Function.Network.CreateServer {
        Input: (port: Integer)
        Output: Integer
        Body: {
            sock = SocketCreate()
            IfCondition LessThan(sock, 3) ThenBlock {
                PrintMessage("Failed to create socket")
                ReturnValue(-1)
            }
            
            // Bind to any address on specified port
            bind_result = SocketBind(sock, 0, port)
            IfCondition NotEqual(bind_result, 0) ThenBlock {
                PrintMessage("Failed to bind to port")
                SocketClose(sock)
                ReturnValue(-1)
            }
            
            ReturnValue(sock)
        }
    }
    
    // Start listening on server socket
    Function.Network.StartListening {
        Input: (server: Integer, backlog: Integer)
        Output: Integer
        Body: {
            result = SocketListen(server, backlog)
            ReturnValue(result)
        }
    }
    
    // Accept client with timeout (non-blocking simulation)
    Function.Network.AcceptClient {
        Input: (server: Integer)
        Output: Integer
        Body: {
            client = SocketAccept(server)
            ReturnValue(client)
        }
    }
    
    // Handle echo for a client
    Function.Network.HandleEcho {
        Input: (client: Integer)
        Output: Integer
        Body: {
            buffer = ArrayCreate(256)
            bytes_read = SocketRead(client, buffer, 256)
            
            IfCondition GreaterThan(bytes_read, 0) ThenBlock {
                bytes_sent = SocketWrite(client, buffer, bytes_read)
                ReturnValue(bytes_sent)
            } ElseBlock {
                ReturnValue(0)
            }
        }
    }
    
    // Graceful server shutdown
    Function.Network.ShutdownServer {
        Input: (server: Integer)
        Output: Integer
        Body: {
            result = SocketClose(server)
            ReturnValue(result)
        }
    }
}