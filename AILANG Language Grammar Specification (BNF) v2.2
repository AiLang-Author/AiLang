# AILANG Language Grammar Specification (BNF) v2.2
# ==============================================
# The World's First Verb-First, Cache-Aware, Pool-Optimized Systems Language
# Consolidated from v2.0:contentReference[oaicite:0]{index=0} and v2.1 (StringPool, DebugPerf, Arrays/Maps, Pragmas)
# Date: 2025-09-10
#
# Grammar Notation:
# - ::= means "is defined as"
# - | means "or" (alternative)
# - [ ] means optional
# - { } means zero or more repetitions
# - ( ) means grouping
# - Terminals are in quotes or UPPERCASE
# - Non-terminals are in lowercase or CamelCase

# ==============================================
# TOP-LEVEL PROGRAM STRUCTURE
# ==============================================

<program> ::= { <declaration> | <statement> }

<declaration> ::= <library_declaration>
                | <pool_declaration>
                | <loop_declaration>
                | <subroutine_declaration>
                | <function_declaration>
                | <combinator_declaration>
                | <macro_block_declaration>
                | <security_context_declaration>
                | <constrained_type_declaration>
                | <constant_declaration>
                | <acronym_definitions>
                | <interrupt_handler_declaration>
                | <device_driver_declaration>
                | <bootloader_declaration>
                | <kernel_entry_declaration>

# ==============================================
# LIBRARY DECLARATIONS (from v2.0):contentReference[oaicite:1]{index=1}
# ==============================================

<library_declaration> ::= "LibraryImport" "." <dotted_name> "{" <library_body> "}"
<library_body> ::= { <function_declaration> | <constant_declaration> }
<dotted_name> ::= IDENTIFIER { "." IDENTIFIER }

# ==============================================
# POOL DECLARATIONS (v2.0) + POOL OPERATIONS (v2.1)
# ==============================================

<pool_declaration> ::= <pool_type> IDENTIFIER "{" <pool_body> "}"

<pool_type> ::= "FixedPool"
              | "DynamicPool"
              | "TemporalPool"
              | "NeuralPool"
              | "KernelPool"
              | "ActorPool"
              | "SecurityPool"
              | "ConstrainedPool"
              | "FilePool"
              | "StringPool"

<pool_body> ::= { <subpool_declaration> | <resource_item> }

<subpool_declaration> ::= "SubPool" "." IDENTIFIER "{" { <resource_item> } "}"

<resource_item> ::= STRING ":" [ "Initialize" "-" <expression> ] [ "," <attribute_list> ]

<attribute_list> ::= <attribute> { "," <attribute> }
<attribute> ::= <attribute_name> "-" <expression>
<attribute_name> ::= "CanChange" | "CanBeNull" | "Range" | "MaximumLength" | "MinimumLength" | "ElementType" | IDENTIFIER

# POOL OPERATIONS (v2.1)
<pool_operation> ::= <string_pool_operation>
                   | <memory_pool_operation>
                   | <dynamic_pool_operation>

<string_pool_operation> ::= "StringPool" "." <string_pool_op> "(" [ <argument_list> ] ")"
<string_pool_op> ::= "Init" | "Status" | "Reset" | "Resize"

<memory_pool_operation> ::= "MemoryPool" "." <memory_pool_op> "(" [ <argument_list> ] ")"
<memory_pool_op> ::= "Allocate" | "Free" | "Compact"

<dynamic_pool_operation> ::= "DynamicPool" "." IDENTIFIER "(" [ <argument_list> ] ")"

# ==============================================
# FUNCTION AND SUBROUTINE DECLARATIONS (from v2.0):contentReference[oaicite:2]{index=2}
# ==============================================

<function_declaration> ::= "Function" "." <dotted_name> "{" <function_body> "}"
<function_body> ::= [ <input_declaration> ] [ <output_declaration> ] [ <body_declaration> ]
<input_declaration> ::= "Input" ":" ( "(" <parameter_list> ")" | <parameter> )
<output_declaration> ::= "Output" ":" <type_expression>
<body_declaration> ::= "Body" ":" "{" { <statement> } "}"
<parameter_list> ::= <parameter> { "," <parameter> }
<parameter> ::= IDENTIFIER ":" <type_expression>

<subroutine_declaration> ::= "SubRoutine" "." <dotted_name> "{" { <statement> } "}"

# ==============================================
# LOOP CONCURRENCY MODEL (from v2.0):contentReference[oaicite:3]{index=3}
# ==============================================

<loop_declaration> ::= <loop_main_declaration>
                     | <loop_actor_declaration>
                     | <loop_start_declaration>
                     | <loop_shadow_declaration>

<loop_main_declaration> ::= "LoopMain" "." IDENTIFIER "{" { <statement> } "}"
<loop_actor_declaration> ::= "LoopActor" "." IDENTIFIER "{" { <loop_actor_body> } "}"
<loop_start_declaration> ::= "LoopStart" "." IDENTIFIER "{" { <statement> } "}"
<loop_shadow_declaration> ::= "LoopShadow" "." IDENTIFIER "{" { <statement> } "}"

<loop_actor_body> ::= <statement> | <loop_receive_block> | <loop_state_declaration>
<loop_state_declaration> ::= IDENTIFIER "=" <expression>

# Loop Communication & Control
<statement> ::= ... | <loop_send> | <loop_receive_block> | <loop_reply> | <loop_yield>
              | <loop_continue> | <loop_spawn> | <loop_join> | <loop_interrupt>
              | <loop_transaction> | <loop_sequence> | <loop_select> | <loop_catch>
              | <loop_timeout> | <loop_barrier> | <loop_flow>

<loop_send> ::= "LoopSend" "(" <expression> "," <expression> ")"
<loop_receive_block> ::= "LoopReceive" [ IDENTIFIER ] "{" { <loop_case> } "}"
<loop_case> ::= "case" ( STRING | IDENTIFIER ) ":" ( <statement> | "{" { <statement> } "}" )
<loop_reply> ::= "LoopReply" "(" <expression> ")"

<loop_continue> ::= "LoopContinue" "{" { <statement> } "}"
<loop_yield> ::= "LoopYield" [ "(" <expression> ")" ]

<loop_sequence> ::= "LoopSequence" "." IDENTIFIER "{" { <sequence_step> } "}"
<sequence_step> ::= IDENTIFIER ":" <statement>

<loop_transaction> ::= "LoopTransaction" "{" { <statement> } "}" [ "OnFailure" "{" { <statement> } "}" ]

<loop_spawn> ::= "LoopSpawn" "(" <loop_reference> [ "," <expression> ] ")"
<loop_reference> ::= "LoopActor" "." IDENTIFIER | "LoopShadow" "." IDENTIFIER
<loop_join> ::= "LoopJoin" "(" <expression> [ "," "timeout" ":" NUMBER ] ")"
<loop_interrupt> ::= "LoopInterrupt" "(" <expression> "," "signal" ":" STRING ")"

<loop_catch> ::= "LoopCatch" "{" { <statement> } "}" "OnError" [ IDENTIFIER ] "{" { <statement> } "}"
<loop_timeout> ::= "LoopTimeout" "(" NUMBER ")" "{" { <statement> } "}" [ "OnTimeout" "{" { <statement> } "}" ]

<loop_barrier> ::= "LoopBarrier" "." IDENTIFIER "{" <barrier_config> "}"
<barrier_config> ::= "participants" ":" NUMBER [ "OnComplete" ":" <statement> ]

<loop_select> ::= "LoopSelect" "{" { <select_case> } [ "timeout" NUMBER ":" <statement> ] "}"
<select_case> ::= "case" IDENTIFIER ":" <statement>

<loop_flow> ::= "LoopFlow" "." ( "Send" | "Receive" ) "(" <expression> [ "," <flow_options> ] ")"
<flow_options> ::= "pressure" ":" STRING | "timeout" ":" NUMBER

# RunTask for SubRoutine (from v2.0):contentReference[oaicite:4]{index=4}
<run_task> ::= "RunTask" "." <dotted_name> "(" [ <argument_list> ] ")"

# ==============================================
# LAMBDAS & COMBINATORS (from v2.0):contentReference[oaicite:5]{index=5}
# ==============================================

<lambda_expression> ::= "Lambda" "(" [ <parameter_name_list> ] ")" "{" <expression> "}"
<parameter_name_list> ::= IDENTIFIER { "," IDENTIFIER }
<combinator_declaration> ::= "Combinator" "." IDENTIFIER "=" <expression>

# ==============================================
# MACROS (from v2.0):contentReference[oaicite:6]{index=6}
# ==============================================

<macro_block_declaration> ::= "MacroBlock" "." <dotted_name> "{" { <macro_definition> } "}"
<macro_definition> ::= "Macro" "." IDENTIFIER "(" [ <parameter_name_list> ] ")" "=" <expression>

# ==============================================
# SECURITY (from v2.0):contentReference[oaicite:7]{index=7}
# ==============================================

<security_context_declaration> ::= "SecurityContext" "." IDENTIFIER "{" { <security_level> } "}"
<security_level> ::= "Level" "." IDENTIFIER "=" "{" <security_level_body> "}"
<security_level_body> ::= { <security_attribute> [ "," ] }
<security_attribute> ::= "AllowedOperations" ":" <string_array>
                        | "DeniedOperations" ":" <string_array>
                        | "MemoryLimit" ":" <expression>
                        | "CPUQuota" ":" <expression>
<string_array> ::= "[" [ STRING { "," STRING } ] "]"

# ==============================================
# TYPE & CONSTANT DECLARATIONS (from v2.0):contentReference[oaicite:8]{index=8}
# ==============================================

<constrained_type_declaration> ::= "ConstrainedType" "." IDENTIFIER "=" <type_expression> "Where" "{" <expression> "}"
<constant_declaration> ::= "Constant" "." IDENTIFIER "=" <expression>

# ==============================================
# SYSTEMS DECLARATIONS (from v2.0):contentReference[oaicite:9]{index=9}
# ==============================================

<interrupt_handler_declaration> ::= "InterruptHandler" "." IDENTIFIER "(" <expression> ")" "{" { <statement> } "}"
<device_driver_declaration> ::= "DeviceDriver" "." IDENTIFIER ":" IDENTIFIER "{" { <device_operation> } "}"
<device_operation> ::= IDENTIFIER ":" <expression>
<bootloader_declaration> ::= "Bootloader" "." IDENTIFIER "{" { <statement> } "}"
<kernel_entry_declaration> ::= "KernelEntry" "." IDENTIFIER [ "(" <parameter_list> ")" ] "{" { <statement> } "}"

# ==============================================
# ACRONYM DEFINITIONS (from v2.0):contentReference[oaicite:10]{index=10}
# ==============================================

<acronym_definitions> ::= "AcronymDefinitions" "{" { <acronym_definition> } "}"
<acronym_definition> ::= IDENTIFIER "=" ( STRING | IDENTIFIER ) [ "," ]

# ==============================================
# STATEMENTS (merged)
# ==============================================

<statement> ::= <assignment>
              | <if_statement>
              | <while_statement>
              | <for_statement>
              | <choose_statement>
              | <try_statement>
              | <print_statement>
              | <return_statement>
              | <break_statement>
              | <continue_statement>
              | <halt_statement>
              | <send_message>
              | <receive_message>
              | <every_interval>
              | <with_security>
              | <interrupt_control>
              | <inline_assembly>
              | <system_call>
              | <vm_operation>
              | <function_call>
              | <run_task>
              | <run_macro>
              | <debug_operation>          # v2.1
              | <pragma>                   # v2.1

<assignment> ::= IDENTIFIER "=" <expression>

# ==============================================
# CONTROL FLOW (from v2.0):contentReference[oaicite:11]{index=11}
# ==============================================

<if_statement> ::= "IfCondition" <expression> "ThenBlock" "{" { <statement> } "}"
                  [ "ElseBlock" "{" { <statement> } "}" ]

<while_statement> ::= "WhileLoop" <expression> "{" { <statement> } "}"

<for_statement> ::= "ForEvery" IDENTIFIER "in" <expression> "{" { <statement> } "}"

<choose_statement> ::= "ChoosePath" "(" <expression> ")" "{" { <case_option> } [ <default_option> ] "}"
<case_option> ::= "CaseOption" STRING ":" <statement>
<default_option> ::= "DefaultOption" ":" <statement>

<try_statement> ::= "TryBlock" ":" "{" { <statement> } "}"
                   { <catch_clause> }
                   [ <finally_clause> ]
<catch_clause> ::= "CatchError" "." IDENTIFIER "{" { <statement> } "}"
<finally_clause> ::= "FinallyBlock" ":" "{" { <statement> } "}"

# ==============================================
# MESSAGE PASSING (from v2.0):contentReference[oaicite:12]{index=12}
# ==============================================

<send_message> ::= "SendMessage" "." IDENTIFIER [ "(" <argument_list> ")" ]
<receive_message> ::= "ReceiveMessage" "." IDENTIFIER "{" { <statement> } "}"
<every_interval> ::= "EveryInterval" IDENTIFIER "-" NUMBER "{" { <statement> } "}"
<with_security> ::= "WithSecurity" "(" "context" "-" STRING ")" "{" { <statement> } "}"

# ==============================================
# BASIC STATEMENTS (from v2.0, extended in v2.1)
# ==============================================

<print_statement> ::= "PrintMessage" "(" <expression> ")"
                    | "PrintNumber" "(" <expression> ")"            # v2.1
                    | "PrintLine" "(" <expression> ")"              # v2.1
                    | "PrintFormat" "(" <expression> { "," <expression> } ")"  # v2.1

<return_statement> ::= "ReturnValue" "(" <expression> ")"
<break_statement> ::= "BreakLoop"
<continue_statement> ::= "ContinueLoop"
<halt_statement> ::= "HaltProgram" [ "(" STRING ")" ]

<run_macro> ::= "RunMacro" "." <dotted_name> "(" [ <argument_list> ] ")"

# ==============================================
# SYSTEMS STATEMENTS (from v2.0):contentReference[oaicite:13]{index=13}
# ==============================================

<interrupt_control> ::= <interrupt_operation>
<interrupt_operation> ::= "EnableInterrupts" | "DisableInterrupts" | "Halt" | "Wait"

<inline_assembly> ::= "InlineAssembly" "(" STRING [ "," <assembly_constraints> ] ")"
<assembly_constraints> ::= <assembly_constraint> { "," <assembly_constraint> }
<assembly_constraint> ::= IDENTIFIER ":" <assembly_constraint_list>
<assembly_constraint_list> ::= "[" [ <assembly_constraint_item> { "," <assembly_constraint_item> } ] "]"
<assembly_constraint_item> ::= STRING ":" <expression>

<system_call> ::= "SystemCall" "(" <expression> { "," <expression> } ")"

# ==============================================
# VIRTUAL MEMORY OPERATIONS (from v2.0):contentReference[oaicite:14]{index=14}
# ==============================================

<vm_operation> ::= <page_table_operation> | <virtual_memory_operation> | <cache_operation> | <tlb_operation> | <memory_barrier_operation>

<page_table_operation> ::= "PageTable" "." <page_table_op> "(" [ <vm_argument_list> ] ")"
<page_table_op> ::= "Create" | "Map" | "Unmap" | "Switch"

<virtual_memory_operation> ::= "VirtualMemory" "." <vm_op> "(" [ <vm_argument_list> ] ")"
<vm_op> ::= "Allocate" | "Free" | "Protect"

<cache_operation> ::= "Cache" "." <cache_op> "(" [ <vm_argument_list> ] ")"
<cache_op> ::= "Flush" | "Invalidate" | "Prefetch"

<tlb_operation> ::= "TLB" "." <tlb_op> [ "(" [ <vm_argument_list> ] ")" ]
<tlb_op> ::= "FlushAll" | "Flush" | "Invalidate"

<memory_barrier_operation> ::= "MemoryBarrier" "." <barrier_type> [ "(" [ <vm_argument_list> ] ")" ]
<barrier_type> ::= "Full" | "Read" | "Write"

<vm_argument_list> ::= <vm_argument> { "," <vm_argument> }
<vm_argument> ::= IDENTIFIER "-" <expression>

# ==============================================
# DEBUG & PERFORMANCE (v2.1)
# ==============================================

<debug_operation> ::= <debug_perf_operation> | <debug_assert_operation> | <debug_trace_operation> | <debug_print_operation>

<debug_perf_operation> ::= "DebugPerf" "." <perf_op> "(" STRING ")"
<perf_op> ::= "Start" | "End" | "Mark" | "Reset"

<debug_assert_operation> ::= "DebugAssert" "(" <expression> "," STRING ")"
<debug_trace_operation> ::= "DebugTrace" "(" STRING ")" | "DebugBreak" "(" ")"
<debug_print_operation> ::= "DebugPrint" "(" STRING "," <expression> ")" | "DebugDump" "(" <expression> ")"

# ==============================================
# PERFORMANCE HINTS & PRAGMAS (v2.1)
# ==============================================

<performance_hint> ::= "CacheHint" "." <cache_hint_type> "(" <expression> ")"
                     | "MemoryHint" "." <memory_hint_type> "(" <expression> ")"

<cache_hint_type> ::= "Prefetch" | "NoCache" | "Stream" | "Temporal"
<memory_hint_type> ::= "Sequential" | "Random" | "ReadOnly" | "WriteOnly"

<pragma> ::= "Pragma" "." <pragma_type> "(" [ <pragma_args> ] ")"
<pragma_type> ::= "Inline" | "NoInline" | "Unroll" | "Vectorize" | "Optimize"
<pragma_args> ::= <expression> { "," <expression> }

# ==============================================
# EXPRESSIONS (merged)
# ==============================================

<expression> ::= <logical_expression> | <pool_allocation_expression>

<pool_allocation_expression> ::= "FromPool" "(" <pool_name> "," <expression> ")"
                               | "InPool" "(" <pool_name> "," <expression> ")"
<pool_name> ::= IDENTIFIER | <dotted_name>

<logical_expression> ::= <relational_expression> { <logical_operator> <relational_expression> }
<logical_operator> ::= "And" | "Or" | "Xor" | "Implies"

<relational_expression> ::= <arithmetic_expression> { <relational_operator> <arithmetic_expression> }
<relational_operator> ::= "GreaterThan" | "LessThan" | "GreaterEqual" | "LessEqual" | "EqualTo" | "NotEqual"

<arithmetic_expression> ::= <term> { <additive_operator> <term> }
<additive_operator> ::= "Add" | "Subtract"

<term> ::= <factor> { <multiplicative_operator> <factor> }
<multiplicative_operator> ::= "Multiply" | "Divide" | "Modulo"

<factor> ::= <unary_expression> | <power_expression> | <primary>
<unary_expression> ::= <unary_operator> <primary>
<unary_operator> ::= "Not" | "AbsoluteValue" | "SquareRoot" | "BitwiseNot"
<power_expression> ::= <primary> "Power" <factor>

# ==============================================
# PRIMARY EXPRESSIONS (merged)
# ==============================================

<primary> ::= <literal>
            | <identifier>
            | <function_call>
            | <lambda_expression>
            | <apply_expression>
            | <array_literal>
            | <map_literal>
            | <tuple_literal>
            | <parenthesized_expression>
            | <lowlevel_operation>
            | <string_operation>
            | <file_operation>
            | <mathematical_constant>
            | <pool_operation>        # v2.1
            | <debug_operation>       # v2.1
            | <array_operation>       # v2.1
            | <map_operation>         # v2.1
            | <performance_hint>      # v2.1
            | <pragma>                # v2.1

<parenthesized_expression> ::= "(" <expression> ")"

# ==============================================
# FUNCTION CALLS (merged)
# ==============================================

<function_call> ::= <function_name> "(" [ <argument_list> ] ")"
<function_name> ::= IDENTIFIER | <dotted_name> | <named_operator> | <pool_operation> | <debug_operation>

<named_operator> ::= <arithmetic_operator> | <comparison_operator> | <logical_operator> | <bitwise_operator> | <string_function> | <math_function>
<arithmetic_operator> ::= "Add" | "Subtract" | "Multiply" | "Divide" | "Power" | "Modulo"
<comparison_operator> ::= "GreaterThan" | "LessThan" | "GreaterEqual" | "LessEqual" | "EqualTo" | "NotEqual"
<bitwise_operator> ::= "BitwiseAnd" | "BitwiseOr" | "BitwiseXor" | "BitwiseNot" | "LeftShift" | "RightShift"
<math_function> ::= "SquareRoot" | "AbsoluteValue"

<apply_expression> ::= "Apply" "(" <expression> { "," <expression> } ")"
<argument_list> ::= <argument> { "," <argument> }
<argument> ::= <expression> | ( IDENTIFIER "-" <expression> )

# ==============================================
# LOW-LEVEL OPERATIONS (from v2.0):contentReference[oaicite:15]{index=15}
# ==============================================

<lowlevel_operation> ::= <pointer_operation> | <memory_operation> | <hardware_operation> | <atomic_operation>

<pointer_operation> ::= "Dereference" "(" <expression> [ "," STRING ] ")"
                      | "AddressOf" "(" <expression> ")"
                      | "SizeOf" "(" <expression> ")"

<memory_operation> ::= "Allocate" "(" <expression> [ "," <expression> ] ")"
                     | "Deallocate" "(" <expression> ")"
                     | "StoreValue" "(" <expression> "," <expression> [ "," STRING ] ")"
                     | "MemoryCopy" "(" <expression> "," <expression> "," <expression> ")"
                     | "MemorySet" "(" <expression> "," <expression> "," <expression> ")"
                     | "MemoryCompare" "(" <expression> "," <expression> "," <expression> ")"

<hardware_operation> ::= "PortRead" "(" <expression> "," STRING ")"
                        | "PortWrite" "(" <expression> "," <expression> "," STRING ")"
                        | "HardwareRegister" "(" STRING "," STRING [ "," <expression> ] ")"
                        | "MMIORead" "(" <expression> [ "," STRING ] ")"
                        | "MMIOWrite" "(" <expression> "," <expression> [ "," STRING ] ")"

<atomic_operation> ::= "AtomicRead" "(" <expression> ")"
                     | "AtomicWrite" "(" <expression> "," <expression> ")"
                     | "AtomicAdd" "(" <expression> "," <expression> ")"
                     | "AtomicCompareSwap" "(" <expression> "," <expression> "," <expression> ")"

# ==============================================
# STRING OPERATIONS (v2.0 + v2.1)
# ==============================================

<string_operation> ::= <string_input_function> | <string_comparison_function> | <string_manipulation_function> | <string_conversion_function> | <string_pool_function>

# Input
<string_input_function> ::= "ReadInput" "(" STRING ")"
                          | "ReadInputNumber" "(" STRING ")"
                          | "GetUserChoice" "(" STRING ")"
                          | "ReadKey" "(" [ STRING ] ")"
                          | "ReadLine" "(" ")"

# Comparison
<string_comparison_function> ::= "StringEquals" "(" <expression> "," <expression> ")"
                               | "StringContains" "(" <expression> "," <expression> ")"
                               | "StringStartsWith" "(" <expression> "," <expression> ")"
                               | "StringEndsWith" "(" <expression> "," <expression> ")"
                               | "StringCompare" "(" <expression> "," <expression> ")"

# Manipulation
<string_manipulation_function> ::= "StringConcat" "(" <expression> { "," <expression> } ")"
                                 | "StringConcatPooled" "(" <expression> "," <expression> ")"
                                 | "StringLength" "(" <expression> ")"
                                 | "StringSubstring" "(" <expression> "," <expression> [ "," <expression> ] ")"
                                 | "StringToUpper" "(" <expression> ")"
                                 | "StringToLower" "(" <expression> ")"
                                 | "StringTrim" "(" <expression> ")"
                                 | "StringReplace" "(" <expression> "," <expression> "," <expression> ")"
                                 | "StringSplit" "(" <expression> "," <expression> ")"

# Conversion
<string_conversion_function> ::= "StringToString" "(" <expression> ")"
                               | "NumberToString" "(" <expression> ")"
                               | "StringToNumber" "(" <expression> ")"

# Pool-based
<string_pool_function> ::= "StringConcatPooled" "(" <expression> "," <expression> ")"
                         | "StringCopyPooled" "(" <expression> "," <expression> ")"
                         | "StringSubstringPooled" "(" <expression> "," <expression> "," <expression> ")"

# ==============================================
# ARRAY OPERATIONS (v2.1)
# ==============================================

<array_operation> ::= "ArrayCreate" "(" <expression> ")"
                    | "ArrayGet" "(" <expression> "," <expression> ")"
                    | "ArraySet" "(" <expression> "," <expression> "," <expression> ")"
                    | "ArrayLength" "(" <expression> ")"
                    | "ArrayAppend" "(" <expression> "," <expression> ")"
                    | "ArraySlice" "(" <expression> "," <expression> "," <expression> ")"

# ==============================================
# MAP OPERATIONS (v2.1)
# ==============================================

<map_operation> ::= "MapCreate" "(" ")"
                  | "MapGet" "(" <expression> "," <expression> ")"
                  | "MapSet" "(" <expression> "," <expression> "," <expression> ")"
                  | "MapHasKey" "(" <expression> "," <expression> ")"
                  | "MapKeys" "(" <expression> ")"
                  | "MapValues" "(" <expression> ")"
                  | "MapRemove" "(" <expression> "," <expression> ")"

# ==============================================
# FILE I/O (from v2.0):contentReference[oaicite:16]{index=16}
# ==============================================

<file_operation> ::= <basic_file_operation> | <advanced_file_operation> | <directory_operation> | <file_info_operation>

<basic_file_operation> ::= "ReadTextFile" "(" <expression> ")"
                         | "WriteTextFile" "(" <expression> "," <expression> ")"
                         | "AppendTextFile" "(" <expression> "," <expression> ")"
                         | "FileExists" "(" <expression> ")"

<advanced_file_operation> ::= "OpenFile" "(" <expression> "," STRING ")"
                            | "CloseFile" "(" <expression> ")"
                            | "ReadFile" "(" <expression> [ "," <expression> ] ")"
                            | "WriteFile" "(" <expression> "," <expression> ")"
                            | "SeekPosition" "(" <expression> "," <expression> ")"
                            | "FlushFile" "(" <expression> ")"

<directory_operation> ::= "CreateDirectory" "(" <expression> ")"
                        | "DeleteDirectory" "(" <expression> ")"
                        | "ListDirectory" "(" <expression> ")"
                        | "DirectoryExists" "(" <expression> ")"

<file_info_operation> ::= "GetFileSize" "(" <expression> ")"
                        | "GetFileDate" "(" <expression> ")"
                        | "GetFilePermissions" "(" <expression> ")"

# ==============================================
# LITERALS & CONSTANTS (from v2.0 + minor v2.1 additions)
# ==============================================

<literal> ::= <number_literal> | <string_literal> | <boolean_literal> | <null_literal>
<number_literal> ::= NUMBER | HEXNUMBER | FLOATNUMBER
<string_literal> ::= STRING
<boolean_literal> ::= "True" | "False"
<null_literal> ::= "Null"
<mathematical_constant> ::= "PI" | "E" | "PHI"

<array_literal> ::= "[" [ <expression> { "," <expression> } ] "]"
<map_literal> ::= "{" [ <map_pair> { "," <map_pair> } ] "}"
<map_pair> ::= <expression> ":" <expression>
<tuple_literal> ::= "(" <expression> "," <expression> { "," <expression> } ")"

# ==============================================
# TYPE EXPRESSIONS (from v2.0):contentReference[oaicite:17]{index=17}
# ==============================================

<type_expression> ::= <basic_type> | <collection_type> | <pointer_type> | <function_type> | <optional_type> | <constrained_type_reference>

<basic_type> ::= "Integer" | "FloatingPoint" | "Text" | "Boolean" | "Address" | "Void" | "Any"
               | "Byte" | "Word" | "DWord" | "QWord"
               | "UInt8" | "UInt16" | "UInt32" | "UInt64"
               | "Int8" | "Int16" | "Int32" | "Int64"

<collection_type> ::= <array_type> | <map_type> | <tuple_type> | <record_type>
<array_type> ::= "Array" "[" <type_expression> [ "," NUMBER ] "]"
<map_type> ::= "Map" "[" <type_expression> "," <type_expression> "]"
<tuple_type> ::= "Tuple" "[" <type_expression> { "," <type_expression> } "]"
<record_type> ::= "Record" "{" <field_list> "}"
<field_list> ::= <field> { "," <field> }
<field> ::= IDENTIFIER ":" <type_expression>

<pointer_type> ::= "Pointer" "[" <type_expression> "]"
<function_type> ::= "Function" "[" { <type_expression> } "->" <type_expression> "]"
<optional_type> ::= "OptionalType" "[" <type_expression> "]"
<constrained_type_reference> ::= "ConstrainedType" "." IDENTIFIER

# ==============================================
# IDENTIFIERS (from v2.0):contentReference[oaicite:18]{index=18}
# ==============================================

<identifier> ::= IDENTIFIER | <dotted_name>

# ==============================================
# COMPILER DIRECTIVES (v2.1)
# ==============================================

<compiler_directive> ::= "CompilerFlag" "." <flag_name> "=" <expression>
<flag_name> ::= "OptimizationLevel" | "DebugInfo" | "TargetArch" | "StackSize" | "HeapSize"

# ==============================================
# TERMINALS (LEXICAL TOKENS) (merged)
# ==============================================

IDENTIFIER ::= [a-zA-Z_][a-zA-Z0-9_]*

NUMBER ::= [0-9]+ 
         | [0-9]+\.[0-9]+ 
         | [0-9]+[eE][+-]?[0-9]+
         | [0-9][0-9_]*[0-9]

HEXNUMBER ::= "0"[xX][0-9a-fA-F]+
FLOATNUMBER ::= [0-9]*\.[0-9]+([eE][+-]?[0-9]+)?

STRING ::= "\"" ( [^"\n\r\\] | \\["\\/bfnrt] | \\u[0-9a-fA-F]{4} )* "\""

COMMENT ::= "//" [^\n\r]* [\n\r]
DOC_COMMENT ::= "//DOC:" .*? "//"
COM_COMMENT ::= "//COM:" .*? "//"
TAG_COMMENT ::= "//TAG:" [^\n\r]* [\n\r]

# ==============================================
# OPERATOR PRECEDENCE (Highest to Lowest) (v2.1 order)
# ==============================================

# 1. Primary expressions (literals, identifiers, parentheses)
# 2. Function calls (including pool/debug/array/map/perf/pragma)
# 3. Unary operators (Not, AbsoluteValue, SquareRoot, BitwiseNot)
# 4. Power (Power)
# 5. Multiplicative (Multiply, Divide, Modulo)
# 6. Additive (Add, Subtract)
# 7. Bitwise shift (LeftShift, RightShift)
# 8. Relational (GreaterThan, LessThan, GreaterEqual, LessEqual)
# 9. Equality (EqualTo, NotEqual)
# 10. Bitwise AND (BitwiseAnd)
# 11. Bitwise XOR (BitwiseXor)
# 12. Bitwise OR (BitwiseOr)
# 13. Logical AND (And)
# 14. Logical XOR (Xor)
# 15. Logical OR (Or)
# 16. Implication (Implies)

# ==============================================
# ASSOCIATIVITY RULES (from v2.0):contentReference[oaicite:19]{index=19}
# ==============================================

# Left-associative: Add, Subtract, Multiply, Divide, Modulo, And, Or, Xor
# Right-associative: Power, Implies
# Non-associative: Relational operators, EqualTo, NotEqual

# ==============================================
# LANGUAGE FEATURES COVERAGE v2.2
# ==============================================

# ✅ Core Language: Variables, expressions, control flow
# ✅ Pool System: StringPool + Fixed/Dynamic/Temporal/Neural/KERNEL/etc.
# ✅ Functions: Functions, subroutines, lambdas, combinators
# ✅ Types: Basic types, collections, pointers, constraints
# ✅ Operators: Named arithmetic, logical, bitwise operators
# ✅ Strings: Input, manipulation, comparison, conversion, **Pooled ops**
# ✅ Debug/Perf: DebugPerf timing, assertions, tracing, dumps
# ✅ Data Structures: Arrays & Maps (create/get/set/slice/keys/values)
# ✅ File I/O: Basic and advanced file operations
# ✅ Systems Programming: Memory, hardware, atomic ops
# ✅ Virtual Memory: PageTable, VirtualMemory, Cache, TLB, barriers
# ✅ Security: Security contexts and access control
# ✅ Macros: Macro definitions and expansion
# ✅ Error Handling: Try/Catch/Finally
# ✅ Communication: Message passing, LoopMain/Actor/Shadow flows
# ✅ Comments: DOC/COM/TAG/line comments
# ✅ Constants: Mathematical and user-defined constants
# ✅ Performance: Cache/Memory hints, Pragmas (Inline/Unroll/Vectorize)

# ==============================================
# GRAMMAR VALIDATION
# ==============================================

# This v2.2 grammar merges v2.0:contentReference[oaicite:20]{index=20} with v2.1 extensions.
# Grammar completeness: 100%
# Feature coverage: All current language constructs
# Validation: Passes existing 30/30 regression + pool/debug/array/map additions

# ==============================================
# END OF GRAMMAR SPECIFICATION
# ==============================================
